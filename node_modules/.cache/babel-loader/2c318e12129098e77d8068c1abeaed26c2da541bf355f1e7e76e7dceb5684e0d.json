{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_ready_callbacks.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport domAdapter from \"../../../core/dom_adapter\";\nimport callOnce from \"../../../core/utils/call_once\";\nimport injector from \"../../../core/utils/dependency_injector\";\nimport { hasWindow } from \"../../../core/utils/window\";\nlet callbacks = [];\nconst subscribeReady = callOnce(() => {\n  const removeListener = domAdapter.listen(domAdapter.getDocument(), \"DOMContentLoaded\", () => {\n    readyCallbacks.fire();\n    removeListener();\n  });\n});\nconst readyCallbacks = {\n  add: callback => {\n    const windowExists = hasWindow();\n    if (windowExists && \"loading\" !== domAdapter.getReadyState()) {\n      callback();\n    } else {\n      callbacks.push(callback);\n      windowExists && subscribeReady();\n    }\n  },\n  fire: () => {\n    callbacks.forEach(callback => callback());\n    callbacks = [];\n  }\n};\nconst readyCallbacksModule = injector(readyCallbacks);\nexport { readyCallbacksModule };\nexport default readyCallbacksModule;","map":{"version":3,"names":["domAdapter","callOnce","injector","hasWindow","callbacks","subscribeReady","removeListener","listen","getDocument","readyCallbacks","fire","add","callback","windowExists","getReadyState","push","forEach","readyCallbacksModule"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_ready_callbacks.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_ready_callbacks.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport callOnce from \"../../../core/utils/call_once\";\r\nimport injector from \"../../../core/utils/dependency_injector\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nlet callbacks = [];\r\nconst subscribeReady = callOnce((() => {\r\n    const removeListener = domAdapter.listen(domAdapter.getDocument(), \"DOMContentLoaded\", (() => {\r\n        readyCallbacks.fire();\r\n        removeListener()\r\n    }))\r\n}));\r\nconst readyCallbacks = {\r\n    add: callback => {\r\n        const windowExists = hasWindow();\r\n        if (windowExists && \"loading\" !== domAdapter.getReadyState()) {\r\n            callback()\r\n        } else {\r\n            callbacks.push(callback);\r\n            windowExists && subscribeReady()\r\n        }\r\n    },\r\n    fire: () => {\r\n        callbacks.forEach((callback => callback()));\r\n        callbacks = []\r\n    }\r\n};\r\nconst readyCallbacksModule = injector(readyCallbacks);\r\nexport {\r\n    readyCallbacksModule\r\n};\r\nexport default readyCallbacksModule;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,2BAA2B;AAClD,OAAOC,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,SACIC,SAAS,QACN,4BAA4B;AACnC,IAAIC,SAAS,GAAG,EAAE;AAClB,MAAMC,cAAc,GAAGJ,QAAQ,CAAE,MAAM;EACnC,MAAMK,cAAc,GAAGN,UAAU,CAACO,MAAM,CAACP,UAAU,CAACQ,WAAW,CAAC,CAAC,EAAE,kBAAkB,EAAG,MAAM;IAC1FC,cAAc,CAACC,IAAI,CAAC,CAAC;IACrBJ,cAAc,CAAC,CAAC;EACpB,CAAE,CAAC;AACP,CAAE,CAAC;AACH,MAAMG,cAAc,GAAG;EACnBE,GAAG,EAAEC,QAAQ,IAAI;IACb,MAAMC,YAAY,GAAGV,SAAS,CAAC,CAAC;IAChC,IAAIU,YAAY,IAAI,SAAS,KAAKb,UAAU,CAACc,aAAa,CAAC,CAAC,EAAE;MAC1DF,QAAQ,CAAC,CAAC;IACd,CAAC,MAAM;MACHR,SAAS,CAACW,IAAI,CAACH,QAAQ,CAAC;MACxBC,YAAY,IAAIR,cAAc,CAAC,CAAC;IACpC;EACJ,CAAC;EACDK,IAAI,EAAEA,CAAA,KAAM;IACRN,SAAS,CAACY,OAAO,CAAEJ,QAAQ,IAAIA,QAAQ,CAAC,CAAE,CAAC;IAC3CR,SAAS,GAAG,EAAE;EAClB;AACJ,CAAC;AACD,MAAMa,oBAAoB,GAAGf,QAAQ,CAACO,cAAc,CAAC;AACrD,SACIQ,oBAAoB;AAExB,eAAeA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}