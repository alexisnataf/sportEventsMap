{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_inflector.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { map } from \"../../../core/utils/iterator\";\nconst _normalize = function (text) {\n  if (void 0 === text || null === text) {\n    return \"\";\n  }\n  return String(text);\n};\nconst _upperCaseFirst = function (text) {\n  return _normalize(text).charAt(0).toUpperCase() + text.substr(1);\n};\nconst _chop = function (text) {\n  return _normalize(text).replace(/([a-z\\d])([A-Z])/g, \"$1 $2\").split(/[\\s_-]+/);\n};\nexport const dasherize = function (text) {\n  return map(_chop(text), function (p) {\n    return p.toLowerCase();\n  }).join(\"-\");\n};\nexport const underscore = function (text) {\n  return dasherize(text).replace(/-/g, \"_\");\n};\nexport const camelize = function (text, upperFirst) {\n  return map(_chop(text), function (p, i) {\n    p = p.toLowerCase();\n    if (upperFirst || i > 0) {\n      p = _upperCaseFirst(p);\n    }\n    return p;\n  }).join(\"\");\n};\nexport const humanize = function (text) {\n  return _upperCaseFirst(dasherize(text).replace(/-/g, \" \"));\n};\nexport const titleize = function (text) {\n  return map(_chop(text), function (p) {\n    return _upperCaseFirst(p.toLowerCase());\n  }).join(\" \");\n};\nconst DIGIT_CHARS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport const captionize = function (name) {\n  const captionList = [];\n  let i;\n  let char;\n  let isPrevCharNewWord = false;\n  let isNewWord = false;\n  for (i = 0; i < name.length; i++) {\n    char = name.charAt(i);\n    isNewWord = char === char.toUpperCase() && \"-\" !== char && \")\" !== char && \"/\" !== char || char in DIGIT_CHARS;\n    if (\"_\" === char || \".\" === char) {\n      char = \" \";\n      isNewWord = true;\n    } else if (0 === i) {\n      char = char.toUpperCase();\n      isNewWord = true;\n    } else if (!isPrevCharNewWord && isNewWord) {\n      if (captionList.length > 0) {\n        captionList.push(\" \");\n      }\n    }\n    captionList.push(char);\n    isPrevCharNewWord = isNewWord;\n  }\n  return captionList.join(\"\");\n};\nexport default {\n  dasherize: dasherize,\n  underscore: underscore,\n  camelize: camelize,\n  humanize: humanize,\n  titleize: titleize,\n  captionize: captionize\n};","map":{"version":3,"names":["map","_normalize","text","String","_upperCaseFirst","charAt","toUpperCase","substr","_chop","replace","split","dasherize","p","toLowerCase","join","underscore","camelize","upperFirst","i","humanize","titleize","DIGIT_CHARS","captionize","name","captionList","char","isPrevCharNewWord","isNewWord","length","push"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_inflector.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_inflector.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    map\r\n} from \"../../../core/utils/iterator\";\r\nconst _normalize = function(text) {\r\n    if (void 0 === text || null === text) {\r\n        return \"\"\r\n    }\r\n    return String(text)\r\n};\r\nconst _upperCaseFirst = function(text) {\r\n    return _normalize(text).charAt(0).toUpperCase() + text.substr(1)\r\n};\r\nconst _chop = function(text) {\r\n    return _normalize(text).replace(/([a-z\\d])([A-Z])/g, \"$1 $2\").split(/[\\s_-]+/)\r\n};\r\nexport const dasherize = function(text) {\r\n    return map(_chop(text), (function(p) {\r\n        return p.toLowerCase()\r\n    })).join(\"-\")\r\n};\r\nexport const underscore = function(text) {\r\n    return dasherize(text).replace(/-/g, \"_\")\r\n};\r\nexport const camelize = function(text, upperFirst) {\r\n    return map(_chop(text), (function(p, i) {\r\n        p = p.toLowerCase();\r\n        if (upperFirst || i > 0) {\r\n            p = _upperCaseFirst(p)\r\n        }\r\n        return p\r\n    })).join(\"\")\r\n};\r\nexport const humanize = function(text) {\r\n    return _upperCaseFirst(dasherize(text).replace(/-/g, \" \"))\r\n};\r\nexport const titleize = function(text) {\r\n    return map(_chop(text), (function(p) {\r\n        return _upperCaseFirst(p.toLowerCase())\r\n    })).join(\" \")\r\n};\r\nconst DIGIT_CHARS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\nexport const captionize = function(name) {\r\n    const captionList = [];\r\n    let i;\r\n    let char;\r\n    let isPrevCharNewWord = false;\r\n    let isNewWord = false;\r\n    for (i = 0; i < name.length; i++) {\r\n        char = name.charAt(i);\r\n        isNewWord = char === char.toUpperCase() && \"-\" !== char && \")\" !== char && \"/\" !== char || char in DIGIT_CHARS;\r\n        if (\"_\" === char || \".\" === char) {\r\n            char = \" \";\r\n            isNewWord = true\r\n        } else if (0 === i) {\r\n            char = char.toUpperCase();\r\n            isNewWord = true\r\n        } else if (!isPrevCharNewWord && isNewWord) {\r\n            if (captionList.length > 0) {\r\n                captionList.push(\" \")\r\n            }\r\n        }\r\n        captionList.push(char);\r\n        isPrevCharNewWord = isNewWord\r\n    }\r\n    return captionList.join(\"\")\r\n};\r\nexport default {\r\n    dasherize: dasherize,\r\n    underscore: underscore,\r\n    camelize: camelize,\r\n    humanize: humanize,\r\n    titleize: titleize,\r\n    captionize: captionize\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}