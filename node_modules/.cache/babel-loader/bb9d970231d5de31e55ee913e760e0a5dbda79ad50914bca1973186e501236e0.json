{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/list/m_list.edit.strategy.grouped.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport query from \"../../../common/data/query\";\nimport storeHelper from \"../../../common/data/store_helper\";\nimport $ from \"../../../core/renderer\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isNumeric } from \"../../../core/utils/type\";\nimport EditStrategy from \"../../ui/collection/m_collection_widget.edit.strategy.plain\";\nconst LIST_ITEM_CLASS = \"dx-list-item\";\nconst LIST_GROUP_CLASS = \"dx-list-group\";\nconst SELECTION_SHIFT = 20;\nconst SELECTION_MASK = 1048575;\nconst combineIndex = indices => (indices.group << 20) + indices.item;\nconst splitIndex = combinedIndex => ({\n  group: combinedIndex >> 20,\n  item: 1048575 & combinedIndex\n});\nclass GroupedEditStrategy extends EditStrategy {\n  _groupElements() {\n    return this._collectionWidget._itemContainer().find(\".dx-list-group\");\n  }\n  _groupItemElements($group) {\n    return $group.find(\".dx-list-item\");\n  }\n  getIndexByItemData(itemData) {\n    var _itemData$items;\n    const groups = this._collectionWidget.option(\"items\");\n    let index = false;\n    if (!itemData) {\n      return false;\n    }\n    if (null !== (_itemData$items = itemData.items) && void 0 !== _itemData$items && _itemData$items.length) {\n      itemData = itemData.items[0];\n    }\n    each(groups, (groupIndex, group) => {\n      if (!group.items) {\n        return false;\n      }\n      each(group.items, (itemIndex, item) => {\n        if (item !== itemData) {\n          return true;\n        }\n        index = {\n          group: groupIndex,\n          item: itemIndex\n        };\n        return false;\n      });\n      if (index) {\n        return false;\n      }\n    });\n    return index;\n  }\n  getItemDataByIndex(index) {\n    var _items$index$group;\n    const items = this._collectionWidget.option(\"items\");\n    if (isNumeric(index)) {\n      return this.itemsGetter()[index];\n    }\n    return index && (null === (_items$index$group = items[index.group]) || void 0 === _items$index$group ? void 0 : _items$index$group.items[index.item]) || null;\n  }\n  itemsGetter() {\n    let resultItems = [];\n    const {\n      items: items\n    } = this._collectionWidget.option();\n    for (let i = 0; i < items.length; i++) {\n      var _items$i;\n      if (null !== (_items$i = items[i]) && void 0 !== _items$i && _items$i.items) {\n        resultItems = resultItems.concat(items[i].items);\n      } else {\n        resultItems.push(items[i]);\n      }\n    }\n    return resultItems;\n  }\n  deleteItemAtIndex(index) {\n    const indices = splitIndex(index);\n    const itemGroup = this._collectionWidget.option(\"items\")[indices.group].items;\n    itemGroup.splice(indices.item, 1);\n  }\n  getKeysByItems(items) {\n    let plainItems = [];\n    let i;\n    for (i = 0; i < items.length; i++) {\n      var _items$i2;\n      if (null !== (_items$i2 = items[i]) && void 0 !== _items$i2 && _items$i2.items) {\n        plainItems = plainItems.concat(items[i].items);\n      } else {\n        plainItems.push(items[i]);\n      }\n    }\n    const result = [];\n    for (i = 0; i < plainItems.length; i++) {\n      result.push(this._collectionWidget.keyOf(plainItems[i]));\n    }\n    return result;\n  }\n  getIndexByKey(key, items) {\n    const groups = items || this._collectionWidget.option(\"items\");\n    let index = -1;\n    const that = this;\n    each(groups, (groupIndex, group) => {\n      if (!group.items) {\n        return;\n      }\n      each(group.items, (itemIndex, item) => {\n        const itemKey = that._collectionWidget.keyOf(item);\n        if (that._equalKeys(itemKey, key)) {\n          index = {\n            group: groupIndex,\n            item: itemIndex\n          };\n          return false;\n        }\n      });\n      if (-1 !== index) {\n        return false;\n      }\n    });\n    return index;\n  }\n  _getGroups(items) {\n    const dataController = this._collectionWidget._dataController;\n    const group = dataController.group();\n    if (group) {\n      return storeHelper.queryByOptions(query(items), {\n        group: group\n      }).toArray();\n    }\n    return this._collectionWidget.option(\"items\");\n  }\n  getItemsByKeys(keys, items) {\n    const result = [];\n    const groups = this._getGroups(items);\n    const groupItemByKeyMap = {};\n    const getItemMeta = key => {\n      const index = this.getIndexByKey(key, groups);\n      const group = index && groups[index.group];\n      if (!group) {\n        return;\n      }\n      return {\n        groupKey: group.key,\n        item: group.items[index.item]\n      };\n    };\n    each(keys, (_, key) => {\n      const itemMeta = getItemMeta(key);\n      if (!itemMeta) {\n        return;\n      }\n      const {\n        groupKey: groupKey\n      } = itemMeta;\n      const {\n        item: item\n      } = itemMeta;\n      let selectedGroup = groupItemByKeyMap[groupKey];\n      if (!selectedGroup) {\n        selectedGroup = {\n          key: groupKey,\n          items: []\n        };\n        groupItemByKeyMap[groupKey] = selectedGroup;\n        result.push(selectedGroup);\n      }\n      selectedGroup.items.push(item);\n    });\n    return result;\n  }\n  moveItemAtIndexToIndex(movingIndex, destinationIndex) {\n    const items = this._collectionWidget.option(\"items\");\n    const movingIndices = splitIndex(movingIndex);\n    const destinationIndices = splitIndex(destinationIndex);\n    const movingItemGroup = items[movingIndices.group].items;\n    const destinationItemGroup = items[destinationIndices.group].items;\n    const movedItemData = movingItemGroup[movingIndices.item];\n    movingItemGroup.splice(movingIndices.item, 1);\n    destinationItemGroup.splice(destinationIndices.item, 0, movedItemData);\n  }\n  _isItemIndex(index) {\n    return index && isNumeric(index.group) && isNumeric(index.item);\n  }\n  _getNormalizedItemIndex(itemElement) {\n    const $item = $(itemElement);\n    const $group = $item.closest(\".dx-list-group\");\n    if (!$group.length) {\n      return -1;\n    }\n    return combineIndex({\n      group: this._groupElements().index($group),\n      item: this._groupItemElements($group).index($item)\n    });\n  }\n  _normalizeItemIndex(index) {\n    return combineIndex(index);\n  }\n  _denormalizeItemIndex(index) {\n    return splitIndex(index);\n  }\n  _getItemByNormalizedIndex(index) {\n    const indices = splitIndex(index);\n    const $group = this._groupElements().eq(indices.group);\n    return this._groupItemElements($group).eq(indices.item);\n  }\n  _itemsFromSameParent(firstIndex, secondIndex) {\n    return splitIndex(firstIndex).group === splitIndex(secondIndex).group;\n  }\n}\nexport default GroupedEditStrategy;","map":{"version":3,"names":["query","storeHelper","$","each","isNumeric","EditStrategy","LIST_ITEM_CLASS","LIST_GROUP_CLASS","SELECTION_SHIFT","SELECTION_MASK","combineIndex","indices","group","item","splitIndex","combinedIndex","GroupedEditStrategy","_groupElements","_collectionWidget","_itemContainer","find","_groupItemElements","$group","getIndexByItemData","itemData","_itemData$items","groups","option","index","items","length","groupIndex","itemIndex","getItemDataByIndex","_items$index$group","itemsGetter","resultItems","i","_items$i","concat","push","deleteItemAtIndex","itemGroup","splice","getKeysByItems","plainItems","_items$i2","result","keyOf","getIndexByKey","key","that","itemKey","_equalKeys","_getGroups","dataController","_dataController","queryByOptions","toArray","getItemsByKeys","keys","groupItemByKeyMap","getItemMeta","groupKey","_","itemMeta","selectedGroup","moveItemAtIndexToIndex","movingIndex","destinationIndex","movingIndices","destinationIndices","movingItemGroup","destinationItemGroup","movedItemData","_isItemIndex","_getNormalizedItemIndex","itemElement","$item","closest","_normalizeItemIndex","_denormalizeItemIndex","_getItemByNormalizedIndex","eq","_itemsFromSameParent","firstIndex","secondIndex"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/list/m_list.edit.strategy.grouped.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/list/m_list.edit.strategy.grouped.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport query from \"../../../common/data/query\";\r\nimport storeHelper from \"../../../common/data/store_helper\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport EditStrategy from \"../../ui/collection/m_collection_widget.edit.strategy.plain\";\r\nconst LIST_ITEM_CLASS = \"dx-list-item\";\r\nconst LIST_GROUP_CLASS = \"dx-list-group\";\r\nconst SELECTION_SHIFT = 20;\r\nconst SELECTION_MASK = 1048575;\r\nconst combineIndex = indices => (indices.group << 20) + indices.item;\r\nconst splitIndex = combinedIndex => ({\r\n    group: combinedIndex >> 20,\r\n    item: 1048575 & combinedIndex\r\n});\r\nclass GroupedEditStrategy extends EditStrategy {\r\n    _groupElements() {\r\n        return this._collectionWidget._itemContainer().find(\".dx-list-group\")\r\n    }\r\n    _groupItemElements($group) {\r\n        return $group.find(\".dx-list-item\")\r\n    }\r\n    getIndexByItemData(itemData) {\r\n        var _itemData$items;\r\n        const groups = this._collectionWidget.option(\"items\");\r\n        let index = false;\r\n        if (!itemData) {\r\n            return false\r\n        }\r\n        if (null !== (_itemData$items = itemData.items) && void 0 !== _itemData$items && _itemData$items.length) {\r\n            itemData = itemData.items[0]\r\n        }\r\n        each(groups, ((groupIndex, group) => {\r\n            if (!group.items) {\r\n                return false\r\n            }\r\n            each(group.items, ((itemIndex, item) => {\r\n                if (item !== itemData) {\r\n                    return true\r\n                }\r\n                index = {\r\n                    group: groupIndex,\r\n                    item: itemIndex\r\n                };\r\n                return false\r\n            }));\r\n            if (index) {\r\n                return false\r\n            }\r\n        }));\r\n        return index\r\n    }\r\n    getItemDataByIndex(index) {\r\n        var _items$index$group;\r\n        const items = this._collectionWidget.option(\"items\");\r\n        if (isNumeric(index)) {\r\n            return this.itemsGetter()[index]\r\n        }\r\n        return index && (null === (_items$index$group = items[index.group]) || void 0 === _items$index$group ? void 0 : _items$index$group.items[index.item]) || null\r\n    }\r\n    itemsGetter() {\r\n        let resultItems = [];\r\n        const {\r\n            items: items\r\n        } = this._collectionWidget.option();\r\n        for (let i = 0; i < items.length; i++) {\r\n            var _items$i;\r\n            if (null !== (_items$i = items[i]) && void 0 !== _items$i && _items$i.items) {\r\n                resultItems = resultItems.concat(items[i].items)\r\n            } else {\r\n                resultItems.push(items[i])\r\n            }\r\n        }\r\n        return resultItems\r\n    }\r\n    deleteItemAtIndex(index) {\r\n        const indices = splitIndex(index);\r\n        const itemGroup = this._collectionWidget.option(\"items\")[indices.group].items;\r\n        itemGroup.splice(indices.item, 1)\r\n    }\r\n    getKeysByItems(items) {\r\n        let plainItems = [];\r\n        let i;\r\n        for (i = 0; i < items.length; i++) {\r\n            var _items$i2;\r\n            if (null !== (_items$i2 = items[i]) && void 0 !== _items$i2 && _items$i2.items) {\r\n                plainItems = plainItems.concat(items[i].items)\r\n            } else {\r\n                plainItems.push(items[i])\r\n            }\r\n        }\r\n        const result = [];\r\n        for (i = 0; i < plainItems.length; i++) {\r\n            result.push(this._collectionWidget.keyOf(plainItems[i]))\r\n        }\r\n        return result\r\n    }\r\n    getIndexByKey(key, items) {\r\n        const groups = items || this._collectionWidget.option(\"items\");\r\n        let index = -1;\r\n        const that = this;\r\n        each(groups, ((groupIndex, group) => {\r\n            if (!group.items) {\r\n                return\r\n            }\r\n            each(group.items, ((itemIndex, item) => {\r\n                const itemKey = that._collectionWidget.keyOf(item);\r\n                if (that._equalKeys(itemKey, key)) {\r\n                    index = {\r\n                        group: groupIndex,\r\n                        item: itemIndex\r\n                    };\r\n                    return false\r\n                }\r\n            }));\r\n            if (-1 !== index) {\r\n                return false\r\n            }\r\n        }));\r\n        return index\r\n    }\r\n    _getGroups(items) {\r\n        const dataController = this._collectionWidget._dataController;\r\n        const group = dataController.group();\r\n        if (group) {\r\n            return storeHelper.queryByOptions(query(items), {\r\n                group: group\r\n            }).toArray()\r\n        }\r\n        return this._collectionWidget.option(\"items\")\r\n    }\r\n    getItemsByKeys(keys, items) {\r\n        const result = [];\r\n        const groups = this._getGroups(items);\r\n        const groupItemByKeyMap = {};\r\n        const getItemMeta = key => {\r\n            const index = this.getIndexByKey(key, groups);\r\n            const group = index && groups[index.group];\r\n            if (!group) {\r\n                return\r\n            }\r\n            return {\r\n                groupKey: group.key,\r\n                item: group.items[index.item]\r\n            }\r\n        };\r\n        each(keys, ((_, key) => {\r\n            const itemMeta = getItemMeta(key);\r\n            if (!itemMeta) {\r\n                return\r\n            }\r\n            const {\r\n                groupKey: groupKey\r\n            } = itemMeta;\r\n            const {\r\n                item: item\r\n            } = itemMeta;\r\n            let selectedGroup = groupItemByKeyMap[groupKey];\r\n            if (!selectedGroup) {\r\n                selectedGroup = {\r\n                    key: groupKey,\r\n                    items: []\r\n                };\r\n                groupItemByKeyMap[groupKey] = selectedGroup;\r\n                result.push(selectedGroup)\r\n            }\r\n            selectedGroup.items.push(item)\r\n        }));\r\n        return result\r\n    }\r\n    moveItemAtIndexToIndex(movingIndex, destinationIndex) {\r\n        const items = this._collectionWidget.option(\"items\");\r\n        const movingIndices = splitIndex(movingIndex);\r\n        const destinationIndices = splitIndex(destinationIndex);\r\n        const movingItemGroup = items[movingIndices.group].items;\r\n        const destinationItemGroup = items[destinationIndices.group].items;\r\n        const movedItemData = movingItemGroup[movingIndices.item];\r\n        movingItemGroup.splice(movingIndices.item, 1);\r\n        destinationItemGroup.splice(destinationIndices.item, 0, movedItemData)\r\n    }\r\n    _isItemIndex(index) {\r\n        return index && isNumeric(index.group) && isNumeric(index.item)\r\n    }\r\n    _getNormalizedItemIndex(itemElement) {\r\n        const $item = $(itemElement);\r\n        const $group = $item.closest(\".dx-list-group\");\r\n        if (!$group.length) {\r\n            return -1\r\n        }\r\n        return combineIndex({\r\n            group: this._groupElements().index($group),\r\n            item: this._groupItemElements($group).index($item)\r\n        })\r\n    }\r\n    _normalizeItemIndex(index) {\r\n        return combineIndex(index)\r\n    }\r\n    _denormalizeItemIndex(index) {\r\n        return splitIndex(index)\r\n    }\r\n    _getItemByNormalizedIndex(index) {\r\n        const indices = splitIndex(index);\r\n        const $group = this._groupElements().eq(indices.group);\r\n        return this._groupItemElements($group).eq(indices.item)\r\n    }\r\n    _itemsFromSameParent(firstIndex, secondIndex) {\r\n        return splitIndex(firstIndex).group === splitIndex(secondIndex).group\r\n    }\r\n}\r\nexport default GroupedEditStrategy;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}