{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/collection/m_collection_widget.edit.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { DataSource } from \"../../../common/data/data_source/data_source\";\nimport { normalizeLoadResult } from \"../../../common/data/data_source/utils\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport { compileGetter } from \"../../../core/utils/data\";\nimport { Deferred, fromPromise, when } from \"../../../core/utils/deferred\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport errors from \"../../../ui/widget/ui.errors\";\nimport BaseCollectionWidget from \"../../ui/collection/collection_widget.base\";\nimport PlainEditStrategy from \"../../ui/collection/m_collection_widget.edit.strategy.plain\";\nimport Selection from \"../../ui/selection/m_selection\";\nconst ITEM_DELETING_DATA_KEY = \"dxItemDeleting\";\nconst SELECTED_ITEM_CLASS = \"dx-item-selected\";\nexport const NOT_EXISTING_INDEX = -1;\nconst indexExists = index => index !== NOT_EXISTING_INDEX;\nclass CollectionWidget extends BaseCollectionWidget {\n  _setOptionsByReference() {\n    super._setOptionsByReference();\n    extend(this._optionsByReference, {\n      selectedItem: true\n    });\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      selectionMode: \"none\",\n      selectionRequired: false,\n      selectByClick: true,\n      selectedItems: [],\n      selectedItemKeys: [],\n      maxFilterLengthInRequest: 1500,\n      keyExpr: null,\n      selectedIndex: NOT_EXISTING_INDEX,\n      focusOnSelectedItem: true,\n      selectedItem: null,\n      onSelectionChanging: null,\n      onSelectionChanged: null,\n      onItemReordered: null,\n      onItemDeleting: null,\n      onItemDeleted: null\n    });\n  }\n  ctor(element, options) {\n    this._userOptions = options || {};\n    super.ctor(element, options);\n  }\n  _init() {\n    this._initEditStrategy();\n    super._init();\n    this._initKeyGetter();\n    this._initActions();\n    this._initSelectionModule();\n  }\n  _initKeyGetter() {\n    this._keyGetter = compileGetter(this.option(\"keyExpr\"));\n  }\n  _selectedItemClass() {\n    return \"dx-item-selected\";\n  }\n  _getActionsList() {\n    return [\"onSelectionChanging\", \"onSelectionChanged\"];\n  }\n  _initActions() {\n    this._actions = {};\n    const actions = this._getActionsList();\n    actions.forEach(action => {\n      this._actions[action] = this._createActionByOption(action, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      }) ?? noop;\n    });\n  }\n  _getKeysByItems(selectedItems) {\n    return this._editStrategy.getKeysByItems(selectedItems);\n  }\n  _getItemsByKeys(selectedItemKeys, selectedItems) {\n    return this._editStrategy.getItemsByKeys(selectedItemKeys, selectedItems);\n  }\n  _getKeyByIndex(index) {\n    return this._editStrategy.getKeyByIndex(index);\n  }\n  _getIndexByKey(key) {\n    return this._editStrategy.getIndexByKey(key);\n  }\n  _getIndexByItemData(itemData) {\n    return this._editStrategy.getIndexByItemData(itemData);\n  }\n  _isKeySpecified() {\n    return !!this._dataController.key();\n  }\n  _getCombinedFilter() {\n    return this._dataController.filter();\n  }\n  key() {\n    const {\n      keyExpr: keyExpr\n    } = this.option();\n    if (keyExpr) {\n      return keyExpr;\n    }\n    return this._dataController.key();\n  }\n  keyOf(item) {\n    let key = item;\n    if (this.option(\"keyExpr\")) {\n      key = this._keyGetter(item);\n    } else if (this._dataController.store()) {\n      key = this._dataController.keyOf(item);\n    }\n    return key;\n  }\n  _nullValueSelectionSupported() {\n    return false;\n  }\n  _initSelectionModule() {\n    const that = this;\n    const {\n      itemsGetter: itemsGetter\n    } = this._editStrategy;\n    this._selection = new Selection({\n      allowNullValue: this._nullValueSelectionSupported(),\n      mode: this.option(\"selectionMode\"),\n      maxFilterLengthInRequest: this.option(\"maxFilterLengthInRequest\"),\n      equalByReference: !this._isKeySpecified(),\n      onSelectionChanging: args => {\n        var _this$_actions$onSele, _this$_actions;\n        const isSelectionChanged = args.addedItemKeys.length || args.removedItemKeys.length;\n        if (!this._rendered || !isSelectionChanged) {\n          return;\n        }\n        const selectionChangingArgs = {\n          removedItems: args.removedItems,\n          addedItems: args.addedItems,\n          cancel: false\n        };\n        null === (_this$_actions$onSele = (_this$_actions = this._actions).onSelectionChanging) || void 0 === _this$_actions$onSele || _this$_actions$onSele.call(_this$_actions, selectionChangingArgs);\n        args.cancel = selectionChangingArgs.cancel;\n      },\n      onSelectionChanged: args => {\n        if (args.addedItemKeys.length || args.removedItemKeys.length) {\n          this.option(\"selectedItems\", this._getItemsByKeys(args.selectedItemKeys, args.selectedItems));\n          this._updateSelectedItems(args);\n        }\n      },\n      filter: this._getCombinedFilter.bind(this),\n      totalCount: () => {\n        const {\n          items: items\n        } = this.option();\n        const totalCount = this._dataController.totalCount();\n        return totalCount >= 0 ? totalCount : this._getItemsCount(items);\n      },\n      key: this.key.bind(this),\n      keyOf: this.keyOf.bind(this),\n      load(options) {\n        var _dataController$loadO;\n        const dataController = that._dataController;\n        options.customQueryParams = null === (_dataController$loadO = dataController.loadOptions()) || void 0 === _dataController$loadO ? void 0 : _dataController$loadO.customQueryParams;\n        options.userData = dataController.userData();\n        if (dataController.store()) {\n          return dataController.loadFromStore(options).done(loadResult => {\n            if (that._disposed) {\n              return;\n            }\n            const items = normalizeLoadResult(loadResult).data;\n            dataController.applyMapFunction(items);\n          });\n        }\n        return Deferred().resolve(this.plainItems());\n      },\n      dataFields: () => this._dataController.select(),\n      plainItems: itemsGetter.bind(this._editStrategy)\n    });\n  }\n  _getItemsCount(items) {\n    return items.reduce((itemsCount, item) => itemsCount + (item.items ? this._getItemsCount(item.items) : 1), 0);\n  }\n  _initEditStrategy() {\n    this._editStrategy = new PlainEditStrategy(this);\n  }\n  _getSelectedItemIndices(keys) {\n    const indices = [];\n    keys = keys || this._selection.getSelectedItemKeys();\n    this._editStrategy.beginCache();\n    each(keys, (_, key) => {\n      const selectedIndex = this._getIndexByKey(key);\n      if (indexExists(selectedIndex)) {\n        indices.push(selectedIndex);\n      }\n    });\n    this._editStrategy.endCache();\n    return indices;\n  }\n  _initMarkup() {\n    this._rendering = true;\n    if (!this._dataController.isLoading()) {\n      this._syncSelectionOptions().done(() => this._normalizeSelectedItems());\n    }\n    super._initMarkup();\n  }\n  _render() {\n    super._render();\n    this._rendering = false;\n  }\n  _fireContentReadyAction() {\n    this._rendering = false;\n    this._rendered = true;\n    super._fireContentReadyAction();\n  }\n  _syncSelectionOptions(byOption) {\n    byOption = byOption ?? this._chooseSelectOption();\n    let selectedItem;\n    let selectedIndex;\n    let selectedItemKeys;\n    let selectedItems;\n    switch (byOption) {\n      case \"selectedIndex\":\n        selectedItem = this._editStrategy.getItemDataByIndex(this.option(\"selectedIndex\"));\n        if (isDefined(selectedItem)) {\n          this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\n          this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]));\n        } else {\n          this._setOptionWithoutOptionChange(\"selectedItems\", []);\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\n          this._setOptionWithoutOptionChange(\"selectedItem\", null);\n        }\n        break;\n      case \"selectedItems\":\n        selectedItems = this.option(\"selectedItems\") || [];\n        selectedIndex = selectedItems.length ? this._editStrategy.getIndexByItemData(selectedItems[0]) : NOT_EXISTING_INDEX;\n        if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\n          return this._syncSelectionOptions(\"selectedIndex\");\n        }\n        this._setOptionWithoutOptionChange(\"selectedItem\", selectedItems[0]);\n        this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\n        this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems(selectedItems));\n        break;\n      case \"selectedItem\":\n        selectedItem = this.option(\"selectedItem\");\n        selectedIndex = this._editStrategy.getIndexByItemData(selectedItem);\n        if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\n          return this._syncSelectionOptions(\"selectedIndex\");\n        }\n        if (isDefined(selectedItem)) {\n          this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\n          this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]));\n        } else {\n          this._setOptionWithoutOptionChange(\"selectedItems\", []);\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\n          this._setOptionWithoutOptionChange(\"selectedIndex\", NOT_EXISTING_INDEX);\n        }\n        break;\n      case \"selectedItemKeys\":\n        selectedItemKeys = this.option(\"selectedItemKeys\");\n        if (this.option(\"selectionRequired\")) {\n          const selectedItemIndex = this._getIndexByKey(selectedItemKeys[0]);\n          if (!indexExists(selectedItemIndex)) {\n            return this._syncSelectionOptions(\"selectedIndex\");\n          }\n        }\n        return this._selection.setSelection(selectedItemKeys);\n    }\n    return Deferred().resolve().promise();\n  }\n  _chooseSelectOption() {\n    let optionName = \"selectedIndex\";\n    const isOptionDefined = name => {\n      const optionValue = this.option(name);\n      const length = isDefined(optionValue) && optionValue.length;\n      return length || name in this._userOptions;\n    };\n    if (isOptionDefined(\"selectedItems\")) {\n      optionName = \"selectedItems\";\n    } else if (isOptionDefined(\"selectedItem\")) {\n      optionName = \"selectedItem\";\n    } else if (isOptionDefined(\"selectedItemKeys\")) {\n      optionName = \"selectedItemKeys\";\n    }\n    return optionName;\n  }\n  _compareKeys(oldKeys, newKeys) {\n    if (oldKeys.length !== newKeys.length) {\n      return false;\n    }\n    for (let i = 0; i < newKeys.length; i++) {\n      if (oldKeys[i] !== newKeys[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _normalizeSelectedItems() {\n    const {\n      selectionMode: selectionMode,\n      selectedItems: selectedItems,\n      items: items\n    } = this.option();\n    if (\"none\" === selectionMode) {\n      this._setOptionWithoutOptionChange(\"selectedItems\", []);\n      this._syncSelectionOptions(\"selectedItems\");\n    } else if (\"single\" === selectionMode) {\n      const newSelection = selectedItems ?? [];\n      if (newSelection.length > 1 || !newSelection.length && this.option(\"selectionRequired\") && items && items.length) {\n        const currentSelection = this._selection.getSelectedItems();\n        let normalizedSelection = void 0 === newSelection[0] ? currentSelection[0] : newSelection[0];\n        if (void 0 === normalizedSelection) {\n          normalizedSelection = this._editStrategy.itemsGetter()[0];\n        }\n        if (this.option(\"grouped\") && normalizedSelection && normalizedSelection.items) {\n          normalizedSelection.items = [normalizedSelection.items[0]];\n        }\n        this._selection.setSelection(this._getKeysByItems([normalizedSelection]));\n        this._setOptionWithoutOptionChange(\"selectedItems\", [normalizedSelection]);\n        return this._syncSelectionOptions(\"selectedItems\");\n      }\n      this._selection.setSelection(this._getKeysByItems(newSelection));\n    } else {\n      const newKeys = this._getKeysByItems(this.option(\"selectedItems\"));\n      const oldKeys = this._selection.getSelectedItemKeys();\n      if (!this._compareKeys(oldKeys, newKeys)) {\n        this._selection.setSelection(newKeys);\n      }\n    }\n    return Deferred().resolve().promise();\n  }\n  _itemClickHandler(e, args, config) {\n    let itemSelectPromise = Deferred().resolve();\n    this._createAction(e => {\n      itemSelectPromise = this._itemSelectHandler(e.event) ?? itemSelectPromise;\n    }, {\n      validatingTargetName: \"itemElement\"\n    })({\n      itemElement: $(e.currentTarget),\n      event: e\n    });\n    itemSelectPromise.always(() => {\n      super._itemClickHandler(e, args, config);\n    });\n  }\n  _itemSelectHandler(e, shouldIgnoreSelectByClick) {\n    if (!shouldIgnoreSelectByClick && !this.option(\"selectByClick\")) {\n      return;\n    }\n    const $itemElement = e.currentTarget;\n    if (this.isItemSelected($itemElement)) {\n      this.unselectItem(e.currentTarget);\n    } else {\n      const itemSelectPromise = this.selectItem(e.currentTarget);\n      return null === itemSelectPromise || void 0 === itemSelectPromise ? void 0 : itemSelectPromise.promise();\n    }\n  }\n  _selectedItemElement(index) {\n    return this._itemElements().eq(index);\n  }\n  _postprocessRenderItem(args) {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    if (\"none\" !== selectionMode) {\n      const $itemElement = $(args.itemElement);\n      const normalizedItemIndex = this._editStrategy.getNormalizedIndex($itemElement);\n      const isItemSelected = this._isItemSelected(normalizedItemIndex);\n      this._processSelectableItem($itemElement, isItemSelected);\n    }\n  }\n  _processSelectableItem($itemElement, isSelected) {\n    $itemElement.toggleClass(this._selectedItemClass(), isSelected);\n    this._setAriaSelectionAttribute($itemElement, String(isSelected));\n  }\n  _updateSelectedItems(args) {\n    const {\n      addedItemKeys: addedItemKeys,\n      removedItemKeys: removedItemKeys\n    } = args;\n    if (this._rendered && (addedItemKeys.length || removedItemKeys.length)) {\n      if (!this._rendering) {\n        const addedSelection = [];\n        const removedSelection = [];\n        this._editStrategy.beginCache();\n        for (let i = 0; i < addedItemKeys.length; i += 1) {\n          const normalizedIndex = this._getIndexByKey(addedItemKeys[i]);\n          addedSelection.push(normalizedIndex);\n          this._addSelection(normalizedIndex);\n        }\n        for (let i = 0; i < removedItemKeys.length; i += 1) {\n          const normalizedIndex = this._getIndexByKey(removedItemKeys[i]);\n          removedSelection.push(normalizedIndex);\n          this._removeSelection(normalizedIndex);\n        }\n        this._editStrategy.endCache();\n        this._updateSelection(addedSelection, removedSelection);\n      }\n      this._actions.onSelectionChanged({\n        addedItems: args.addedItems,\n        removedItems: args.removedItems\n      });\n    }\n  }\n  _updateSelection(addedSelection, removedSelection) {}\n  _setAriaSelectionAttribute($target, value) {\n    this.setAria(\"selected\", value, $target);\n  }\n  _getFocusedElementIndex() {\n    const {\n      focusOnSelectedItem: focusOnSelectedItem\n    } = this.option();\n    return focusOnSelectedItem ? this._getFlatIndex() : super._getFocusedElementIndex();\n  }\n  _getFlatIndex() {\n    const {\n      selectedIndex = NOT_EXISTING_INDEX\n    } = this.option();\n    return selectedIndex;\n  }\n  _removeSelection(normalizedIndex) {\n    const $itemElement = this._editStrategy.getItemElement(normalizedIndex);\n    if (indexExists(normalizedIndex)) {\n      this._processSelectableItem($itemElement, false);\n      eventsEngine.triggerHandler($itemElement, \"stateChanged\", false);\n    }\n  }\n  _addSelection(normalizedIndex) {\n    const $itemElement = this._editStrategy.getItemElement(normalizedIndex);\n    if (indexExists(normalizedIndex)) {\n      this._processSelectableItem($itemElement, true);\n      eventsEngine.triggerHandler($itemElement, \"stateChanged\", true);\n    }\n  }\n  _isItemSelected(index) {\n    const key = this._getKeyByIndex(index);\n    return this._selection.isItemSelected(key, {\n      checkPending: true\n    });\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"selectionMode\":\n        this._invalidate();\n        break;\n      case \"dataSource\":\n        if (!args.value || Array.isArray(args.value) && !args.value.length) {\n          this.option(\"selectedItemKeys\", []);\n        }\n        super._optionChanged(args);\n        break;\n      case \"selectedIndex\":\n      case \"selectedItem\":\n      case \"selectedItems\":\n      case \"selectedItemKeys\":\n        this._syncSelectionOptions(args.name).done(() => this._normalizeSelectedItems());\n        break;\n      case \"keyExpr\":\n        this._initKeyGetter();\n        break;\n      case \"selectionRequired\":\n        this._normalizeSelectedItems();\n        break;\n      case \"onSelectionChanging\":\n      case \"onSelectionChanged\":\n        this._initActions();\n        break;\n      case \"selectByClick\":\n      case \"onItemDeleting\":\n      case \"onItemDeleted\":\n      case \"onItemReordered\":\n      case \"maxFilterLengthInRequest\":\n      case \"focusOnSelectedItem\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _clearSelectedItems() {\n    this._setOptionWithoutOptionChange(\"selectedItems\", []);\n    this._syncSelectionOptions(\"selectedItems\");\n  }\n  _waitDeletingPrepare($itemElement) {\n    if ($itemElement.data(\"dxItemDeleting\")) {\n      return Deferred().resolve().promise();\n    }\n    $itemElement.data(\"dxItemDeleting\", true);\n    const deferred = Deferred();\n    const deletingActionArgs = {\n      cancel: false\n    };\n    const deletePromise = this._itemEventHandler($itemElement, \"onItemDeleting\", deletingActionArgs, {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    when(deletePromise).always(function (value) {\n      const deletePromiseExists = !deletePromise;\n      const deletePromiseResolved = !deletePromiseExists && \"resolved\" === deletePromise.state();\n      const argumentsSpecified = !!arguments.length;\n      const shouldDelete = deletePromiseExists || deletePromiseResolved && !argumentsSpecified || deletePromiseResolved && value;\n      when(fromPromise(deletingActionArgs.cancel)).always(() => {\n        $itemElement.data(\"dxItemDeleting\", false);\n      }).done(cancel => {\n        if (shouldDelete && !cancel) {\n          deferred.resolve();\n        } else {\n          deferred.reject();\n        }\n      }).fail(deferred.reject);\n    });\n    return deferred.promise();\n  }\n  _deleteItemFromDS($item) {\n    const dataController = this._dataController;\n    const deferred = Deferred();\n    const disabledState = this.option(\"disabled\");\n    const dataStore = dataController.store();\n    if (!dataStore) {\n      return Deferred().resolve().promise();\n    }\n    if (!dataStore.remove) {\n      throw errors.Error(\"E1011\");\n    }\n    this.option(\"disabled\", true);\n    dataStore.remove(dataController.keyOf(this._getItemData($item))).done(key => {\n      if (void 0 !== key) {\n        deferred.resolve();\n      } else {\n        deferred.reject();\n      }\n    }).fail(() => {\n      deferred.reject();\n    });\n    deferred.always(() => {\n      this.option(\"disabled\", disabledState);\n    });\n    return deferred;\n  }\n  _tryRefreshLastPage() {\n    const deferred = Deferred();\n    if (this._isLastPage() || this.option(\"grouped\")) {\n      deferred.resolve();\n    } else {\n      this._refreshLastPage().done(() => {\n        deferred.resolve();\n      });\n    }\n    return deferred.promise();\n  }\n  _refreshLastPage() {\n    this._expectLastItemLoading();\n    return this._dataController.load();\n  }\n  _updateSelectionAfterDelete(index) {\n    const key = this._getKeyByIndex(index);\n    this._selection.deselect([key]);\n  }\n  _updateIndicesAfterIndex(index) {\n    const itemElements = this._itemElements();\n    for (let i = index + 1; i < itemElements.length; i += 1) {\n      $(itemElements[i]).data(this._itemIndexKey(), i - 1);\n    }\n  }\n  _simulateOptionChange(optionName) {\n    var _this$_optionChangedA;\n    const optionValue = this.option(optionName);\n    if (optionValue instanceof DataSource) {\n      return;\n    }\n    null === (_this$_optionChangedA = this._optionChangedAction) || void 0 === _this$_optionChangedA || _this$_optionChangedA.call(this, {\n      name: optionName,\n      fullName: optionName,\n      value: optionValue\n    });\n  }\n  isItemSelected(itemElement) {\n    return this._isItemSelected(this._editStrategy.getNormalizedIndex(itemElement));\n  }\n  selectItem(itemElement) {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    if (\"none\" === selectionMode) {\n      return Deferred().resolve();\n    }\n    const itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\n    if (!indexExists(itemIndex)) {\n      return Deferred().resolve();\n    }\n    const key = this._getKeyByIndex(itemIndex);\n    if (this._selection.isItemSelected(key)) {\n      return Deferred().resolve();\n    }\n    if (\"single\" === selectionMode) {\n      return this._selection.setSelection([key]);\n    }\n    const {\n      selectedItemKeys: selectedItemKeys\n    } = this.option();\n    return this._selection.setSelection([...(selectedItemKeys ?? []), key], [key]);\n  }\n  unselectItem(itemElement) {\n    const itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\n    if (!indexExists(itemIndex)) {\n      return;\n    }\n    const selectedItemKeys = this._selection.getSelectedItemKeys();\n    if (this.option(\"selectionRequired\") && selectedItemKeys.length <= 1) {\n      return;\n    }\n    const key = this._getKeyByIndex(itemIndex);\n    if (!this._selection.isItemSelected(key, {\n      checkPending: true\n    })) {\n      return;\n    }\n    this._selection.deselect([key]);\n  }\n  _deleteItemElementByIndex(index) {\n    this._updateSelectionAfterDelete(index);\n    this._updateIndicesAfterIndex(index);\n    this._editStrategy.deleteItemAtIndex(index);\n  }\n  _afterItemElementDeleted($item, deletedActionArgs) {\n    const changingOption = this._dataController.getDataSource() ? \"dataSource\" : \"items\";\n    this._simulateOptionChange(changingOption);\n    this._itemEventHandler($item, \"onItemDeleted\", deletedActionArgs, {\n      beforeExecute() {\n        $item.remove();\n      },\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this._renderEmptyMessage();\n  }\n  deleteItem(itemElement) {\n    const deferred = Deferred();\n    const $item = this._editStrategy.getItemElement(itemElement);\n    const index = this._editStrategy.getNormalizedIndex(itemElement);\n    const itemResponseWaitClass = this._itemResponseWaitClass();\n    if (indexExists(index)) {\n      this._waitDeletingPrepare($item).done(() => {\n        $item.addClass(itemResponseWaitClass);\n        const deletedActionArgs = this._extendActionArgs($item);\n        this._deleteItemFromDS($item).done(() => {\n          this._deleteItemElementByIndex(index);\n          this._afterItemElementDeleted($item, deletedActionArgs);\n          this._tryRefreshLastPage().done(() => {\n            deferred.resolveWith(this);\n          });\n        }).fail(() => {\n          $item.removeClass(itemResponseWaitClass);\n          deferred.rejectWith(this);\n        });\n      }).fail(() => {\n        deferred.rejectWith(this);\n      });\n    } else {\n      deferred.rejectWith(this);\n    }\n    return deferred.promise();\n  }\n  reorderItem(itemElement, toItemElement) {\n    const deferred = Deferred();\n    const strategy = this._editStrategy;\n    const $movingItem = strategy.getItemElement(itemElement);\n    const $destinationItem = strategy.getItemElement(toItemElement);\n    const movingIndex = strategy.getNormalizedIndex(itemElement);\n    const destinationIndex = strategy.getNormalizedIndex(toItemElement);\n    const changingOption = this._dataController.getDataSource() ? \"dataSource\" : \"items\";\n    const canMoveItems = indexExists(movingIndex) && indexExists(destinationIndex) && movingIndex !== destinationIndex;\n    if (canMoveItems) {\n      deferred.resolveWith(this);\n    } else {\n      deferred.rejectWith(this);\n    }\n    return deferred.promise().done(() => {\n      $destinationItem[strategy.itemPlacementFunc(movingIndex, destinationIndex)]($movingItem);\n      strategy.moveItemAtIndexToIndex(movingIndex, destinationIndex);\n      this._updateIndicesAfterIndex(movingIndex);\n      this.option(\"selectedItems\", this._getItemsByKeys(this._selection.getSelectedItemKeys(), this._selection.getSelectedItems()));\n      if (\"items\" === changingOption) {\n        this._simulateOptionChange(changingOption);\n      }\n      this._itemEventHandler($movingItem, \"onItemReordered\", {\n        fromIndex: strategy.getIndex(movingIndex),\n        toIndex: strategy.getIndex(destinationIndex)\n      }, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    });\n  }\n}\nexport default CollectionWidget;","map":{"version":3,"names":["_extends","eventsEngine","DataSource","normalizeLoadResult","$","noop","compileGetter","Deferred","fromPromise","when","extend","each","isDefined","errors","BaseCollectionWidget","PlainEditStrategy","Selection","ITEM_DELETING_DATA_KEY","SELECTED_ITEM_CLASS","NOT_EXISTING_INDEX","indexExists","index","CollectionWidget","_setOptionsByReference","_optionsByReference","selectedItem","_getDefaultOptions","selectionMode","selectionRequired","selectByClick","selectedItems","selectedItemKeys","maxFilterLengthInRequest","keyExpr","selectedIndex","focusOnSelectedItem","onSelectionChanging","onSelectionChanged","onItemReordered","onItemDeleting","onItemDeleted","ctor","element","options","_userOptions","_init","_initEditStrategy","_initKeyGetter","_initActions","_initSelectionModule","_keyGetter","option","_selectedItemClass","_getActionsList","_actions","actions","forEach","action","_createActionByOption","excludeValidators","_getKeysByItems","_editStrategy","getKeysByItems","_getItemsByKeys","getItemsByKeys","_getKeyByIndex","getKeyByIndex","_getIndexByKey","key","getIndexByKey","_getIndexByItemData","itemData","getIndexByItemData","_isKeySpecified","_dataController","_getCombinedFilter","filter","keyOf","item","store","_nullValueSelectionSupported","that","itemsGetter","_selection","allowNullValue","mode","equalByReference","args","_this$_actions$onSele","_this$_actions","isSelectionChanged","addedItemKeys","length","removedItemKeys","_rendered","selectionChangingArgs","removedItems","addedItems","cancel","call","_updateSelectedItems","bind","totalCount","items","_getItemsCount","load","_dataController$loadO","dataController","customQueryParams","loadOptions","userData","loadFromStore","done","loadResult","_disposed","data","applyMapFunction","resolve","plainItems","dataFields","select","reduce","itemsCount","_getSelectedItemIndices","keys","indices","getSelectedItemKeys","beginCache","_","push","endCache","_initMarkup","_rendering","isLoading","_syncSelectionOptions","_normalizeSelectedItems","_render","_fireContentReadyAction","byOption","_chooseSelectOption","getItemDataByIndex","_setOptionWithoutOptionChange","selectedItemIndex","setSelection","promise","optionName","isOptionDefined","name","optionValue","_compareKeys","oldKeys","newKeys","i","newSelection","currentSelection","getSelectedItems","normalizedSelection","_itemClickHandler","e","config","itemSelectPromise","_createAction","_itemSelectHandler","event","validatingTargetName","itemElement","currentTarget","always","shouldIgnoreSelectByClick","$itemElement","isItemSelected","unselectItem","selectItem","_selectedItemElement","_itemElements","eq","_postprocessRenderItem","normalizedItemIndex","getNormalizedIndex","_isItemSelected","_processSelectableItem","isSelected","toggleClass","_setAriaSelectionAttribute","String","addedSelection","removedSelection","normalizedIndex","_addSelection","_removeSelection","_updateSelection","$target","value","setAria","_getFocusedElementIndex","_getFlatIndex","getItemElement","triggerHandler","checkPending","_optionChanged","_invalidate","Array","isArray","_clearSelectedItems","_waitDeletingPrepare","deferred","deletingActionArgs","deletePromise","_itemEventHandler","deletePromiseExists","deletePromiseResolved","state","argumentsSpecified","arguments","shouldDelete","reject","fail","_deleteItemFromDS","$item","disabledState","dataStore","remove","Error","_getItemData","_tryRefreshLastPage","_isLastPage","_refreshLastPage","_expectLastItemLoading","_updateSelectionAfterDelete","deselect","_updateIndicesAfterIndex","itemElements","_itemIndexKey","_simulateOptionChange","_this$_optionChangedA","_optionChangedAction","fullName","itemIndex","_deleteItemElementByIndex","deleteItemAtIndex","_afterItemElementDeleted","deletedActionArgs","changingOption","getDataSource","beforeExecute","_renderEmptyMessage","deleteItem","itemResponseWaitClass","_itemResponseWaitClass","addClass","_extendActionArgs","resolveWith","removeClass","rejectWith","reorderItem","toItemElement","strategy","$movingItem","$destinationItem","movingIndex","destinationIndex","canMoveItems","itemPlacementFunc","moveItemAtIndexToIndex","fromIndex","getIndex","toIndex"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/collection/m_collection_widget.edit.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/collection/m_collection_widget.edit.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    DataSource\r\n} from \"../../../common/data/data_source/data_source\";\r\nimport {\r\n    normalizeLoadResult\r\n} from \"../../../common/data/data_source/utils\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../core/utils/data\";\r\nimport {\r\n    Deferred,\r\n    fromPromise,\r\n    when\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport errors from \"../../../ui/widget/ui.errors\";\r\nimport BaseCollectionWidget from \"../../ui/collection/collection_widget.base\";\r\nimport PlainEditStrategy from \"../../ui/collection/m_collection_widget.edit.strategy.plain\";\r\nimport Selection from \"../../ui/selection/m_selection\";\r\nconst ITEM_DELETING_DATA_KEY = \"dxItemDeleting\";\r\nconst SELECTED_ITEM_CLASS = \"dx-item-selected\";\r\nexport const NOT_EXISTING_INDEX = -1;\r\nconst indexExists = index => index !== NOT_EXISTING_INDEX;\r\nclass CollectionWidget extends BaseCollectionWidget {\r\n    _setOptionsByReference() {\r\n        super._setOptionsByReference();\r\n        extend(this._optionsByReference, {\r\n            selectedItem: true\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            selectionMode: \"none\",\r\n            selectionRequired: false,\r\n            selectByClick: true,\r\n            selectedItems: [],\r\n            selectedItemKeys: [],\r\n            maxFilterLengthInRequest: 1500,\r\n            keyExpr: null,\r\n            selectedIndex: NOT_EXISTING_INDEX,\r\n            focusOnSelectedItem: true,\r\n            selectedItem: null,\r\n            onSelectionChanging: null,\r\n            onSelectionChanged: null,\r\n            onItemReordered: null,\r\n            onItemDeleting: null,\r\n            onItemDeleted: null\r\n        })\r\n    }\r\n    ctor(element, options) {\r\n        this._userOptions = options || {};\r\n        super.ctor(element, options)\r\n    }\r\n    _init() {\r\n        this._initEditStrategy();\r\n        super._init();\r\n        this._initKeyGetter();\r\n        this._initActions();\r\n        this._initSelectionModule()\r\n    }\r\n    _initKeyGetter() {\r\n        this._keyGetter = compileGetter(this.option(\"keyExpr\"))\r\n    }\r\n    _selectedItemClass() {\r\n        return \"dx-item-selected\"\r\n    }\r\n    _getActionsList() {\r\n        return [\"onSelectionChanging\", \"onSelectionChanged\"]\r\n    }\r\n    _initActions() {\r\n        this._actions = {};\r\n        const actions = this._getActionsList();\r\n        actions.forEach((action => {\r\n            this._actions[action] = this._createActionByOption(action, {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            }) ?? noop\r\n        }))\r\n    }\r\n    _getKeysByItems(selectedItems) {\r\n        return this._editStrategy.getKeysByItems(selectedItems)\r\n    }\r\n    _getItemsByKeys(selectedItemKeys, selectedItems) {\r\n        return this._editStrategy.getItemsByKeys(selectedItemKeys, selectedItems)\r\n    }\r\n    _getKeyByIndex(index) {\r\n        return this._editStrategy.getKeyByIndex(index)\r\n    }\r\n    _getIndexByKey(key) {\r\n        return this._editStrategy.getIndexByKey(key)\r\n    }\r\n    _getIndexByItemData(itemData) {\r\n        return this._editStrategy.getIndexByItemData(itemData)\r\n    }\r\n    _isKeySpecified() {\r\n        return !!this._dataController.key()\r\n    }\r\n    _getCombinedFilter() {\r\n        return this._dataController.filter()\r\n    }\r\n    key() {\r\n        const {\r\n            keyExpr: keyExpr\r\n        } = this.option();\r\n        if (keyExpr) {\r\n            return keyExpr\r\n        }\r\n        return this._dataController.key()\r\n    }\r\n    keyOf(item) {\r\n        let key = item;\r\n        if (this.option(\"keyExpr\")) {\r\n            key = this._keyGetter(item)\r\n        } else if (this._dataController.store()) {\r\n            key = this._dataController.keyOf(item)\r\n        }\r\n        return key\r\n    }\r\n    _nullValueSelectionSupported() {\r\n        return false\r\n    }\r\n    _initSelectionModule() {\r\n        const that = this;\r\n        const {\r\n            itemsGetter: itemsGetter\r\n        } = this._editStrategy;\r\n        this._selection = new Selection({\r\n            allowNullValue: this._nullValueSelectionSupported(),\r\n            mode: this.option(\"selectionMode\"),\r\n            maxFilterLengthInRequest: this.option(\"maxFilterLengthInRequest\"),\r\n            equalByReference: !this._isKeySpecified(),\r\n            onSelectionChanging: args => {\r\n                var _this$_actions$onSele, _this$_actions;\r\n                const isSelectionChanged = args.addedItemKeys.length || args.removedItemKeys.length;\r\n                if (!this._rendered || !isSelectionChanged) {\r\n                    return\r\n                }\r\n                const selectionChangingArgs = {\r\n                    removedItems: args.removedItems,\r\n                    addedItems: args.addedItems,\r\n                    cancel: false\r\n                };\r\n                null === (_this$_actions$onSele = (_this$_actions = this._actions).onSelectionChanging) || void 0 === _this$_actions$onSele || _this$_actions$onSele.call(_this$_actions, selectionChangingArgs);\r\n                args.cancel = selectionChangingArgs.cancel\r\n            },\r\n            onSelectionChanged: args => {\r\n                if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n                    this.option(\"selectedItems\", this._getItemsByKeys(args.selectedItemKeys, args.selectedItems));\r\n                    this._updateSelectedItems(args)\r\n                }\r\n            },\r\n            filter: this._getCombinedFilter.bind(this),\r\n            totalCount: () => {\r\n                const {\r\n                    items: items\r\n                } = this.option();\r\n                const totalCount = this._dataController.totalCount();\r\n                return totalCount >= 0 ? totalCount : this._getItemsCount(items)\r\n            },\r\n            key: this.key.bind(this),\r\n            keyOf: this.keyOf.bind(this),\r\n            load(options) {\r\n                var _dataController$loadO;\r\n                const dataController = that._dataController;\r\n                options.customQueryParams = null === (_dataController$loadO = dataController.loadOptions()) || void 0 === _dataController$loadO ? void 0 : _dataController$loadO.customQueryParams;\r\n                options.userData = dataController.userData();\r\n                if (dataController.store()) {\r\n                    return dataController.loadFromStore(options).done((loadResult => {\r\n                        if (that._disposed) {\r\n                            return\r\n                        }\r\n                        const items = normalizeLoadResult(loadResult).data;\r\n                        dataController.applyMapFunction(items)\r\n                    }))\r\n                }\r\n                return Deferred().resolve(this.plainItems())\r\n            },\r\n            dataFields: () => this._dataController.select(),\r\n            plainItems: itemsGetter.bind(this._editStrategy)\r\n        })\r\n    }\r\n    _getItemsCount(items) {\r\n        return items.reduce(((itemsCount, item) => itemsCount + (item.items ? this._getItemsCount(item.items) : 1)), 0)\r\n    }\r\n    _initEditStrategy() {\r\n        this._editStrategy = new PlainEditStrategy(this)\r\n    }\r\n    _getSelectedItemIndices(keys) {\r\n        const indices = [];\r\n        keys = keys || this._selection.getSelectedItemKeys();\r\n        this._editStrategy.beginCache();\r\n        each(keys, ((_, key) => {\r\n            const selectedIndex = this._getIndexByKey(key);\r\n            if (indexExists(selectedIndex)) {\r\n                indices.push(selectedIndex)\r\n            }\r\n        }));\r\n        this._editStrategy.endCache();\r\n        return indices\r\n    }\r\n    _initMarkup() {\r\n        this._rendering = true;\r\n        if (!this._dataController.isLoading()) {\r\n            this._syncSelectionOptions().done((() => this._normalizeSelectedItems()))\r\n        }\r\n        super._initMarkup()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._rendering = false\r\n    }\r\n    _fireContentReadyAction() {\r\n        this._rendering = false;\r\n        this._rendered = true;\r\n        super._fireContentReadyAction()\r\n    }\r\n    _syncSelectionOptions(byOption) {\r\n        byOption = byOption ?? this._chooseSelectOption();\r\n        let selectedItem;\r\n        let selectedIndex;\r\n        let selectedItemKeys;\r\n        let selectedItems;\r\n        switch (byOption) {\r\n            case \"selectedIndex\":\r\n                selectedItem = this._editStrategy.getItemDataByIndex(this.option(\"selectedIndex\"));\r\n                if (isDefined(selectedItem)) {\r\n                    this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\r\n                    this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\r\n                    this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]))\r\n                } else {\r\n                    this._setOptionWithoutOptionChange(\"selectedItems\", []);\r\n                    this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\r\n                    this._setOptionWithoutOptionChange(\"selectedItem\", null)\r\n                }\r\n                break;\r\n            case \"selectedItems\":\r\n                selectedItems = this.option(\"selectedItems\") || [];\r\n                selectedIndex = selectedItems.length ? this._editStrategy.getIndexByItemData(selectedItems[0]) : NOT_EXISTING_INDEX;\r\n                if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\r\n                    return this._syncSelectionOptions(\"selectedIndex\")\r\n                }\r\n                this._setOptionWithoutOptionChange(\"selectedItem\", selectedItems[0]);\r\n                this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\r\n                this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems(selectedItems));\r\n                break;\r\n            case \"selectedItem\":\r\n                selectedItem = this.option(\"selectedItem\");\r\n                selectedIndex = this._editStrategy.getIndexByItemData(selectedItem);\r\n                if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\r\n                    return this._syncSelectionOptions(\"selectedIndex\")\r\n                }\r\n                if (isDefined(selectedItem)) {\r\n                    this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\r\n                    this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\r\n                    this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]))\r\n                } else {\r\n                    this._setOptionWithoutOptionChange(\"selectedItems\", []);\r\n                    this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\r\n                    this._setOptionWithoutOptionChange(\"selectedIndex\", NOT_EXISTING_INDEX)\r\n                }\r\n                break;\r\n            case \"selectedItemKeys\":\r\n                selectedItemKeys = this.option(\"selectedItemKeys\");\r\n                if (this.option(\"selectionRequired\")) {\r\n                    const selectedItemIndex = this._getIndexByKey(selectedItemKeys[0]);\r\n                    if (!indexExists(selectedItemIndex)) {\r\n                        return this._syncSelectionOptions(\"selectedIndex\")\r\n                    }\r\n                }\r\n                return this._selection.setSelection(selectedItemKeys)\r\n        }\r\n        return Deferred().resolve().promise()\r\n    }\r\n    _chooseSelectOption() {\r\n        let optionName = \"selectedIndex\";\r\n        const isOptionDefined = name => {\r\n            const optionValue = this.option(name);\r\n            const length = isDefined(optionValue) && optionValue.length;\r\n            return length || name in this._userOptions\r\n        };\r\n        if (isOptionDefined(\"selectedItems\")) {\r\n            optionName = \"selectedItems\"\r\n        } else if (isOptionDefined(\"selectedItem\")) {\r\n            optionName = \"selectedItem\"\r\n        } else if (isOptionDefined(\"selectedItemKeys\")) {\r\n            optionName = \"selectedItemKeys\"\r\n        }\r\n        return optionName\r\n    }\r\n    _compareKeys(oldKeys, newKeys) {\r\n        if (oldKeys.length !== newKeys.length) {\r\n            return false\r\n        }\r\n        for (let i = 0; i < newKeys.length; i++) {\r\n            if (oldKeys[i] !== newKeys[i]) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _normalizeSelectedItems() {\r\n        const {\r\n            selectionMode: selectionMode,\r\n            selectedItems: selectedItems,\r\n            items: items\r\n        } = this.option();\r\n        if (\"none\" === selectionMode) {\r\n            this._setOptionWithoutOptionChange(\"selectedItems\", []);\r\n            this._syncSelectionOptions(\"selectedItems\")\r\n        } else if (\"single\" === selectionMode) {\r\n            const newSelection = selectedItems ?? [];\r\n            if (newSelection.length > 1 || !newSelection.length && this.option(\"selectionRequired\") && items && items.length) {\r\n                const currentSelection = this._selection.getSelectedItems();\r\n                let normalizedSelection = void 0 === newSelection[0] ? currentSelection[0] : newSelection[0];\r\n                if (void 0 === normalizedSelection) {\r\n                    normalizedSelection = this._editStrategy.itemsGetter()[0]\r\n                }\r\n                if (this.option(\"grouped\") && normalizedSelection && normalizedSelection.items) {\r\n                    normalizedSelection.items = [normalizedSelection.items[0]]\r\n                }\r\n                this._selection.setSelection(this._getKeysByItems([normalizedSelection]));\r\n                this._setOptionWithoutOptionChange(\"selectedItems\", [normalizedSelection]);\r\n                return this._syncSelectionOptions(\"selectedItems\")\r\n            }\r\n            this._selection.setSelection(this._getKeysByItems(newSelection))\r\n        } else {\r\n            const newKeys = this._getKeysByItems(this.option(\"selectedItems\"));\r\n            const oldKeys = this._selection.getSelectedItemKeys();\r\n            if (!this._compareKeys(oldKeys, newKeys)) {\r\n                this._selection.setSelection(newKeys)\r\n            }\r\n        }\r\n        return Deferred().resolve().promise()\r\n    }\r\n    _itemClickHandler(e, args, config) {\r\n        let itemSelectPromise = Deferred().resolve();\r\n        this._createAction((e => {\r\n            itemSelectPromise = this._itemSelectHandler(e.event) ?? itemSelectPromise\r\n        }), {\r\n            validatingTargetName: \"itemElement\"\r\n        })({\r\n            itemElement: $(e.currentTarget),\r\n            event: e\r\n        });\r\n        itemSelectPromise.always((() => {\r\n            super._itemClickHandler(e, args, config)\r\n        }))\r\n    }\r\n    _itemSelectHandler(e, shouldIgnoreSelectByClick) {\r\n        if (!shouldIgnoreSelectByClick && !this.option(\"selectByClick\")) {\r\n            return\r\n        }\r\n        const $itemElement = e.currentTarget;\r\n        if (this.isItemSelected($itemElement)) {\r\n            this.unselectItem(e.currentTarget)\r\n        } else {\r\n            const itemSelectPromise = this.selectItem(e.currentTarget);\r\n            return null === itemSelectPromise || void 0 === itemSelectPromise ? void 0 : itemSelectPromise.promise()\r\n        }\r\n    }\r\n    _selectedItemElement(index) {\r\n        return this._itemElements().eq(index)\r\n    }\r\n    _postprocessRenderItem(args) {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        if (\"none\" !== selectionMode) {\r\n            const $itemElement = $(args.itemElement);\r\n            const normalizedItemIndex = this._editStrategy.getNormalizedIndex($itemElement);\r\n            const isItemSelected = this._isItemSelected(normalizedItemIndex);\r\n            this._processSelectableItem($itemElement, isItemSelected)\r\n        }\r\n    }\r\n    _processSelectableItem($itemElement, isSelected) {\r\n        $itemElement.toggleClass(this._selectedItemClass(), isSelected);\r\n        this._setAriaSelectionAttribute($itemElement, String(isSelected))\r\n    }\r\n    _updateSelectedItems(args) {\r\n        const {\r\n            addedItemKeys: addedItemKeys,\r\n            removedItemKeys: removedItemKeys\r\n        } = args;\r\n        if (this._rendered && (addedItemKeys.length || removedItemKeys.length)) {\r\n            if (!this._rendering) {\r\n                const addedSelection = [];\r\n                const removedSelection = [];\r\n                this._editStrategy.beginCache();\r\n                for (let i = 0; i < addedItemKeys.length; i += 1) {\r\n                    const normalizedIndex = this._getIndexByKey(addedItemKeys[i]);\r\n                    addedSelection.push(normalizedIndex);\r\n                    this._addSelection(normalizedIndex)\r\n                }\r\n                for (let i = 0; i < removedItemKeys.length; i += 1) {\r\n                    const normalizedIndex = this._getIndexByKey(removedItemKeys[i]);\r\n                    removedSelection.push(normalizedIndex);\r\n                    this._removeSelection(normalizedIndex)\r\n                }\r\n                this._editStrategy.endCache();\r\n                this._updateSelection(addedSelection, removedSelection)\r\n            }\r\n            this._actions.onSelectionChanged({\r\n                addedItems: args.addedItems,\r\n                removedItems: args.removedItems\r\n            })\r\n        }\r\n    }\r\n    _updateSelection(addedSelection, removedSelection) {}\r\n    _setAriaSelectionAttribute($target, value) {\r\n        this.setAria(\"selected\", value, $target)\r\n    }\r\n    _getFocusedElementIndex() {\r\n        const {\r\n            focusOnSelectedItem: focusOnSelectedItem\r\n        } = this.option();\r\n        return focusOnSelectedItem ? this._getFlatIndex() : super._getFocusedElementIndex()\r\n    }\r\n    _getFlatIndex() {\r\n        const {\r\n            selectedIndex: selectedIndex = NOT_EXISTING_INDEX\r\n        } = this.option();\r\n        return selectedIndex\r\n    }\r\n    _removeSelection(normalizedIndex) {\r\n        const $itemElement = this._editStrategy.getItemElement(normalizedIndex);\r\n        if (indexExists(normalizedIndex)) {\r\n            this._processSelectableItem($itemElement, false);\r\n            eventsEngine.triggerHandler($itemElement, \"stateChanged\", false)\r\n        }\r\n    }\r\n    _addSelection(normalizedIndex) {\r\n        const $itemElement = this._editStrategy.getItemElement(normalizedIndex);\r\n        if (indexExists(normalizedIndex)) {\r\n            this._processSelectableItem($itemElement, true);\r\n            eventsEngine.triggerHandler($itemElement, \"stateChanged\", true)\r\n        }\r\n    }\r\n    _isItemSelected(index) {\r\n        const key = this._getKeyByIndex(index);\r\n        return this._selection.isItemSelected(key, {\r\n            checkPending: true\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"selectionMode\":\r\n                this._invalidate();\r\n                break;\r\n            case \"dataSource\":\r\n                if (!args.value || Array.isArray(args.value) && !args.value.length) {\r\n                    this.option(\"selectedItemKeys\", [])\r\n                }\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"selectedIndex\":\r\n            case \"selectedItem\":\r\n            case \"selectedItems\":\r\n            case \"selectedItemKeys\":\r\n                this._syncSelectionOptions(args.name).done((() => this._normalizeSelectedItems()));\r\n                break;\r\n            case \"keyExpr\":\r\n                this._initKeyGetter();\r\n                break;\r\n            case \"selectionRequired\":\r\n                this._normalizeSelectedItems();\r\n                break;\r\n            case \"onSelectionChanging\":\r\n            case \"onSelectionChanged\":\r\n                this._initActions();\r\n                break;\r\n            case \"selectByClick\":\r\n            case \"onItemDeleting\":\r\n            case \"onItemDeleted\":\r\n            case \"onItemReordered\":\r\n            case \"maxFilterLengthInRequest\":\r\n            case \"focusOnSelectedItem\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _clearSelectedItems() {\r\n        this._setOptionWithoutOptionChange(\"selectedItems\", []);\r\n        this._syncSelectionOptions(\"selectedItems\")\r\n    }\r\n    _waitDeletingPrepare($itemElement) {\r\n        if ($itemElement.data(\"dxItemDeleting\")) {\r\n            return Deferred().resolve().promise()\r\n        }\r\n        $itemElement.data(\"dxItemDeleting\", true);\r\n        const deferred = Deferred();\r\n        const deletingActionArgs = {\r\n            cancel: false\r\n        };\r\n        const deletePromise = this._itemEventHandler($itemElement, \"onItemDeleting\", deletingActionArgs, {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        when(deletePromise).always((function(value) {\r\n            const deletePromiseExists = !deletePromise;\r\n            const deletePromiseResolved = !deletePromiseExists && \"resolved\" === deletePromise.state();\r\n            const argumentsSpecified = !!arguments.length;\r\n            const shouldDelete = deletePromiseExists || deletePromiseResolved && !argumentsSpecified || deletePromiseResolved && value;\r\n            when(fromPromise(deletingActionArgs.cancel)).always((() => {\r\n                $itemElement.data(\"dxItemDeleting\", false)\r\n            })).done((cancel => {\r\n                if (shouldDelete && !cancel) {\r\n                    deferred.resolve()\r\n                } else {\r\n                    deferred.reject()\r\n                }\r\n            })).fail(deferred.reject)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    _deleteItemFromDS($item) {\r\n        const dataController = this._dataController;\r\n        const deferred = Deferred();\r\n        const disabledState = this.option(\"disabled\");\r\n        const dataStore = dataController.store();\r\n        if (!dataStore) {\r\n            return Deferred().resolve().promise()\r\n        }\r\n        if (!dataStore.remove) {\r\n            throw errors.Error(\"E1011\")\r\n        }\r\n        this.option(\"disabled\", true);\r\n        dataStore.remove(dataController.keyOf(this._getItemData($item))).done((key => {\r\n            if (void 0 !== key) {\r\n                deferred.resolve()\r\n            } else {\r\n                deferred.reject()\r\n            }\r\n        })).fail((() => {\r\n            deferred.reject()\r\n        }));\r\n        deferred.always((() => {\r\n            this.option(\"disabled\", disabledState)\r\n        }));\r\n        return deferred\r\n    }\r\n    _tryRefreshLastPage() {\r\n        const deferred = Deferred();\r\n        if (this._isLastPage() || this.option(\"grouped\")) {\r\n            deferred.resolve()\r\n        } else {\r\n            this._refreshLastPage().done((() => {\r\n                deferred.resolve()\r\n            }))\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    _refreshLastPage() {\r\n        this._expectLastItemLoading();\r\n        return this._dataController.load()\r\n    }\r\n    _updateSelectionAfterDelete(index) {\r\n        const key = this._getKeyByIndex(index);\r\n        this._selection.deselect([key])\r\n    }\r\n    _updateIndicesAfterIndex(index) {\r\n        const itemElements = this._itemElements();\r\n        for (let i = index + 1; i < itemElements.length; i += 1) {\r\n            $(itemElements[i]).data(this._itemIndexKey(), i - 1)\r\n        }\r\n    }\r\n    _simulateOptionChange(optionName) {\r\n        var _this$_optionChangedA;\r\n        const optionValue = this.option(optionName);\r\n        if (optionValue instanceof DataSource) {\r\n            return\r\n        }\r\n        null === (_this$_optionChangedA = this._optionChangedAction) || void 0 === _this$_optionChangedA || _this$_optionChangedA.call(this, {\r\n            name: optionName,\r\n            fullName: optionName,\r\n            value: optionValue\r\n        })\r\n    }\r\n    isItemSelected(itemElement) {\r\n        return this._isItemSelected(this._editStrategy.getNormalizedIndex(itemElement))\r\n    }\r\n    selectItem(itemElement) {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        if (\"none\" === selectionMode) {\r\n            return Deferred().resolve()\r\n        }\r\n        const itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\r\n        if (!indexExists(itemIndex)) {\r\n            return Deferred().resolve()\r\n        }\r\n        const key = this._getKeyByIndex(itemIndex);\r\n        if (this._selection.isItemSelected(key)) {\r\n            return Deferred().resolve()\r\n        }\r\n        if (\"single\" === selectionMode) {\r\n            return this._selection.setSelection([key])\r\n        }\r\n        const {\r\n            selectedItemKeys: selectedItemKeys\r\n        } = this.option();\r\n        return this._selection.setSelection([...selectedItemKeys ?? [], key], [key])\r\n    }\r\n    unselectItem(itemElement) {\r\n        const itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\r\n        if (!indexExists(itemIndex)) {\r\n            return\r\n        }\r\n        const selectedItemKeys = this._selection.getSelectedItemKeys();\r\n        if (this.option(\"selectionRequired\") && selectedItemKeys.length <= 1) {\r\n            return\r\n        }\r\n        const key = this._getKeyByIndex(itemIndex);\r\n        if (!this._selection.isItemSelected(key, {\r\n                checkPending: true\r\n            })) {\r\n            return\r\n        }\r\n        this._selection.deselect([key])\r\n    }\r\n    _deleteItemElementByIndex(index) {\r\n        this._updateSelectionAfterDelete(index);\r\n        this._updateIndicesAfterIndex(index);\r\n        this._editStrategy.deleteItemAtIndex(index)\r\n    }\r\n    _afterItemElementDeleted($item, deletedActionArgs) {\r\n        const changingOption = this._dataController.getDataSource() ? \"dataSource\" : \"items\";\r\n        this._simulateOptionChange(changingOption);\r\n        this._itemEventHandler($item, \"onItemDeleted\", deletedActionArgs, {\r\n            beforeExecute() {\r\n                $item.remove()\r\n            },\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this._renderEmptyMessage()\r\n    }\r\n    deleteItem(itemElement) {\r\n        const deferred = Deferred();\r\n        const $item = this._editStrategy.getItemElement(itemElement);\r\n        const index = this._editStrategy.getNormalizedIndex(itemElement);\r\n        const itemResponseWaitClass = this._itemResponseWaitClass();\r\n        if (indexExists(index)) {\r\n            this._waitDeletingPrepare($item).done((() => {\r\n                $item.addClass(itemResponseWaitClass);\r\n                const deletedActionArgs = this._extendActionArgs($item);\r\n                this._deleteItemFromDS($item).done((() => {\r\n                    this._deleteItemElementByIndex(index);\r\n                    this._afterItemElementDeleted($item, deletedActionArgs);\r\n                    this._tryRefreshLastPage().done((() => {\r\n                        deferred.resolveWith(this)\r\n                    }))\r\n                })).fail((() => {\r\n                    $item.removeClass(itemResponseWaitClass);\r\n                    deferred.rejectWith(this)\r\n                }))\r\n            })).fail((() => {\r\n                deferred.rejectWith(this)\r\n            }))\r\n        } else {\r\n            deferred.rejectWith(this)\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    reorderItem(itemElement, toItemElement) {\r\n        const deferred = Deferred();\r\n        const strategy = this._editStrategy;\r\n        const $movingItem = strategy.getItemElement(itemElement);\r\n        const $destinationItem = strategy.getItemElement(toItemElement);\r\n        const movingIndex = strategy.getNormalizedIndex(itemElement);\r\n        const destinationIndex = strategy.getNormalizedIndex(toItemElement);\r\n        const changingOption = this._dataController.getDataSource() ? \"dataSource\" : \"items\";\r\n        const canMoveItems = indexExists(movingIndex) && indexExists(destinationIndex) && movingIndex !== destinationIndex;\r\n        if (canMoveItems) {\r\n            deferred.resolveWith(this)\r\n        } else {\r\n            deferred.rejectWith(this)\r\n        }\r\n        return deferred.promise().done((() => {\r\n            $destinationItem[strategy.itemPlacementFunc(movingIndex, destinationIndex)]($movingItem);\r\n            strategy.moveItemAtIndexToIndex(movingIndex, destinationIndex);\r\n            this._updateIndicesAfterIndex(movingIndex);\r\n            this.option(\"selectedItems\", this._getItemsByKeys(this._selection.getSelectedItemKeys(), this._selection.getSelectedItems()));\r\n            if (\"items\" === changingOption) {\r\n                this._simulateOptionChange(changingOption)\r\n            }\r\n            this._itemEventHandler($movingItem, \"onItemReordered\", {\r\n                fromIndex: strategy.getIndex(movingIndex),\r\n                toIndex: strategy.getIndex(destinationIndex)\r\n            }, {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            })\r\n        }))\r\n    }\r\n}\r\nexport default CollectionWidget;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}