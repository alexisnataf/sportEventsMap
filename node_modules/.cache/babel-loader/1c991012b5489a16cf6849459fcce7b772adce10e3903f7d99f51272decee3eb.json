{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/text_box/m_text_editor.mask.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { name as wheelEventName } from \"../../../common/core/events/core/wheel\";\nimport { addNamespace, createEvent, isCommandKeyPressed, normalizeKeyName } from \"../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isEmpty } from \"../../../core/utils/string\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { focused } from \"../../../ui/widget/selectors\";\nimport TextEditorBase from \"./m_text_editor.base\";\nimport { EmptyMaskRule, MaskRule, StubMaskRule } from \"./m_text_editor.mask.rule\";\nimport MaskStrategy from \"./m_text_editor.mask.strategy\";\nimport caretUtils from \"./m_utils.caret\";\nconst caret = caretUtils;\nconst EMPTY_CHAR = \" \";\nconst ESCAPED_CHAR = \"\\\\\";\nconst TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\nconst FORWARD_DIRECTION = \"forward\";\nconst BACKWARD_DIRECTION = \"backward\";\nconst DROP_EVENT_NAME = \"drop\";\nconst buildInMaskRules = {\n  0: /[0-9]/,\n  9: /[0-9\\s]/,\n  \"#\": /[-+0-9\\s]/,\n  L: char => isLiteralChar(char),\n  l: char => isLiteralChar(char) || isSpaceChar(char),\n  C: /\\S/,\n  c: /./,\n  A: char => isLiteralChar(char) || isNumericChar(char),\n  a: char => isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char)\n};\nfunction isNumericChar(char) {\n  return /[0-9]/.test(char);\n}\nfunction isLiteralChar(char) {\n  const code = char.charCodeAt();\n  return code > 64 && code < 91 || code > 96 && code < 123 || code > 127;\n}\nfunction isSpaceChar(char) {\n  return \" \" === char;\n}\nclass TextEditorMask extends TextEditorBase {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      mask: \"\",\n      maskChar: \"_\",\n      maskRules: {},\n      maskInvalidMessage: messageLocalization.format(\"validation-mask\"),\n      useMaskedValue: false,\n      showMaskMode: \"always\"\n    });\n  }\n  _supportedKeys() {\n    const that = this;\n    const keyHandlerMap = {\n      del: that._maskStrategy.getHandler(\"del\"),\n      enter: that._changeHandler\n    };\n    const result = super._supportedKeys();\n    each(keyHandlerMap, (key, callback) => {\n      const parentHandler = result[key];\n      result[key] = function (e) {\n        that.option(\"mask\") && callback.call(that, e);\n        parentHandler && parentHandler(e);\n      };\n    });\n    return result;\n  }\n  _getSubmitElement() {\n    return !this.option(\"mask\") ? super._getSubmitElement() : this._$hiddenElement;\n  }\n  _init() {\n    super._init();\n    this._initMaskStrategy();\n  }\n  _initMaskStrategy() {\n    this._maskStrategy = new MaskStrategy(this);\n  }\n  _initMarkup() {\n    this._renderHiddenElement();\n    super._initMarkup();\n  }\n  _attachMouseWheelEventHandlers() {\n    const hasMouseWheelHandler = this._onMouseWheel !== noop;\n    if (!hasMouseWheelHandler) {\n      return;\n    }\n    const input = this._input();\n    const eventName = addNamespace(wheelEventName, this.NAME);\n    const mouseWheelAction = this._createAction(e => {\n      const {\n        event: event\n      } = e;\n      if (focused(input) && !isCommandKeyPressed(event)) {\n        this._onMouseWheel(event);\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n    eventsEngine.off(input, eventName);\n    eventsEngine.on(input, eventName, e => {\n      mouseWheelAction({\n        event: e\n      });\n    });\n  }\n  _onMouseWheel(e) {}\n  _useMaskBehavior() {\n    return Boolean(this.option(\"mask\"));\n  }\n  _attachDropEventHandler() {\n    const useMaskBehavior = this._useMaskBehavior();\n    if (!useMaskBehavior) {\n      return;\n    }\n    const eventName = addNamespace(\"drop\", this.NAME);\n    const input = this._input();\n    eventsEngine.off(input, eventName);\n    eventsEngine.on(input, eventName, e => e.preventDefault());\n  }\n  _render() {\n    this._attachMouseWheelEventHandlers();\n    this._renderMask();\n    super._render();\n    this._attachDropEventHandler();\n  }\n  _renderHiddenElement() {\n    if (this.option(\"mask\")) {\n      this._$hiddenElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper());\n    }\n  }\n  _removeHiddenElement() {\n    this._$hiddenElement && this._$hiddenElement.remove();\n  }\n  _renderMask() {\n    this.$element().removeClass(\"dx-texteditor-masked\");\n    this._maskRulesChain = null;\n    this._maskStrategy.detachEvents();\n    if (!this.option(\"mask\")) {\n      return;\n    }\n    this.$element().addClass(\"dx-texteditor-masked\");\n    this._maskStrategy.attachEvents();\n    this._parseMask();\n    this._renderMaskedValue();\n  }\n  _changeHandler(e) {\n    const $input = this._input();\n    const inputValue = $input.val();\n    if (inputValue === this._changedValue) {\n      return;\n    }\n    this._changedValue = inputValue;\n    const changeEvent = createEvent(e, {\n      type: \"change\"\n    });\n    eventsEngine.trigger($input, changeEvent);\n  }\n  _parseMask() {\n    this._maskRules = extend({}, buildInMaskRules, this.option(\"maskRules\"));\n    this._maskRulesChain = this._parseMaskRule(0);\n  }\n  _parseMaskRule(index) {\n    const {\n      mask: mask\n    } = this.option();\n    if (index >= mask.length) {\n      return new EmptyMaskRule();\n    }\n    const currentMaskChar = mask[index];\n    const isEscapedChar = \"\\\\\" === currentMaskChar;\n    const result = isEscapedChar ? new StubMaskRule({\n      maskChar: mask[index + 1]\n    }) : this._getMaskRule(currentMaskChar);\n    result.next(this._parseMaskRule(index + 1 + isEscapedChar));\n    return result;\n  }\n  _getMaskRule(pattern) {\n    let ruleConfig;\n    each(this._maskRules, (rulePattern, allowedChars) => {\n      if (rulePattern === pattern) {\n        ruleConfig = {\n          pattern: rulePattern,\n          allowedChars: allowedChars\n        };\n        return false;\n      }\n    });\n    return isDefined(ruleConfig) ? new MaskRule(extend({\n      maskChar: this.option(\"maskChar\") || \" \"\n    }, ruleConfig)) : new StubMaskRule({\n      maskChar: pattern\n    });\n  }\n  _renderMaskedValue() {\n    if (!this._maskRulesChain) {\n      return;\n    }\n    const value = this.option(\"value\") || \"\";\n    this._maskRulesChain.clear(this._normalizeChainArguments());\n    const chainArgs = {\n      length: value.length\n    };\n    chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\n    this._handleChain(chainArgs);\n    this._displayMask();\n  }\n  _replaceSelectedText(text, selection, char) {\n    if (void 0 === char) {\n      return text;\n    }\n    const textBefore = text.slice(0, selection.start);\n    const textAfter = text.slice(selection.end);\n    const edited = textBefore + char + textAfter;\n    return edited;\n  }\n  _isMaskedValueMode() {\n    return this.option(\"useMaskedValue\");\n  }\n  _displayMask(caret) {\n    caret = caret || this._caret();\n    this._renderValue();\n    this._caret(caret);\n  }\n  _isValueEmpty() {\n    return isEmpty(this._value);\n  }\n  _shouldShowMask() {\n    const {\n      showMaskMode: showMaskMode\n    } = this.option();\n    if (\"onFocus\" === showMaskMode) {\n      return focused(this._input()) || !this._isValueEmpty();\n    }\n    return true;\n  }\n  _showMaskPlaceholder() {\n    if (this._shouldShowMask()) {\n      const text = this._maskRulesChain.text();\n      this.option(\"text\", text);\n      const {\n        showMaskMode: showMaskMode\n      } = this.option();\n      if (\"onFocus\" === showMaskMode) {\n        this._renderDisplayText(text);\n      }\n    }\n  }\n  _renderValue() {\n    if (this._maskRulesChain) {\n      this._showMaskPlaceholder();\n      if (this._$hiddenElement) {\n        const value = this._maskRulesChain.value();\n        const submitElementValue = !isEmpty(value) ? this._getPreparedValue() : \"\";\n        this._$hiddenElement.val(submitElementValue);\n      }\n    }\n    return super._renderValue();\n  }\n  _getPreparedValue() {\n    return this._convertToValue().replace(/\\s+$/, \"\");\n  }\n  _valueChangeEventHandler(e, value) {\n    if (!this._maskRulesChain) {\n      super._valueChangeEventHandler.apply(this, arguments);\n      return;\n    }\n    this._saveValueChangeEvent(e);\n    this.option(\"value\", this._getPreparedValue());\n  }\n  _isControlKeyFired(e) {\n    return this._isControlKey(normalizeKeyName(e)) || isCommandKeyPressed(e);\n  }\n  _handleChain(args) {\n    const handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\n    this._updateMaskInfo();\n    return handledCount;\n  }\n  _normalizeChainArguments(args) {\n    args = args || {};\n    args.index = 0;\n    args.fullText = this._maskRulesChain.text();\n    return args;\n  }\n  _convertToValue(text) {\n    if (this._isMaskedValueMode()) {\n      text = this._replaceMaskCharWithEmpty(text || this._textValue || \"\");\n    } else {\n      text = text || this._value || \"\";\n    }\n    return text;\n  }\n  _replaceMaskCharWithEmpty(text) {\n    const {\n      maskChar: maskChar\n    } = this.option();\n    return text.replace(new RegExp(maskChar, \"g\"), \" \");\n  }\n  _maskKeyHandler(e, keyHandler) {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n    this.setForwardDirection();\n    e.preventDefault();\n    this._handleSelection();\n    const previousText = this._input().val();\n    const raiseInputEvent = () => {\n      if (previousText !== this._input().val()) {\n        eventsEngine.trigger(this._input(), \"input\");\n      }\n    };\n    const handled = keyHandler();\n    if (handled) {\n      handled.then(raiseInputEvent);\n    } else {\n      this.setForwardDirection();\n      this._adjustCaret();\n      this._displayMask();\n      this._maskRulesChain.reset();\n      raiseInputEvent();\n    }\n  }\n  _handleKey(key, direction) {\n    this._direction(direction || \"forward\");\n    this._adjustCaret(key);\n    this._handleKeyChain(key);\n    this._moveCaret();\n  }\n  _handleSelection() {\n    if (!this._hasSelection()) {\n      return;\n    }\n    const caret = this._caret();\n    const emptyChars = new Array(caret.end - caret.start + 1).join(\" \");\n    this._handleKeyChain(emptyChars);\n  }\n  _handleKeyChain(chars) {\n    const caret = this._caret();\n    const start = this.isForwardDirection() ? caret.start : caret.start - 1;\n    const end = this.isForwardDirection() ? caret.end : caret.end - 1;\n    const length = start === end ? 1 : end - start;\n    this._handleChain({\n      text: chars,\n      start: start,\n      length: length\n    });\n  }\n  _tryMoveCaretBackward() {\n    this.setBackwardDirection();\n    const currentCaret = this._caret().start;\n    this._adjustCaret();\n    return !currentCaret || currentCaret !== this._caret().start;\n  }\n  _adjustCaret(char) {\n    const caretStart = this._caret().start;\n    const isForwardDirection = this.isForwardDirection();\n    const caret = this._maskRulesChain.adjustedCaret(caretStart, isForwardDirection, char);\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  }\n  _moveCaret() {\n    const currentCaret = this._caret().start;\n    const maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);\n    const caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  }\n  _caret(position, force) {\n    const $input = this._input();\n    if (!$input.length) {\n      return;\n    }\n    if (!arguments.length) {\n      return caret($input);\n    }\n    caret($input, position, force);\n  }\n  _hasSelection() {\n    const caret = this._caret();\n    return caret.start !== caret.end;\n  }\n  _direction(direction) {\n    if (!arguments.length) {\n      return this._typingDirection;\n    }\n    this._typingDirection = direction;\n  }\n  setForwardDirection() {\n    this._direction(\"forward\");\n  }\n  setBackwardDirection() {\n    this._direction(\"backward\");\n  }\n  isForwardDirection() {\n    return \"forward\" === this._direction();\n  }\n  _updateMaskInfo() {\n    this._textValue = this._maskRulesChain.text();\n    this._value = this._maskRulesChain.value();\n  }\n  _clean() {\n    this._maskStrategy && this._maskStrategy.clean();\n    super._clean();\n  }\n  _validateMask() {\n    if (!this._maskRulesChain) {\n      return;\n    }\n    const isValid = isEmpty(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"maskInvalidMessage\")\n      }\n    });\n  }\n  _updateHiddenElement() {\n    this._removeHiddenElement();\n    if (this.option(\"mask\")) {\n      this._input().removeAttr(\"name\");\n      this._renderHiddenElement();\n    }\n    const {\n      name: name\n    } = this.option();\n    this._setSubmitElementName(name);\n  }\n  _updateMaskOption() {\n    this._updateHiddenElement();\n    this._renderMask();\n    this._validateMask();\n    this._refreshValueChangeEvent();\n  }\n  _processEmptyMask(mask) {\n    if (mask) {\n      return;\n    }\n    const value = this.option(\"value\");\n    this.option({\n      text: value,\n      isValid: true,\n      validationError: null\n    });\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n    this._renderValue();\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"mask\":\n        this._updateMaskOption();\n        this._processEmptyMask(args.value);\n        break;\n      case \"maskChar\":\n      case \"maskRules\":\n      case \"useMaskedValue\":\n        this._updateMaskOption();\n        break;\n      case \"value\":\n        this._renderMaskedValue();\n        this._validateMask();\n        super._optionChanged(args);\n        this._changedValue = this._input().val();\n        break;\n      case \"maskInvalidMessage\":\n        break;\n      case \"showMaskMode\":\n        this.option(\"text\", \"\");\n        this._renderValue();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  clear() {\n    const {\n      value: defaultValue\n    } = this._getDefaultOptions();\n    if (this.option(\"value\") === defaultValue) {\n      this._renderMaskedValue();\n    }\n    super.clear();\n  }\n}\nexport default TextEditorMask;","map":{"version":3,"names":["_extends","eventsEngine","name","wheelEventName","addNamespace","createEvent","isCommandKeyPressed","normalizeKeyName","messageLocalization","$","noop","extend","each","isEmpty","isDefined","focused","TextEditorBase","EmptyMaskRule","MaskRule","StubMaskRule","MaskStrategy","caretUtils","caret","EMPTY_CHAR","ESCAPED_CHAR","TEXTEDITOR_MASKED_CLASS","FORWARD_DIRECTION","BACKWARD_DIRECTION","DROP_EVENT_NAME","buildInMaskRules","L","char","isLiteralChar","l","isSpaceChar","C","c","A","isNumericChar","a","test","code","charCodeAt","TextEditorMask","_getDefaultOptions","mask","maskChar","maskRules","maskInvalidMessage","format","useMaskedValue","showMaskMode","_supportedKeys","that","keyHandlerMap","del","_maskStrategy","getHandler","enter","_changeHandler","result","key","callback","parentHandler","e","option","call","_getSubmitElement","_$hiddenElement","_init","_initMaskStrategy","_initMarkup","_renderHiddenElement","_attachMouseWheelEventHandlers","hasMouseWheelHandler","_onMouseWheel","input","_input","eventName","NAME","mouseWheelAction","_createAction","event","preventDefault","stopPropagation","off","on","_useMaskBehavior","Boolean","_attachDropEventHandler","useMaskBehavior","_render","_renderMask","attr","appendTo","_inputWrapper","_removeHiddenElement","remove","$element","removeClass","_maskRulesChain","detachEvents","addClass","attachEvents","_parseMask","_renderMaskedValue","$input","inputValue","val","_changedValue","changeEvent","type","trigger","_maskRules","_parseMaskRule","index","length","currentMaskChar","isEscapedChar","_getMaskRule","next","pattern","ruleConfig","rulePattern","allowedChars","value","clear","_normalizeChainArguments","chainArgs","_isMaskedValueMode","_handleChain","_displayMask","_replaceSelectedText","text","selection","textBefore","slice","start","textAfter","end","edited","_caret","_renderValue","_isValueEmpty","_value","_shouldShowMask","_showMaskPlaceholder","_renderDisplayText","submitElementValue","_getPreparedValue","_convertToValue","replace","_valueChangeEventHandler","apply","arguments","_saveValueChangeEvent","_isControlKeyFired","_isControlKey","args","handledCount","handle","_updateMaskInfo","fullText","_replaceMaskCharWithEmpty","_textValue","RegExp","_maskKeyHandler","keyHandler","setForwardDirection","_handleSelection","previousText","raiseInputEvent","handled","then","_adjustCaret","reset","_handleKey","direction","_direction","_handleKeyChain","_moveCaret","_hasSelection","emptyChars","Array","join","chars","isForwardDirection","_tryMoveCaretBackward","setBackwardDirection","currentCaret","caretStart","adjustedCaret","maskRuleIndex","isAccepted","position","force","_typingDirection","_clean","clean","_validateMask","isValid","validationError","editorSpecific","message","_updateHiddenElement","removeAttr","_setSubmitElementName","_updateMaskOption","_refreshValueChangeEvent","_processEmptyMask","validationRequest","fire","editor","_optionChanged","defaultValue"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/text_box/m_text_editor.mask.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/text_box/m_text_editor.mask.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    name as wheelEventName\r\n} from \"../../../common/core/events/core/wheel\";\r\nimport {\r\n    addNamespace,\r\n    createEvent,\r\n    isCommandKeyPressed,\r\n    normalizeKeyName\r\n} from \"../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isEmpty\r\n} from \"../../../core/utils/string\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    focused\r\n} from \"../../../ui/widget/selectors\";\r\nimport TextEditorBase from \"./m_text_editor.base\";\r\nimport {\r\n    EmptyMaskRule,\r\n    MaskRule,\r\n    StubMaskRule\r\n} from \"./m_text_editor.mask.rule\";\r\nimport MaskStrategy from \"./m_text_editor.mask.strategy\";\r\nimport caretUtils from \"./m_utils.caret\";\r\nconst caret = caretUtils;\r\nconst EMPTY_CHAR = \" \";\r\nconst ESCAPED_CHAR = \"\\\\\";\r\nconst TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\r\nconst FORWARD_DIRECTION = \"forward\";\r\nconst BACKWARD_DIRECTION = \"backward\";\r\nconst DROP_EVENT_NAME = \"drop\";\r\nconst buildInMaskRules = {\r\n    0: /[0-9]/,\r\n    9: /[0-9\\s]/,\r\n    \"#\": /[-+0-9\\s]/,\r\n    L: char => isLiteralChar(char),\r\n    l: char => isLiteralChar(char) || isSpaceChar(char),\r\n    C: /\\S/,\r\n    c: /./,\r\n    A: char => isLiteralChar(char) || isNumericChar(char),\r\n    a: char => isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char)\r\n};\r\n\r\nfunction isNumericChar(char) {\r\n    return /[0-9]/.test(char)\r\n}\r\n\r\nfunction isLiteralChar(char) {\r\n    const code = char.charCodeAt();\r\n    return code > 64 && code < 91 || code > 96 && code < 123 || code > 127\r\n}\r\n\r\nfunction isSpaceChar(char) {\r\n    return \" \" === char\r\n}\r\nclass TextEditorMask extends TextEditorBase {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            mask: \"\",\r\n            maskChar: \"_\",\r\n            maskRules: {},\r\n            maskInvalidMessage: messageLocalization.format(\"validation-mask\"),\r\n            useMaskedValue: false,\r\n            showMaskMode: \"always\"\r\n        })\r\n    }\r\n    _supportedKeys() {\r\n        const that = this;\r\n        const keyHandlerMap = {\r\n            del: that._maskStrategy.getHandler(\"del\"),\r\n            enter: that._changeHandler\r\n        };\r\n        const result = super._supportedKeys();\r\n        each(keyHandlerMap, ((key, callback) => {\r\n            const parentHandler = result[key];\r\n            result[key] = function(e) {\r\n                that.option(\"mask\") && callback.call(that, e);\r\n                parentHandler && parentHandler(e)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    _getSubmitElement() {\r\n        return !this.option(\"mask\") ? super._getSubmitElement() : this._$hiddenElement\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._initMaskStrategy()\r\n    }\r\n    _initMaskStrategy() {\r\n        this._maskStrategy = new MaskStrategy(this)\r\n    }\r\n    _initMarkup() {\r\n        this._renderHiddenElement();\r\n        super._initMarkup()\r\n    }\r\n    _attachMouseWheelEventHandlers() {\r\n        const hasMouseWheelHandler = this._onMouseWheel !== noop;\r\n        if (!hasMouseWheelHandler) {\r\n            return\r\n        }\r\n        const input = this._input();\r\n        const eventName = addNamespace(wheelEventName, this.NAME);\r\n        const mouseWheelAction = this._createAction((e => {\r\n            const {\r\n                event: event\r\n            } = e;\r\n            if (focused(input) && !isCommandKeyPressed(event)) {\r\n                this._onMouseWheel(event);\r\n                event.preventDefault();\r\n                event.stopPropagation()\r\n            }\r\n        }));\r\n        eventsEngine.off(input, eventName);\r\n        eventsEngine.on(input, eventName, (e => {\r\n            mouseWheelAction({\r\n                event: e\r\n            })\r\n        }))\r\n    }\r\n    _onMouseWheel(e) {}\r\n    _useMaskBehavior() {\r\n        return Boolean(this.option(\"mask\"))\r\n    }\r\n    _attachDropEventHandler() {\r\n        const useMaskBehavior = this._useMaskBehavior();\r\n        if (!useMaskBehavior) {\r\n            return\r\n        }\r\n        const eventName = addNamespace(\"drop\", this.NAME);\r\n        const input = this._input();\r\n        eventsEngine.off(input, eventName);\r\n        eventsEngine.on(input, eventName, (e => e.preventDefault()))\r\n    }\r\n    _render() {\r\n        this._attachMouseWheelEventHandlers();\r\n        this._renderMask();\r\n        super._render();\r\n        this._attachDropEventHandler()\r\n    }\r\n    _renderHiddenElement() {\r\n        if (this.option(\"mask\")) {\r\n            this._$hiddenElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper())\r\n        }\r\n    }\r\n    _removeHiddenElement() {\r\n        this._$hiddenElement && this._$hiddenElement.remove()\r\n    }\r\n    _renderMask() {\r\n        this.$element().removeClass(\"dx-texteditor-masked\");\r\n        this._maskRulesChain = null;\r\n        this._maskStrategy.detachEvents();\r\n        if (!this.option(\"mask\")) {\r\n            return\r\n        }\r\n        this.$element().addClass(\"dx-texteditor-masked\");\r\n        this._maskStrategy.attachEvents();\r\n        this._parseMask();\r\n        this._renderMaskedValue()\r\n    }\r\n    _changeHandler(e) {\r\n        const $input = this._input();\r\n        const inputValue = $input.val();\r\n        if (inputValue === this._changedValue) {\r\n            return\r\n        }\r\n        this._changedValue = inputValue;\r\n        const changeEvent = createEvent(e, {\r\n            type: \"change\"\r\n        });\r\n        eventsEngine.trigger($input, changeEvent)\r\n    }\r\n    _parseMask() {\r\n        this._maskRules = extend({}, buildInMaskRules, this.option(\"maskRules\"));\r\n        this._maskRulesChain = this._parseMaskRule(0)\r\n    }\r\n    _parseMaskRule(index) {\r\n        const {\r\n            mask: mask\r\n        } = this.option();\r\n        if (index >= mask.length) {\r\n            return new EmptyMaskRule\r\n        }\r\n        const currentMaskChar = mask[index];\r\n        const isEscapedChar = \"\\\\\" === currentMaskChar;\r\n        const result = isEscapedChar ? new StubMaskRule({\r\n            maskChar: mask[index + 1]\r\n        }) : this._getMaskRule(currentMaskChar);\r\n        result.next(this._parseMaskRule(index + 1 + isEscapedChar));\r\n        return result\r\n    }\r\n    _getMaskRule(pattern) {\r\n        let ruleConfig;\r\n        each(this._maskRules, ((rulePattern, allowedChars) => {\r\n            if (rulePattern === pattern) {\r\n                ruleConfig = {\r\n                    pattern: rulePattern,\r\n                    allowedChars: allowedChars\r\n                };\r\n                return false\r\n            }\r\n        }));\r\n        return isDefined(ruleConfig) ? new MaskRule(extend({\r\n            maskChar: this.option(\"maskChar\") || \" \"\r\n        }, ruleConfig)) : new StubMaskRule({\r\n            maskChar: pattern\r\n        })\r\n    }\r\n    _renderMaskedValue() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        const value = this.option(\"value\") || \"\";\r\n        this._maskRulesChain.clear(this._normalizeChainArguments());\r\n        const chainArgs = {\r\n            length: value.length\r\n        };\r\n        chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\r\n        this._handleChain(chainArgs);\r\n        this._displayMask()\r\n    }\r\n    _replaceSelectedText(text, selection, char) {\r\n        if (void 0 === char) {\r\n            return text\r\n        }\r\n        const textBefore = text.slice(0, selection.start);\r\n        const textAfter = text.slice(selection.end);\r\n        const edited = textBefore + char + textAfter;\r\n        return edited\r\n    }\r\n    _isMaskedValueMode() {\r\n        return this.option(\"useMaskedValue\")\r\n    }\r\n    _displayMask(caret) {\r\n        caret = caret || this._caret();\r\n        this._renderValue();\r\n        this._caret(caret)\r\n    }\r\n    _isValueEmpty() {\r\n        return isEmpty(this._value)\r\n    }\r\n    _shouldShowMask() {\r\n        const {\r\n            showMaskMode: showMaskMode\r\n        } = this.option();\r\n        if (\"onFocus\" === showMaskMode) {\r\n            return focused(this._input()) || !this._isValueEmpty()\r\n        }\r\n        return true\r\n    }\r\n    _showMaskPlaceholder() {\r\n        if (this._shouldShowMask()) {\r\n            const text = this._maskRulesChain.text();\r\n            this.option(\"text\", text);\r\n            const {\r\n                showMaskMode: showMaskMode\r\n            } = this.option();\r\n            if (\"onFocus\" === showMaskMode) {\r\n                this._renderDisplayText(text)\r\n            }\r\n        }\r\n    }\r\n    _renderValue() {\r\n        if (this._maskRulesChain) {\r\n            this._showMaskPlaceholder();\r\n            if (this._$hiddenElement) {\r\n                const value = this._maskRulesChain.value();\r\n                const submitElementValue = !isEmpty(value) ? this._getPreparedValue() : \"\";\r\n                this._$hiddenElement.val(submitElementValue)\r\n            }\r\n        }\r\n        return super._renderValue()\r\n    }\r\n    _getPreparedValue() {\r\n        return this._convertToValue().replace(/\\s+$/, \"\")\r\n    }\r\n    _valueChangeEventHandler(e, value) {\r\n        if (!this._maskRulesChain) {\r\n            super._valueChangeEventHandler.apply(this, arguments);\r\n            return\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this.option(\"value\", this._getPreparedValue())\r\n    }\r\n    _isControlKeyFired(e) {\r\n        return this._isControlKey(normalizeKeyName(e)) || isCommandKeyPressed(e)\r\n    }\r\n    _handleChain(args) {\r\n        const handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\r\n        this._updateMaskInfo();\r\n        return handledCount\r\n    }\r\n    _normalizeChainArguments(args) {\r\n        args = args || {};\r\n        args.index = 0;\r\n        args.fullText = this._maskRulesChain.text();\r\n        return args\r\n    }\r\n    _convertToValue(text) {\r\n        if (this._isMaskedValueMode()) {\r\n            text = this._replaceMaskCharWithEmpty(text || this._textValue || \"\")\r\n        } else {\r\n            text = text || this._value || \"\"\r\n        }\r\n        return text\r\n    }\r\n    _replaceMaskCharWithEmpty(text) {\r\n        const {\r\n            maskChar: maskChar\r\n        } = this.option();\r\n        return text.replace(new RegExp(maskChar, \"g\"), \" \")\r\n    }\r\n    _maskKeyHandler(e, keyHandler) {\r\n        if (this.option(\"readOnly\")) {\r\n            return\r\n        }\r\n        this.setForwardDirection();\r\n        e.preventDefault();\r\n        this._handleSelection();\r\n        const previousText = this._input().val();\r\n        const raiseInputEvent = () => {\r\n            if (previousText !== this._input().val()) {\r\n                eventsEngine.trigger(this._input(), \"input\")\r\n            }\r\n        };\r\n        const handled = keyHandler();\r\n        if (handled) {\r\n            handled.then(raiseInputEvent)\r\n        } else {\r\n            this.setForwardDirection();\r\n            this._adjustCaret();\r\n            this._displayMask();\r\n            this._maskRulesChain.reset();\r\n            raiseInputEvent()\r\n        }\r\n    }\r\n    _handleKey(key, direction) {\r\n        this._direction(direction || \"forward\");\r\n        this._adjustCaret(key);\r\n        this._handleKeyChain(key);\r\n        this._moveCaret()\r\n    }\r\n    _handleSelection() {\r\n        if (!this._hasSelection()) {\r\n            return\r\n        }\r\n        const caret = this._caret();\r\n        const emptyChars = new Array(caret.end - caret.start + 1).join(\" \");\r\n        this._handleKeyChain(emptyChars)\r\n    }\r\n    _handleKeyChain(chars) {\r\n        const caret = this._caret();\r\n        const start = this.isForwardDirection() ? caret.start : caret.start - 1;\r\n        const end = this.isForwardDirection() ? caret.end : caret.end - 1;\r\n        const length = start === end ? 1 : end - start;\r\n        this._handleChain({\r\n            text: chars,\r\n            start: start,\r\n            length: length\r\n        })\r\n    }\r\n    _tryMoveCaretBackward() {\r\n        this.setBackwardDirection();\r\n        const currentCaret = this._caret().start;\r\n        this._adjustCaret();\r\n        return !currentCaret || currentCaret !== this._caret().start\r\n    }\r\n    _adjustCaret(char) {\r\n        const caretStart = this._caret().start;\r\n        const isForwardDirection = this.isForwardDirection();\r\n        const caret = this._maskRulesChain.adjustedCaret(caretStart, isForwardDirection, char);\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    }\r\n    _moveCaret() {\r\n        const currentCaret = this._caret().start;\r\n        const maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);\r\n        const caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    }\r\n    _caret(position, force) {\r\n        const $input = this._input();\r\n        if (!$input.length) {\r\n            return\r\n        }\r\n        if (!arguments.length) {\r\n            return caret($input)\r\n        }\r\n        caret($input, position, force)\r\n    }\r\n    _hasSelection() {\r\n        const caret = this._caret();\r\n        return caret.start !== caret.end\r\n    }\r\n    _direction(direction) {\r\n        if (!arguments.length) {\r\n            return this._typingDirection\r\n        }\r\n        this._typingDirection = direction\r\n    }\r\n    setForwardDirection() {\r\n        this._direction(\"forward\")\r\n    }\r\n    setBackwardDirection() {\r\n        this._direction(\"backward\")\r\n    }\r\n    isForwardDirection() {\r\n        return \"forward\" === this._direction()\r\n    }\r\n    _updateMaskInfo() {\r\n        this._textValue = this._maskRulesChain.text();\r\n        this._value = this._maskRulesChain.value()\r\n    }\r\n    _clean() {\r\n        this._maskStrategy && this._maskStrategy.clean();\r\n        super._clean()\r\n    }\r\n    _validateMask() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        const isValid = isEmpty(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"maskInvalidMessage\")\r\n            }\r\n        })\r\n    }\r\n    _updateHiddenElement() {\r\n        this._removeHiddenElement();\r\n        if (this.option(\"mask\")) {\r\n            this._input().removeAttr(\"name\");\r\n            this._renderHiddenElement()\r\n        }\r\n        const {\r\n            name: name\r\n        } = this.option();\r\n        this._setSubmitElementName(name)\r\n    }\r\n    _updateMaskOption() {\r\n        this._updateHiddenElement();\r\n        this._renderMask();\r\n        this._validateMask();\r\n        this._refreshValueChangeEvent()\r\n    }\r\n    _processEmptyMask(mask) {\r\n        if (mask) {\r\n            return\r\n        }\r\n        const value = this.option(\"value\");\r\n        this.option({\r\n            text: value,\r\n            isValid: true,\r\n            validationError: null\r\n        });\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        });\r\n        this._renderValue()\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"mask\":\r\n                this._updateMaskOption();\r\n                this._processEmptyMask(args.value);\r\n                break;\r\n            case \"maskChar\":\r\n            case \"maskRules\":\r\n            case \"useMaskedValue\":\r\n                this._updateMaskOption();\r\n                break;\r\n            case \"value\":\r\n                this._renderMaskedValue();\r\n                this._validateMask();\r\n                super._optionChanged(args);\r\n                this._changedValue = this._input().val();\r\n                break;\r\n            case \"maskInvalidMessage\":\r\n                break;\r\n            case \"showMaskMode\":\r\n                this.option(\"text\", \"\");\r\n                this._renderValue();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    clear() {\r\n        const {\r\n            value: defaultValue\r\n        } = this._getDefaultOptions();\r\n        if (this.option(\"value\") === defaultValue) {\r\n            this._renderMaskedValue()\r\n        }\r\n        super.clear()\r\n    }\r\n}\r\nexport default TextEditorMask;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}