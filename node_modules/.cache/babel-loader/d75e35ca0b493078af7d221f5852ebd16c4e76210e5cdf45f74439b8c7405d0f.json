{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.mask.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { addNamespace, isCommandKeyPressed, normalizeKeyName } from \"../../../common/core/events/utils/index\";\nimport dateLocalization from \"../../../common/core/localization/date\";\nimport defaultDateNames from \"../../../common/core/localization/default_date_names\";\nimport { getFormat } from \"../../../common/core/localization/ldml/date.format\";\nimport { getRegExpInfo } from \"../../../common/core/localization/ldml/date.parser\";\nimport numberLocalization from \"../../../common/core/localization/number\";\nimport devices from \"../../../core/devices\";\nimport browser from \"../../../core/utils/browser\";\nimport { clipboardText } from \"../../../core/utils/dom\";\nimport { fitIntoRange, inRange, sign } from \"../../../core/utils/math\";\nimport { isDate, isDefined, isFunction, isString } from \"../../../core/utils/type\";\nimport DateBoxBase from \"./m_date_box.base\";\nimport { getDatePartIndexByPosition, renderDateParts } from \"./m_date_box.mask.parts\";\nconst MASK_EVENT_NAMESPACE = \"dateBoxMask\";\nconst FORWARD = 1;\nconst BACKWARD = -1;\nclass DateBoxMask extends DateBoxBase {\n  _supportedKeys() {\n    const originalHandlers = super._supportedKeys();\n    const callOriginalHandler = e => {\n      const originalHandler = originalHandlers[normalizeKeyName(e)];\n      return null === originalHandler || void 0 === originalHandler ? void 0 : originalHandler.apply(this, [e]);\n    };\n    const applyHandler = (e, maskHandler) => {\n      if (this._shouldUseOriginalHandler(e)) {\n        return callOriginalHandler.apply(this, [e]);\n      }\n      return maskHandler.apply(this, [e]);\n    };\n    return _extends({}, originalHandlers, {\n      del: e => applyHandler(e, event => {\n        this._revertPart(1);\n        this._isAllSelected() || event.preventDefault();\n      }),\n      backspace: e => applyHandler(e, event => {\n        this._revertPart(-1);\n        this._isAllSelected() || event.preventDefault();\n      }),\n      home: e => applyHandler(e, event => {\n        this._selectFirstPart();\n        event.preventDefault();\n      }),\n      end: e => applyHandler(e, event => {\n        this._selectLastPart();\n        event.preventDefault();\n      }),\n      escape: e => applyHandler(e, () => {\n        this._revertChanges();\n      }),\n      enter: e => applyHandler(e, () => {\n        this._enterHandler();\n      }),\n      leftArrow: e => applyHandler(e, event => {\n        this._selectNextPart(-1);\n        event.preventDefault();\n      }),\n      rightArrow: e => applyHandler(e, event => {\n        this._selectNextPart(1);\n        event.preventDefault();\n      }),\n      upArrow: e => applyHandler(e, event => {\n        this._upDownArrowHandler(1);\n        event.preventDefault();\n      }),\n      downArrow: e => applyHandler(e, event => {\n        this._upDownArrowHandler(-1);\n        event.preventDefault();\n      })\n    });\n  }\n  _shouldUseOriginalHandler(e) {\n    const isNotDeletingInCalendar = this.option(\"opened\") && e && ![\"backspace\", \"del\"].includes(normalizeKeyName(e));\n    return !this._useMaskBehavior() || isNotDeletingInCalendar || e && e.altKey;\n  }\n  _upDownArrowHandler(step) {\n    this._setNewDateIfEmpty();\n    const originalValue = this._getActivePartValue(this._initialMaskValue);\n    const currentValue = this._getActivePartValue();\n    const delta = currentValue - originalValue;\n    this._loadMaskValue(this._initialMaskValue);\n    this._changePartValue(delta + step, true);\n  }\n  _changePartValue(step, lockOtherParts) {\n    const activePartPattern = this._getActivePartProp(\"pattern\");\n    const isAmPmPartActive = /^a{1,5}$/.test(activePartPattern);\n    if (isAmPmPartActive) {\n      this._toggleAmPm();\n    } else {\n      this._partIncrease(step, lockOtherParts);\n    }\n  }\n  _toggleAmPm() {\n    const currentValue = this._getActivePartProp(\"text\");\n    const indexOfCurrentValue = defaultDateNames.getPeriodNames().indexOf(currentValue);\n    const newValue = 1 ^ indexOfCurrentValue;\n    this._setActivePartValue(newValue);\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      useMaskBehavior: false,\n      emptyDateValue: new Date(2e3, 0, 1, 0, 0, 0)\n    });\n  }\n  _isSingleCharKey(_ref) {\n    let {\n      originalEvent: originalEvent,\n      alt: alt\n    } = _ref;\n    const key = originalEvent.data || originalEvent.key;\n    return \"string\" === typeof key && 1 === key.length && !alt && !isCommandKeyPressed(originalEvent);\n  }\n  _isSingleDigitKey(e) {\n    var _e$originalEvent;\n    const data = null === (_e$originalEvent = e.originalEvent) || void 0 === _e$originalEvent ? void 0 : _e$originalEvent.data;\n    return 1 === (null === data || void 0 === data ? void 0 : data.length) && parseInt(data, 10);\n  }\n  _useBeforeInputEvent() {\n    return devices.real().android;\n  }\n  _keyInputHandler(e, key) {\n    const oldInputValue = this._input().val();\n    this._processInputKey(key);\n    e.preventDefault();\n    const isValueChanged = oldInputValue !== this._input().val();\n    isValueChanged && eventsEngine.trigger(this._input(), \"input\");\n  }\n  _keyboardHandler(e) {\n    let {\n      key: key\n    } = e.originalEvent;\n    const result = super._keyboardHandler(e);\n    if (!this._useMaskBehavior() || this._useBeforeInputEvent()) {\n      return result;\n    }\n    if (browser.chrome && \"Process\" === e.key && 0 === e.code.indexOf(\"Digit\")) {\n      key = e.code.replace(\"Digit\", \"\");\n      this._processInputKey(key);\n      this._maskInputHandler = () => {\n        this._renderSelectedPart();\n      };\n    } else if (this._isSingleCharKey(e)) {\n      this._keyInputHandler(e.originalEvent, key);\n    }\n    return result;\n  }\n  _maskBeforeInputHandler(e) {\n    this._maskInputHandler = null;\n    const {\n      inputType: inputType\n    } = e.originalEvent;\n    if (\"insertCompositionText\" === inputType) {\n      this._maskInputHandler = () => {\n        this._renderSelectedPart();\n      };\n    }\n    const isBackwardDeletion = \"deleteContentBackward\" === inputType;\n    const isForwardDeletion = \"deleteContentForward\" === inputType;\n    if (isBackwardDeletion || isForwardDeletion) {\n      const direction = isBackwardDeletion ? -1 : 1;\n      this._maskInputHandler = () => {\n        this._revertPart();\n        this._selectNextPart(direction);\n      };\n    }\n    if (!this._useMaskBehavior() || !this._isSingleCharKey(e)) {\n      return;\n    }\n    const key = e.originalEvent.data;\n    this._keyInputHandler(e, key);\n    return true;\n  }\n  _keyPressHandler(e) {\n    const {\n      originalEvent: event\n    } = e;\n    if (\"insertCompositionText\" === (null === event || void 0 === event ? void 0 : event.inputType) && this._isSingleDigitKey(e)) {\n      this._processInputKey(event.data);\n      this._renderDisplayText(this._getDisplayedText(this._maskValue));\n      this._selectNextPart();\n    }\n    super._keyPressHandler(e);\n    if (this._maskInputHandler) {\n      this._maskInputHandler();\n      this._maskInputHandler = null;\n    }\n  }\n  _processInputKey(key) {\n    if (this._isAllSelected()) {\n      this._activePartIndex = 0;\n    }\n    this._setNewDateIfEmpty();\n    if (isNaN(parseInt(key))) {\n      this._searchString(key);\n    } else {\n      this._searchNumber(key);\n    }\n  }\n  _isAllSelected() {\n    const caret = this._caret();\n    const {\n      text: text\n    } = this.option();\n    return caret.end - caret.start === text.length;\n  }\n  _getFormatPattern() {\n    if (this._formatPattern) {\n      return this._formatPattern;\n    }\n    const format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n    const isLDMLPattern = isString(format) && !dateLocalization._getPatternByFormat(format);\n    if (isLDMLPattern) {\n      this._formatPattern = format;\n    } else {\n      this._formatPattern = getFormat(value => dateLocalization.format(value, format));\n    }\n    return this._formatPattern;\n  }\n  _setNewDateIfEmpty() {\n    if (!this._maskValue) {\n      const {\n        type: type\n      } = this.option();\n      const value = \"time\" === type ? new Date(null) : new Date();\n      this._maskValue = value;\n      this._initialMaskValue = value;\n      this._renderDateParts();\n    }\n  }\n  _partLimitsReached(max) {\n    const maxLimitLength = String(max).length;\n    const formatLength = this._getActivePartProp(\"pattern\").length;\n    const isShortFormat = 1 === formatLength;\n    const maxSearchLength = isShortFormat ? maxLimitLength : Math.min(formatLength, maxLimitLength);\n    const isLengthExceeded = this._searchValue.length === maxSearchLength;\n    const isValueOverflowed = parseInt(`${this._searchValue}0`) > max;\n    return isLengthExceeded || isValueOverflowed;\n  }\n  _searchNumber(char) {\n    const {\n      max: max\n    } = this._getActivePartLimits();\n    const maxLimitLength = String(max).length;\n    this._searchValue = (this._searchValue + char).substr(-maxLimitLength);\n    if (isNaN(this._searchValue)) {\n      this._searchValue = char;\n    }\n    this._setActivePartValue(this._searchValue);\n    if (this._partLimitsReached(max)) {\n      this._selectNextPart(1);\n    }\n  }\n  _searchString(char) {\n    if (!isNaN(parseInt(this._getActivePartProp(\"text\")))) {\n      return;\n    }\n    const limits = this._getActivePartProp(\"limits\")(this._maskValue);\n    const startString = this._searchValue + char.toLowerCase();\n    const endLimit = limits.max - limits.min;\n    for (let i = 0; i <= endLimit; i++) {\n      this._loadMaskValue(this._initialMaskValue);\n      this._changePartValue(i + 1);\n      if (0 === this._getActivePartProp(\"text\").toLowerCase().indexOf(startString)) {\n        this._searchValue = startString;\n        return;\n      }\n    }\n    this._setNewDateIfEmpty();\n    if (this._searchValue) {\n      this._clearSearchValue();\n      this._searchString(char);\n    }\n  }\n  _clearSearchValue() {\n    this._searchValue = \"\";\n  }\n  _revertPart(direction) {\n    if (!this._isAllSelected()) {\n      const actual = this._getActivePartValue(this.option(\"emptyDateValue\"));\n      this._setActivePartValue(actual);\n      this._selectNextPart(direction);\n    }\n    this._clearSearchValue();\n  }\n  _useMaskBehavior() {\n    const {\n      mode: mode\n    } = this.option();\n    return this.option(\"useMaskBehavior\") && \"text\" === mode;\n  }\n  _prepareRegExpInfo() {\n    this._regExpInfo = getRegExpInfo(this._getFormatPattern(), dateLocalization);\n    const {\n      regexp: regexp\n    } = this._regExpInfo;\n    const {\n      source: source\n    } = regexp;\n    const {\n      flags: flags\n    } = regexp;\n    const quantifierRegexp = new RegExp(/(\\{[0-9]+,?[0-9]*\\})/);\n    const convertedSource = source.split(quantifierRegexp).map(sourcePart => quantifierRegexp.test(sourcePart) ? sourcePart : numberLocalization.convertDigits(sourcePart, false)).join(\"\");\n    this._regExpInfo.regexp = new RegExp(convertedSource, flags);\n  }\n  _initMaskState() {\n    this._activePartIndex = 0;\n    this._formatPattern = null;\n    this._prepareRegExpInfo();\n    this._loadMaskValue();\n  }\n  _renderMask() {\n    super._renderMask();\n    this._detachMaskEvents();\n    this._clearMaskState();\n    if (this._useMaskBehavior()) {\n      this._attachMaskEvents();\n      this._initMaskState();\n      this._renderDateParts();\n    }\n  }\n  _renderDateParts() {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    const text = this.option(\"text\") || this._getDisplayedText(this._maskValue);\n    if (text) {\n      this._dateParts = renderDateParts(text, this._regExpInfo);\n      if (!this._input().is(\":hidden\")) {\n        this._selectNextPart();\n      }\n    }\n  }\n  _detachMaskEvents() {\n    eventsEngine.off(this._input(), \".dateBoxMask\");\n  }\n  _attachMaskEvents() {\n    eventsEngine.on(this._input(), addNamespace(\"dxclick\", \"dateBoxMask\"), this._maskClickHandler.bind(this));\n    eventsEngine.on(this._input(), addNamespace(\"paste\", \"dateBoxMask\"), this._maskPasteHandler.bind(this));\n    eventsEngine.on(this._input(), addNamespace(\"drop\", \"dateBoxMask\"), () => {\n      this._renderSelectedPart();\n    });\n    eventsEngine.on(this._input(), addNamespace(\"compositionend\", \"dateBoxMask\"), this._maskCompositionEndHandler.bind(this));\n    if (this._useBeforeInputEvent()) {\n      eventsEngine.on(this._input(), addNamespace(\"beforeinput\", \"dateBoxMask\"), this._maskBeforeInputHandler.bind(this));\n    }\n  }\n  _renderSelectedPart() {\n    this._renderDisplayText(this._getDisplayedText(this._maskValue));\n    this._selectNextPart();\n  }\n  _selectLastPart() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = this._dateParts.length;\n      this._selectNextPart(-1);\n    }\n  }\n  _selectFirstPart() {\n    if (this.option(\"text\") && this._dateParts) {\n      this._activePartIndex = -1;\n      this._selectNextPart(1);\n    }\n  }\n  _onMouseWheel(e) {\n    if (this._useMaskBehavior()) {\n      this._partIncrease(e.delta > 0 ? 1 : -1, e);\n    }\n  }\n  _selectNextPart() {\n    let step = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n    if (!this.option(\"text\") || this._disposed) {\n      return;\n    }\n    if (step) {\n      this._initialMaskValue = new Date(this._maskValue);\n    }\n    let index = fitIntoRange(this._activePartIndex + step, 0, this._dateParts.length - 1);\n    if (this._dateParts[index].isStub) {\n      const isBoundaryIndex = 0 === index && step < 0 || index === this._dateParts.length - 1 && step > 0;\n      if (!isBoundaryIndex) {\n        this._selectNextPart(step >= 0 ? step + 1 : step - 1);\n        return;\n      }\n      index = this._activePartIndex;\n    }\n    if (this._activePartIndex !== index) {\n      this._clearSearchValue();\n    }\n    this._activePartIndex = index;\n    this._caret(this._getActivePartProp(\"caret\"));\n  }\n  _getRealLimitsPattern() {\n    if (\"d\" === this._getActivePartProp(\"pattern\")[0]) {\n      return \"dM\";\n    }\n  }\n  _getActivePartLimits(lockOtherParts) {\n    const limitFunction = this._getActivePartProp(\"limits\");\n    return limitFunction(this._maskValue, lockOtherParts && this._getRealLimitsPattern());\n  }\n  _getActivePartValue(dateValue) {\n    dateValue = dateValue || this._maskValue;\n    const getter = this._getActivePartProp(\"getter\");\n    return isFunction(getter) ? getter(dateValue) : dateValue[getter]();\n  }\n  _addLeadingZeroes(value) {\n    const zeroes = /^0+/.exec(this._searchValue);\n    const limits = this._getActivePartLimits();\n    const maxLimitLength = String(limits.max).length;\n    return ((zeroes && zeroes[0] || \"\") + String(value)).substr(-maxLimitLength);\n  }\n  _setActivePartValue(value, dateValue) {\n    dateValue = dateValue || this._maskValue;\n    const setter = this._getActivePartProp(\"setter\");\n    const limits = this._getActivePartLimits();\n    value = inRange(value, limits.min, limits.max) ? value : value % 10;\n    value = this._addLeadingZeroes(fitIntoRange(value, limits.min, limits.max));\n    isFunction(setter) ? setter(dateValue, value) : dateValue[setter](value);\n    this._renderDisplayText(this._getDisplayedText(dateValue));\n    this._renderDateParts();\n  }\n  _getActivePartProp(property) {\n    if (!this._dateParts || !this._dateParts[this._activePartIndex]) {\n      return;\n    }\n    return this._dateParts[this._activePartIndex][property];\n  }\n  _loadMaskValue() {\n    let value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dateOption(\"value\");\n    this._maskValue = value && new Date(value);\n    this._initialMaskValue = value && new Date(value);\n  }\n  _saveMaskValue() {\n    const value = this._maskValue && new Date(this._maskValue);\n    const {\n      type: type\n    } = this.option();\n    if (value && \"date\" === type) {\n      value.setHours(0, 0, 0, 0);\n    }\n    this._initialMaskValue = new Date(value);\n    this.dateOption(\"value\", value);\n  }\n  _revertChanges() {\n    this._loadMaskValue();\n    this._renderDisplayText(this._getDisplayedText(this._maskValue));\n    this._renderDateParts();\n  }\n  _renderDisplayText(text) {\n    super._renderDisplayText(text);\n    if (this._useMaskBehavior()) {\n      this.option(\"text\", text);\n    }\n  }\n  _partIncrease(step, lockOtherParts) {\n    this._setNewDateIfEmpty();\n    const {\n      max: max,\n      min: min\n    } = this._getActivePartLimits(lockOtherParts);\n    let newValue = step + this._getActivePartValue();\n    if (newValue > max) {\n      newValue = this._applyLimits(newValue, {\n        limitBase: min,\n        limitClosest: max,\n        max: max\n      });\n    } else if (newValue < min) {\n      newValue = this._applyLimits(newValue, {\n        limitBase: max,\n        limitClosest: min,\n        max: max\n      });\n    }\n    this._setActivePartValue(newValue);\n  }\n  _applyLimits(newValue, _ref2) {\n    let {\n      limitBase: limitBase,\n      limitClosest: limitClosest,\n      max: max\n    } = _ref2;\n    const delta = (newValue - limitClosest) % max;\n    return delta ? limitBase + delta - 1 * sign(delta) : limitClosest;\n  }\n  _maskClickHandler() {\n    this._loadMaskValue(this._maskValue);\n    if (this.option(\"text\")) {\n      this._activePartIndex = getDatePartIndexByPosition(this._dateParts, this._caret().start);\n      if (!this._isAllSelected()) {\n        this._clearSearchValue();\n        if (isDefined(this._activePartIndex)) {\n          this._caret(this._getActivePartProp(\"caret\"));\n        } else {\n          this._selectLastPart();\n        }\n      }\n    }\n  }\n  _maskCompositionEndHandler(e) {\n    this._input().val(this._getDisplayedText(this._maskValue));\n    this._selectNextPart();\n    this._maskInputHandler = () => {\n      this._renderSelectedPart();\n    };\n  }\n  _maskPasteHandler(e) {\n    const newText = this._replaceSelectedText(this.option(\"text\"), this._caret(), clipboardText(e));\n    const date = dateLocalization.parse(newText, this._getFormatPattern());\n    if (date && this._isDateValid(date)) {\n      this._maskValue = date;\n      this._renderDisplayText(this._getDisplayedText(this._maskValue));\n      this._renderDateParts();\n      this._selectNextPart();\n    }\n    e.preventDefault();\n  }\n  _isDateValid(date) {\n    return isDate(date) && !isNaN(date);\n  }\n  _isValueDirty() {\n    const value = this.dateOption(\"value\");\n    return (this._maskValue && this._maskValue.getTime()) !== (value && value.getTime());\n  }\n  _fireChangeEvent() {\n    this._clearSearchValue();\n    if (this._isValueDirty()) {\n      eventsEngine.trigger(this._input(), \"change\");\n    }\n  }\n  _enterHandler() {\n    this._fireChangeEvent();\n    this._selectNextPart(1);\n  }\n  _focusOutHandler(e) {\n    const shouldFireChangeEvent = this._useMaskBehavior() && !e.isDefaultPrevented();\n    if (shouldFireChangeEvent) {\n      this._fireChangeEvent();\n      super._focusOutHandler(e);\n      this._selectFirstPart();\n    } else {\n      super._focusOutHandler(e);\n    }\n  }\n  _valueChangeEventHandler(e) {\n    const text = this.option(\"text\");\n    if (this._useMaskBehavior()) {\n      this._saveValueChangeEvent(e);\n      if (!text) {\n        this._maskValue = null;\n      } else if (null === this._maskValue) {\n        this._loadMaskValue(text);\n      }\n      this._saveMaskValue();\n    } else {\n      super._valueChangeEventHandler(e);\n    }\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"useMaskBehavior\":\n        this._renderMask();\n        break;\n      case \"displayFormat\":\n      case \"mode\":\n        super._optionChanged(args);\n        this._renderMask();\n        break;\n      case \"value\":\n        this._loadMaskValue();\n        super._optionChanged(args);\n        this._renderDateParts();\n        break;\n      case \"emptyDateValue\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _clearMaskState() {\n    this._clearSearchValue();\n    delete this._dateParts;\n    delete this._activePartIndex;\n    delete this._maskValue;\n  }\n  clear() {\n    this._clearMaskState();\n    this._activePartIndex = 0;\n    super.clear();\n  }\n  _clean() {\n    super._clean();\n    this._detachMaskEvents();\n    this._clearMaskState();\n  }\n}\nexport default DateBoxMask;","map":{"version":3,"names":["_extends","eventsEngine","addNamespace","isCommandKeyPressed","normalizeKeyName","dateLocalization","defaultDateNames","getFormat","getRegExpInfo","numberLocalization","devices","browser","clipboardText","fitIntoRange","inRange","sign","isDate","isDefined","isFunction","isString","DateBoxBase","getDatePartIndexByPosition","renderDateParts","MASK_EVENT_NAMESPACE","FORWARD","BACKWARD","DateBoxMask","_supportedKeys","originalHandlers","callOriginalHandler","e","originalHandler","apply","applyHandler","maskHandler","_shouldUseOriginalHandler","del","event","_revertPart","_isAllSelected","preventDefault","backspace","home","_selectFirstPart","end","_selectLastPart","escape","_revertChanges","enter","_enterHandler","leftArrow","_selectNextPart","rightArrow","upArrow","_upDownArrowHandler","downArrow","isNotDeletingInCalendar","option","includes","_useMaskBehavior","altKey","step","_setNewDateIfEmpty","originalValue","_getActivePartValue","_initialMaskValue","currentValue","delta","_loadMaskValue","_changePartValue","lockOtherParts","activePartPattern","_getActivePartProp","isAmPmPartActive","test","_toggleAmPm","_partIncrease","indexOfCurrentValue","getPeriodNames","indexOf","newValue","_setActivePartValue","_getDefaultOptions","useMaskBehavior","emptyDateValue","Date","_isSingleCharKey","_ref","originalEvent","alt","key","data","length","_isSingleDigitKey","_e$originalEvent","parseInt","_useBeforeInputEvent","real","android","_keyInputHandler","oldInputValue","_input","val","_processInputKey","isValueChanged","trigger","_keyboardHandler","result","chrome","code","replace","_maskInputHandler","_renderSelectedPart","_maskBeforeInputHandler","inputType","isBackwardDeletion","isForwardDeletion","direction","_keyPressHandler","_renderDisplayText","_getDisplayedText","_maskValue","_activePartIndex","isNaN","_searchString","_searchNumber","caret","_caret","text","start","_getFormatPattern","_formatPattern","format","_strategy","getDisplayFormat","isLDMLPattern","_getPatternByFormat","value","type","_renderDateParts","_partLimitsReached","max","maxLimitLength","String","formatLength","isShortFormat","maxSearchLength","Math","min","isLengthExceeded","_searchValue","isValueOverflowed","char","_getActivePartLimits","substr","limits","startString","toLowerCase","endLimit","i","_clearSearchValue","actual","mode","_prepareRegExpInfo","_regExpInfo","regexp","source","flags","quantifierRegexp","RegExp","convertedSource","split","map","sourcePart","convertDigits","join","_initMaskState","_renderMask","_detachMaskEvents","_clearMaskState","_attachMaskEvents","_dateParts","is","off","on","_maskClickHandler","bind","_maskPasteHandler","_maskCompositionEndHandler","_onMouseWheel","arguments","_disposed","index","isStub","isBoundaryIndex","_getRealLimitsPattern","limitFunction","dateValue","getter","_addLeadingZeroes","zeroes","exec","setter","property","dateOption","_saveMaskValue","setHours","_applyLimits","limitBase","limitClosest","_ref2","newText","_replaceSelectedText","date","parse","_isDateValid","_isValueDirty","getTime","_fireChangeEvent","_focusOutHandler","shouldFireChangeEvent","isDefaultPrevented","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","clear","_clean"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/date_box/m_date_box.mask.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.mask.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed,\r\n    normalizeKeyName\r\n} from \"../../../common/core/events/utils/index\";\r\nimport dateLocalization from \"../../../common/core/localization/date\";\r\nimport defaultDateNames from \"../../../common/core/localization/default_date_names\";\r\nimport {\r\n    getFormat\r\n} from \"../../../common/core/localization/ldml/date.format\";\r\nimport {\r\n    getRegExpInfo\r\n} from \"../../../common/core/localization/ldml/date.parser\";\r\nimport numberLocalization from \"../../../common/core/localization/number\";\r\nimport devices from \"../../../core/devices\";\r\nimport browser from \"../../../core/utils/browser\";\r\nimport {\r\n    clipboardText\r\n} from \"../../../core/utils/dom\";\r\nimport {\r\n    fitIntoRange,\r\n    inRange,\r\n    sign\r\n} from \"../../../core/utils/math\";\r\nimport {\r\n    isDate,\r\n    isDefined,\r\n    isFunction,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport DateBoxBase from \"./m_date_box.base\";\r\nimport {\r\n    getDatePartIndexByPosition,\r\n    renderDateParts\r\n} from \"./m_date_box.mask.parts\";\r\nconst MASK_EVENT_NAMESPACE = \"dateBoxMask\";\r\nconst FORWARD = 1;\r\nconst BACKWARD = -1;\r\nclass DateBoxMask extends DateBoxBase {\r\n    _supportedKeys() {\r\n        const originalHandlers = super._supportedKeys();\r\n        const callOriginalHandler = e => {\r\n            const originalHandler = originalHandlers[normalizeKeyName(e)];\r\n            return null === originalHandler || void 0 === originalHandler ? void 0 : originalHandler.apply(this, [e])\r\n        };\r\n        const applyHandler = (e, maskHandler) => {\r\n            if (this._shouldUseOriginalHandler(e)) {\r\n                return callOriginalHandler.apply(this, [e])\r\n            }\r\n            return maskHandler.apply(this, [e])\r\n        };\r\n        return _extends({}, originalHandlers, {\r\n            del: e => applyHandler(e, (event => {\r\n                this._revertPart(1);\r\n                this._isAllSelected() || event.preventDefault()\r\n            })),\r\n            backspace: e => applyHandler(e, (event => {\r\n                this._revertPart(-1);\r\n                this._isAllSelected() || event.preventDefault()\r\n            })),\r\n            home: e => applyHandler(e, (event => {\r\n                this._selectFirstPart();\r\n                event.preventDefault()\r\n            })),\r\n            end: e => applyHandler(e, (event => {\r\n                this._selectLastPart();\r\n                event.preventDefault()\r\n            })),\r\n            escape: e => applyHandler(e, (() => {\r\n                this._revertChanges()\r\n            })),\r\n            enter: e => applyHandler(e, (() => {\r\n                this._enterHandler()\r\n            })),\r\n            leftArrow: e => applyHandler(e, (event => {\r\n                this._selectNextPart(-1);\r\n                event.preventDefault()\r\n            })),\r\n            rightArrow: e => applyHandler(e, (event => {\r\n                this._selectNextPart(1);\r\n                event.preventDefault()\r\n            })),\r\n            upArrow: e => applyHandler(e, (event => {\r\n                this._upDownArrowHandler(1);\r\n                event.preventDefault()\r\n            })),\r\n            downArrow: e => applyHandler(e, (event => {\r\n                this._upDownArrowHandler(-1);\r\n                event.preventDefault()\r\n            }))\r\n        })\r\n    }\r\n    _shouldUseOriginalHandler(e) {\r\n        const isNotDeletingInCalendar = this.option(\"opened\") && e && ![\"backspace\", \"del\"].includes(normalizeKeyName(e));\r\n        return !this._useMaskBehavior() || isNotDeletingInCalendar || e && e.altKey\r\n    }\r\n    _upDownArrowHandler(step) {\r\n        this._setNewDateIfEmpty();\r\n        const originalValue = this._getActivePartValue(this._initialMaskValue);\r\n        const currentValue = this._getActivePartValue();\r\n        const delta = currentValue - originalValue;\r\n        this._loadMaskValue(this._initialMaskValue);\r\n        this._changePartValue(delta + step, true)\r\n    }\r\n    _changePartValue(step, lockOtherParts) {\r\n        const activePartPattern = this._getActivePartProp(\"pattern\");\r\n        const isAmPmPartActive = /^a{1,5}$/.test(activePartPattern);\r\n        if (isAmPmPartActive) {\r\n            this._toggleAmPm()\r\n        } else {\r\n            this._partIncrease(step, lockOtherParts)\r\n        }\r\n    }\r\n    _toggleAmPm() {\r\n        const currentValue = this._getActivePartProp(\"text\");\r\n        const indexOfCurrentValue = defaultDateNames.getPeriodNames().indexOf(currentValue);\r\n        const newValue = 1 ^ indexOfCurrentValue;\r\n        this._setActivePartValue(newValue)\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            useMaskBehavior: false,\r\n            emptyDateValue: new Date(2e3, 0, 1, 0, 0, 0)\r\n        })\r\n    }\r\n    _isSingleCharKey(_ref) {\r\n        let {\r\n            originalEvent: originalEvent,\r\n            alt: alt\r\n        } = _ref;\r\n        const key = originalEvent.data || originalEvent.key;\r\n        return \"string\" === typeof key && 1 === key.length && !alt && !isCommandKeyPressed(originalEvent)\r\n    }\r\n    _isSingleDigitKey(e) {\r\n        var _e$originalEvent;\r\n        const data = null === (_e$originalEvent = e.originalEvent) || void 0 === _e$originalEvent ? void 0 : _e$originalEvent.data;\r\n        return 1 === (null === data || void 0 === data ? void 0 : data.length) && parseInt(data, 10)\r\n    }\r\n    _useBeforeInputEvent() {\r\n        return devices.real().android\r\n    }\r\n    _keyInputHandler(e, key) {\r\n        const oldInputValue = this._input().val();\r\n        this._processInputKey(key);\r\n        e.preventDefault();\r\n        const isValueChanged = oldInputValue !== this._input().val();\r\n        isValueChanged && eventsEngine.trigger(this._input(), \"input\")\r\n    }\r\n    _keyboardHandler(e) {\r\n        let {\r\n            key: key\r\n        } = e.originalEvent;\r\n        const result = super._keyboardHandler(e);\r\n        if (!this._useMaskBehavior() || this._useBeforeInputEvent()) {\r\n            return result\r\n        }\r\n        if (browser.chrome && \"Process\" === e.key && 0 === e.code.indexOf(\"Digit\")) {\r\n            key = e.code.replace(\"Digit\", \"\");\r\n            this._processInputKey(key);\r\n            this._maskInputHandler = () => {\r\n                this._renderSelectedPart()\r\n            }\r\n        } else if (this._isSingleCharKey(e)) {\r\n            this._keyInputHandler(e.originalEvent, key)\r\n        }\r\n        return result\r\n    }\r\n    _maskBeforeInputHandler(e) {\r\n        this._maskInputHandler = null;\r\n        const {\r\n            inputType: inputType\r\n        } = e.originalEvent;\r\n        if (\"insertCompositionText\" === inputType) {\r\n            this._maskInputHandler = () => {\r\n                this._renderSelectedPart()\r\n            }\r\n        }\r\n        const isBackwardDeletion = \"deleteContentBackward\" === inputType;\r\n        const isForwardDeletion = \"deleteContentForward\" === inputType;\r\n        if (isBackwardDeletion || isForwardDeletion) {\r\n            const direction = isBackwardDeletion ? -1 : 1;\r\n            this._maskInputHandler = () => {\r\n                this._revertPart();\r\n                this._selectNextPart(direction)\r\n            }\r\n        }\r\n        if (!this._useMaskBehavior() || !this._isSingleCharKey(e)) {\r\n            return\r\n        }\r\n        const key = e.originalEvent.data;\r\n        this._keyInputHandler(e, key);\r\n        return true\r\n    }\r\n    _keyPressHandler(e) {\r\n        const {\r\n            originalEvent: event\r\n        } = e;\r\n        if (\"insertCompositionText\" === (null === event || void 0 === event ? void 0 : event.inputType) && this._isSingleDigitKey(e)) {\r\n            this._processInputKey(event.data);\r\n            this._renderDisplayText(this._getDisplayedText(this._maskValue));\r\n            this._selectNextPart()\r\n        }\r\n        super._keyPressHandler(e);\r\n        if (this._maskInputHandler) {\r\n            this._maskInputHandler();\r\n            this._maskInputHandler = null\r\n        }\r\n    }\r\n    _processInputKey(key) {\r\n        if (this._isAllSelected()) {\r\n            this._activePartIndex = 0\r\n        }\r\n        this._setNewDateIfEmpty();\r\n        if (isNaN(parseInt(key))) {\r\n            this._searchString(key)\r\n        } else {\r\n            this._searchNumber(key)\r\n        }\r\n    }\r\n    _isAllSelected() {\r\n        const caret = this._caret();\r\n        const {\r\n            text: text\r\n        } = this.option();\r\n        return caret.end - caret.start === text.length\r\n    }\r\n    _getFormatPattern() {\r\n        if (this._formatPattern) {\r\n            return this._formatPattern\r\n        }\r\n        const format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\r\n        const isLDMLPattern = isString(format) && !dateLocalization._getPatternByFormat(format);\r\n        if (isLDMLPattern) {\r\n            this._formatPattern = format\r\n        } else {\r\n            this._formatPattern = getFormat((value => dateLocalization.format(value, format)))\r\n        }\r\n        return this._formatPattern\r\n    }\r\n    _setNewDateIfEmpty() {\r\n        if (!this._maskValue) {\r\n            const {\r\n                type: type\r\n            } = this.option();\r\n            const value = \"time\" === type ? new Date(null) : new Date;\r\n            this._maskValue = value;\r\n            this._initialMaskValue = value;\r\n            this._renderDateParts()\r\n        }\r\n    }\r\n    _partLimitsReached(max) {\r\n        const maxLimitLength = String(max).length;\r\n        const formatLength = this._getActivePartProp(\"pattern\").length;\r\n        const isShortFormat = 1 === formatLength;\r\n        const maxSearchLength = isShortFormat ? maxLimitLength : Math.min(formatLength, maxLimitLength);\r\n        const isLengthExceeded = this._searchValue.length === maxSearchLength;\r\n        const isValueOverflowed = parseInt(`${this._searchValue}0`) > max;\r\n        return isLengthExceeded || isValueOverflowed\r\n    }\r\n    _searchNumber(char) {\r\n        const {\r\n            max: max\r\n        } = this._getActivePartLimits();\r\n        const maxLimitLength = String(max).length;\r\n        this._searchValue = (this._searchValue + char).substr(-maxLimitLength);\r\n        if (isNaN(this._searchValue)) {\r\n            this._searchValue = char\r\n        }\r\n        this._setActivePartValue(this._searchValue);\r\n        if (this._partLimitsReached(max)) {\r\n            this._selectNextPart(1)\r\n        }\r\n    }\r\n    _searchString(char) {\r\n        if (!isNaN(parseInt(this._getActivePartProp(\"text\")))) {\r\n            return\r\n        }\r\n        const limits = this._getActivePartProp(\"limits\")(this._maskValue);\r\n        const startString = this._searchValue + char.toLowerCase();\r\n        const endLimit = limits.max - limits.min;\r\n        for (let i = 0; i <= endLimit; i++) {\r\n            this._loadMaskValue(this._initialMaskValue);\r\n            this._changePartValue(i + 1);\r\n            if (0 === this._getActivePartProp(\"text\").toLowerCase().indexOf(startString)) {\r\n                this._searchValue = startString;\r\n                return\r\n            }\r\n        }\r\n        this._setNewDateIfEmpty();\r\n        if (this._searchValue) {\r\n            this._clearSearchValue();\r\n            this._searchString(char)\r\n        }\r\n    }\r\n    _clearSearchValue() {\r\n        this._searchValue = \"\"\r\n    }\r\n    _revertPart(direction) {\r\n        if (!this._isAllSelected()) {\r\n            const actual = this._getActivePartValue(this.option(\"emptyDateValue\"));\r\n            this._setActivePartValue(actual);\r\n            this._selectNextPart(direction)\r\n        }\r\n        this._clearSearchValue()\r\n    }\r\n    _useMaskBehavior() {\r\n        const {\r\n            mode: mode\r\n        } = this.option();\r\n        return this.option(\"useMaskBehavior\") && \"text\" === mode\r\n    }\r\n    _prepareRegExpInfo() {\r\n        this._regExpInfo = getRegExpInfo(this._getFormatPattern(), dateLocalization);\r\n        const {\r\n            regexp: regexp\r\n        } = this._regExpInfo;\r\n        const {\r\n            source: source\r\n        } = regexp;\r\n        const {\r\n            flags: flags\r\n        } = regexp;\r\n        const quantifierRegexp = new RegExp(/(\\{[0-9]+,?[0-9]*\\})/);\r\n        const convertedSource = source.split(quantifierRegexp).map((sourcePart => quantifierRegexp.test(sourcePart) ? sourcePart : numberLocalization.convertDigits(sourcePart, false))).join(\"\");\r\n        this._regExpInfo.regexp = new RegExp(convertedSource, flags)\r\n    }\r\n    _initMaskState() {\r\n        this._activePartIndex = 0;\r\n        this._formatPattern = null;\r\n        this._prepareRegExpInfo();\r\n        this._loadMaskValue()\r\n    }\r\n    _renderMask() {\r\n        super._renderMask();\r\n        this._detachMaskEvents();\r\n        this._clearMaskState();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachMaskEvents();\r\n            this._initMaskState();\r\n            this._renderDateParts()\r\n        }\r\n    }\r\n    _renderDateParts() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        const text = this.option(\"text\") || this._getDisplayedText(this._maskValue);\r\n        if (text) {\r\n            this._dateParts = renderDateParts(text, this._regExpInfo);\r\n            if (!this._input().is(\":hidden\")) {\r\n                this._selectNextPart()\r\n            }\r\n        }\r\n    }\r\n    _detachMaskEvents() {\r\n        eventsEngine.off(this._input(), \".dateBoxMask\")\r\n    }\r\n    _attachMaskEvents() {\r\n        eventsEngine.on(this._input(), addNamespace(\"dxclick\", \"dateBoxMask\"), this._maskClickHandler.bind(this));\r\n        eventsEngine.on(this._input(), addNamespace(\"paste\", \"dateBoxMask\"), this._maskPasteHandler.bind(this));\r\n        eventsEngine.on(this._input(), addNamespace(\"drop\", \"dateBoxMask\"), (() => {\r\n            this._renderSelectedPart()\r\n        }));\r\n        eventsEngine.on(this._input(), addNamespace(\"compositionend\", \"dateBoxMask\"), this._maskCompositionEndHandler.bind(this));\r\n        if (this._useBeforeInputEvent()) {\r\n            eventsEngine.on(this._input(), addNamespace(\"beforeinput\", \"dateBoxMask\"), this._maskBeforeInputHandler.bind(this))\r\n        }\r\n    }\r\n    _renderSelectedPart() {\r\n        this._renderDisplayText(this._getDisplayedText(this._maskValue));\r\n        this._selectNextPart()\r\n    }\r\n    _selectLastPart() {\r\n        if (this.option(\"text\")) {\r\n            this._activePartIndex = this._dateParts.length;\r\n            this._selectNextPart(-1)\r\n        }\r\n    }\r\n    _selectFirstPart() {\r\n        if (this.option(\"text\") && this._dateParts) {\r\n            this._activePartIndex = -1;\r\n            this._selectNextPart(1)\r\n        }\r\n    }\r\n    _onMouseWheel(e) {\r\n        if (this._useMaskBehavior()) {\r\n            this._partIncrease(e.delta > 0 ? 1 : -1, e)\r\n        }\r\n    }\r\n    _selectNextPart() {\r\n        let step = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\r\n        if (!this.option(\"text\") || this._disposed) {\r\n            return\r\n        }\r\n        if (step) {\r\n            this._initialMaskValue = new Date(this._maskValue)\r\n        }\r\n        let index = fitIntoRange(this._activePartIndex + step, 0, this._dateParts.length - 1);\r\n        if (this._dateParts[index].isStub) {\r\n            const isBoundaryIndex = 0 === index && step < 0 || index === this._dateParts.length - 1 && step > 0;\r\n            if (!isBoundaryIndex) {\r\n                this._selectNextPart(step >= 0 ? step + 1 : step - 1);\r\n                return\r\n            }\r\n            index = this._activePartIndex\r\n        }\r\n        if (this._activePartIndex !== index) {\r\n            this._clearSearchValue()\r\n        }\r\n        this._activePartIndex = index;\r\n        this._caret(this._getActivePartProp(\"caret\"))\r\n    }\r\n    _getRealLimitsPattern() {\r\n        if (\"d\" === this._getActivePartProp(\"pattern\")[0]) {\r\n            return \"dM\"\r\n        }\r\n    }\r\n    _getActivePartLimits(lockOtherParts) {\r\n        const limitFunction = this._getActivePartProp(\"limits\");\r\n        return limitFunction(this._maskValue, lockOtherParts && this._getRealLimitsPattern())\r\n    }\r\n    _getActivePartValue(dateValue) {\r\n        dateValue = dateValue || this._maskValue;\r\n        const getter = this._getActivePartProp(\"getter\");\r\n        return isFunction(getter) ? getter(dateValue) : dateValue[getter]()\r\n    }\r\n    _addLeadingZeroes(value) {\r\n        const zeroes = /^0+/.exec(this._searchValue);\r\n        const limits = this._getActivePartLimits();\r\n        const maxLimitLength = String(limits.max).length;\r\n        return ((zeroes && zeroes[0] || \"\") + String(value)).substr(-maxLimitLength)\r\n    }\r\n    _setActivePartValue(value, dateValue) {\r\n        dateValue = dateValue || this._maskValue;\r\n        const setter = this._getActivePartProp(\"setter\");\r\n        const limits = this._getActivePartLimits();\r\n        value = inRange(value, limits.min, limits.max) ? value : value % 10;\r\n        value = this._addLeadingZeroes(fitIntoRange(value, limits.min, limits.max));\r\n        isFunction(setter) ? setter(dateValue, value) : dateValue[setter](value);\r\n        this._renderDisplayText(this._getDisplayedText(dateValue));\r\n        this._renderDateParts()\r\n    }\r\n    _getActivePartProp(property) {\r\n        if (!this._dateParts || !this._dateParts[this._activePartIndex]) {\r\n            return\r\n        }\r\n        return this._dateParts[this._activePartIndex][property]\r\n    }\r\n    _loadMaskValue() {\r\n        let value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dateOption(\"value\");\r\n        this._maskValue = value && new Date(value);\r\n        this._initialMaskValue = value && new Date(value)\r\n    }\r\n    _saveMaskValue() {\r\n        const value = this._maskValue && new Date(this._maskValue);\r\n        const {\r\n            type: type\r\n        } = this.option();\r\n        if (value && \"date\" === type) {\r\n            value.setHours(0, 0, 0, 0)\r\n        }\r\n        this._initialMaskValue = new Date(value);\r\n        this.dateOption(\"value\", value)\r\n    }\r\n    _revertChanges() {\r\n        this._loadMaskValue();\r\n        this._renderDisplayText(this._getDisplayedText(this._maskValue));\r\n        this._renderDateParts()\r\n    }\r\n    _renderDisplayText(text) {\r\n        super._renderDisplayText(text);\r\n        if (this._useMaskBehavior()) {\r\n            this.option(\"text\", text)\r\n        }\r\n    }\r\n    _partIncrease(step, lockOtherParts) {\r\n        this._setNewDateIfEmpty();\r\n        const {\r\n            max: max,\r\n            min: min\r\n        } = this._getActivePartLimits(lockOtherParts);\r\n        let newValue = step + this._getActivePartValue();\r\n        if (newValue > max) {\r\n            newValue = this._applyLimits(newValue, {\r\n                limitBase: min,\r\n                limitClosest: max,\r\n                max: max\r\n            })\r\n        } else if (newValue < min) {\r\n            newValue = this._applyLimits(newValue, {\r\n                limitBase: max,\r\n                limitClosest: min,\r\n                max: max\r\n            })\r\n        }\r\n        this._setActivePartValue(newValue)\r\n    }\r\n    _applyLimits(newValue, _ref2) {\r\n        let {\r\n            limitBase: limitBase,\r\n            limitClosest: limitClosest,\r\n            max: max\r\n        } = _ref2;\r\n        const delta = (newValue - limitClosest) % max;\r\n        return delta ? limitBase + delta - 1 * sign(delta) : limitClosest\r\n    }\r\n    _maskClickHandler() {\r\n        this._loadMaskValue(this._maskValue);\r\n        if (this.option(\"text\")) {\r\n            this._activePartIndex = getDatePartIndexByPosition(this._dateParts, this._caret().start);\r\n            if (!this._isAllSelected()) {\r\n                this._clearSearchValue();\r\n                if (isDefined(this._activePartIndex)) {\r\n                    this._caret(this._getActivePartProp(\"caret\"))\r\n                } else {\r\n                    this._selectLastPart()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _maskCompositionEndHandler(e) {\r\n        this._input().val(this._getDisplayedText(this._maskValue));\r\n        this._selectNextPart();\r\n        this._maskInputHandler = () => {\r\n            this._renderSelectedPart()\r\n        }\r\n    }\r\n    _maskPasteHandler(e) {\r\n        const newText = this._replaceSelectedText(this.option(\"text\"), this._caret(), clipboardText(e));\r\n        const date = dateLocalization.parse(newText, this._getFormatPattern());\r\n        if (date && this._isDateValid(date)) {\r\n            this._maskValue = date;\r\n            this._renderDisplayText(this._getDisplayedText(this._maskValue));\r\n            this._renderDateParts();\r\n            this._selectNextPart()\r\n        }\r\n        e.preventDefault()\r\n    }\r\n    _isDateValid(date) {\r\n        return isDate(date) && !isNaN(date)\r\n    }\r\n    _isValueDirty() {\r\n        const value = this.dateOption(\"value\");\r\n        return (this._maskValue && this._maskValue.getTime()) !== (value && value.getTime())\r\n    }\r\n    _fireChangeEvent() {\r\n        this._clearSearchValue();\r\n        if (this._isValueDirty()) {\r\n            eventsEngine.trigger(this._input(), \"change\")\r\n        }\r\n    }\r\n    _enterHandler() {\r\n        this._fireChangeEvent();\r\n        this._selectNextPart(1)\r\n    }\r\n    _focusOutHandler(e) {\r\n        const shouldFireChangeEvent = this._useMaskBehavior() && !e.isDefaultPrevented();\r\n        if (shouldFireChangeEvent) {\r\n            this._fireChangeEvent();\r\n            super._focusOutHandler(e);\r\n            this._selectFirstPart()\r\n        } else {\r\n            super._focusOutHandler(e)\r\n        }\r\n    }\r\n    _valueChangeEventHandler(e) {\r\n        const text = this.option(\"text\");\r\n        if (this._useMaskBehavior()) {\r\n            this._saveValueChangeEvent(e);\r\n            if (!text) {\r\n                this._maskValue = null\r\n            } else if (null === this._maskValue) {\r\n                this._loadMaskValue(text)\r\n            }\r\n            this._saveMaskValue()\r\n        } else {\r\n            super._valueChangeEventHandler(e)\r\n        }\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"useMaskBehavior\":\r\n                this._renderMask();\r\n                break;\r\n            case \"displayFormat\":\r\n            case \"mode\":\r\n                super._optionChanged(args);\r\n                this._renderMask();\r\n                break;\r\n            case \"value\":\r\n                this._loadMaskValue();\r\n                super._optionChanged(args);\r\n                this._renderDateParts();\r\n                break;\r\n            case \"emptyDateValue\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _clearMaskState() {\r\n        this._clearSearchValue();\r\n        delete this._dateParts;\r\n        delete this._activePartIndex;\r\n        delete this._maskValue\r\n    }\r\n    clear() {\r\n        this._clearMaskState();\r\n        this._activePartIndex = 0;\r\n        super.clear()\r\n    }\r\n    _clean() {\r\n        super._clean();\r\n        this._detachMaskEvents();\r\n        this._clearMaskState()\r\n    }\r\n}\r\nexport default DateBoxMask;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}