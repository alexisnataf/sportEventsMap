{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/license/byte_utils.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nexport function base64ToBytes(base64) {\n  return new Uint8Array(atob(base64).split(\"\").map(s => s.charCodeAt(0)));\n}\nexport function hexToBytes(string) {\n  var _string$match;\n  return new Uint8Array((null === (_string$match = string.match(/.{1,2}/g)) || void 0 === _string$match ? void 0 : _string$match.map(byte => parseInt(byte, 16))) ?? []);\n}\nexport function stringToBytes(string) {\n  const bytes = new Uint8Array(string.length);\n  for (let k = 0; k < string.length; k += 1) {\n    bytes[k] = 255 & string.charCodeAt(k);\n  }\n  return bytes;\n}\nexport function wordsToBytes(words) {\n  const bytes = new Uint8Array(4 * words.length);\n  for (let k = 0; k < bytes.length; k += 1) {\n    bytes[k] = words[k >> 2] >>> 8 * (3 - k % 4);\n  }\n  return bytes;\n}\nexport function bytesToWords(bytes) {\n  const words = new Uint32Array(1 + (bytes.length - 1 >> 2));\n  for (let k = 0; k < bytes.length; k += 1) {\n    words[k >> 2] |= bytes[k] << 8 * (3 - k % 4);\n  }\n  return words;\n}\nexport function wordsToHex(words) {\n  return [...words].map(w => w.toString(16).padStart(8, \"0\")).join(\"\");\n}\nexport function bytesToHex(bytes) {\n  return [...bytes].map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n}\nexport function leftRotate(x, n) {\n  return (x << n | x >>> 32 - n) >>> 0;\n}\nexport function concatBytes(a, b) {\n  const result = new Uint8Array(a.length + b.length);\n  result.set(a, 0);\n  result.set(b, a.length);\n  return result;\n}","map":{"version":3,"names":["base64ToBytes","base64","Uint8Array","atob","split","map","s","charCodeAt","hexToBytes","string","_string$match","match","byte","parseInt","stringToBytes","bytes","length","k","wordsToBytes","words","bytesToWords","Uint32Array","wordsToHex","w","toString","padStart","join","bytesToHex","b","leftRotate","x","n","concatBytes","a","result","set"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/license/byte_utils.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/license/byte_utils.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nexport function base64ToBytes(base64) {\r\n    return new Uint8Array(atob(base64).split(\"\").map((s => s.charCodeAt(0))))\r\n}\r\nexport function hexToBytes(string) {\r\n    var _string$match;\r\n    return new Uint8Array((null === (_string$match = string.match(/.{1,2}/g)) || void 0 === _string$match ? void 0 : _string$match.map((byte => parseInt(byte, 16)))) ?? [])\r\n}\r\nexport function stringToBytes(string) {\r\n    const bytes = new Uint8Array(string.length);\r\n    for (let k = 0; k < string.length; k += 1) {\r\n        bytes[k] = 255 & string.charCodeAt(k)\r\n    }\r\n    return bytes\r\n}\r\nexport function wordsToBytes(words) {\r\n    const bytes = new Uint8Array(4 * words.length);\r\n    for (let k = 0; k < bytes.length; k += 1) {\r\n        bytes[k] = words[k >> 2] >>> 8 * (3 - k % 4)\r\n    }\r\n    return bytes\r\n}\r\nexport function bytesToWords(bytes) {\r\n    const words = new Uint32Array(1 + (bytes.length - 1 >> 2));\r\n    for (let k = 0; k < bytes.length; k += 1) {\r\n        words[k >> 2] |= bytes[k] << 8 * (3 - k % 4)\r\n    }\r\n    return words\r\n}\r\nexport function wordsToHex(words) {\r\n    return [...words].map((w => w.toString(16).padStart(8, \"0\"))).join(\"\")\r\n}\r\nexport function bytesToHex(bytes) {\r\n    return [...bytes].map((b => b.toString(16).padStart(2, \"0\"))).join(\"\")\r\n}\r\nexport function leftRotate(x, n) {\r\n    return (x << n | x >>> 32 - n) >>> 0\r\n}\r\nexport function concatBytes(a, b) {\r\n    const result = new Uint8Array(a.length + b.length);\r\n    result.set(a, 0);\r\n    result.set(b, a.length);\r\n    return result\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}