{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/calendar/m_calendar.base_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { name as clickEventName } from \"../../../common/core/events/click\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { start as hoverStartEventName } from \"../../../common/core/events/hover\";\nimport { addNamespace } from \"../../../common/core/events/utils/index\";\nimport dateLocalization from \"../../../common/core/localization/date\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport Class from \"../../../core/class\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { data as elementData } from \"../../../core/element_data\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport coreDateUtils from \"../../../core/utils/date\";\nimport dateSerialization from \"../../../core/utils/date_serialization\";\nimport Widget from \"../../core/widget/widget\";\nconst CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\nconst CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\nconst CALENDAR_CELL_START_CLASS = \"dx-calendar-cell-start\";\nconst CALENDAR_CELL_END_CLASS = \"dx-calendar-cell-end\";\nconst CALENDAR_CELL_START_IN_ROW_CLASS = \"dx-calendar-cell-start-in-row\";\nconst CALENDAR_CELL_END_IN_ROW_CLASS = \"dx-calendar-cell-end-in-row\";\nconst CALENDAR_WEEK_NUMBER_CELL_CLASS = \"dx-calendar-week-number-cell\";\nconst CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\";\nconst CALENDAR_TODAY_CLASS = \"dx-calendar-today\";\nconst CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\";\nconst CALENDAR_CELL_IN_RANGE_CLASS = \"dx-calendar-cell-in-range\";\nconst CALENDAR_CELL_RANGE_HOVER_CLASS = \"dx-calendar-cell-range-hover\";\nconst CALENDAR_CELL_RANGE_HOVER_START_CLASS = \"dx-calendar-cell-range-hover-start\";\nconst CALENDAR_CELL_RANGE_HOVER_END_CLASS = \"dx-calendar-cell-range-hover-end\";\nconst CALENDAR_RANGE_START_DATE_CLASS = \"dx-calendar-range-start-date\";\nconst CALENDAR_RANGE_END_DATE_CLASS = \"dx-calendar-range-end-date\";\nconst CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\";\nconst NOT_WEEK_CELL_SELECTOR = \"td:not(.dx-calendar-week-number-cell)\";\nconst CALENDAR_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxCalendar\");\nconst CALENDAR_DXHOVERSTART_EVENT_NAME = addNamespace(hoverStartEventName, \"dxCalendar\");\nconst CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\nconst DAY_INTERVAL = 864e5;\nconst CURRENT_DATE_TEXT = {\n  month: messageLocalization.format(\"dxCalendar-currentDay\"),\n  year: messageLocalization.format(\"dxCalendar-currentMonth\"),\n  decade: messageLocalization.format(\"dxCalendar-currentYear\"),\n  century: messageLocalization.format(\"dxCalendar-currentYearRange\")\n};\nconst ARIA_LABEL_DATE_FORMAT = \"date\";\nconst SELECTION_MODE = {\n  single: \"single\",\n  multiple: \"multiple\",\n  range: \"range\"\n};\nclass BaseView extends Widget {\n  _getViewName() {\n    return \"base\";\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      date: new Date(),\n      focusStateEnabled: false,\n      cellTemplate: null,\n      disabledDates: null,\n      onCellClick: null,\n      onCellHover: null,\n      onWeekNumberClick: null,\n      rowCount: 3,\n      colCount: 4,\n      allowValueSelection: true,\n      _todayDate: () => new Date()\n    });\n  }\n  _initMarkup() {\n    super._initMarkup();\n    this._renderImpl();\n  }\n  _renderImpl() {\n    this.$element().append(this._createTable());\n    this._createDisabledDatesHandler();\n    this._renderBody();\n    this._renderContouredDate();\n    this._renderValue();\n    this._renderRange();\n    this._renderEvents();\n    this._updateTableAriaLabel();\n  }\n  _getLocalizedWidgetName() {\n    const localizedWidgetName = messageLocalization.format(\"dxCalendar-ariaWidgetName\");\n    return localizedWidgetName;\n  }\n  _getSingleModeAriaLabel() {\n    const {\n      value: value\n    } = this.option();\n    const localizedWidgetName = this._getLocalizedWidgetName();\n    const formattedDate = dateLocalization.format(value, \"date\");\n    const selectedDatesText = messageLocalization.format(\"dxCalendar-selectedDate\", formattedDate);\n    const ariaLabel = `${localizedWidgetName}. ${selectedDatesText}`;\n    return ariaLabel;\n  }\n  _getRangeModeAriaLabel() {\n    const {\n      value: value\n    } = this.option();\n    const localizedWidgetName = this._getLocalizedWidgetName();\n    const [startDate, endDate] = value;\n    const formattedStartDate = dateLocalization.format(startDate, \"date\");\n    const formattedEndDate = dateLocalization.format(endDate, \"date\");\n    const selectedDatesText = startDate && endDate ? messageLocalization.format(\"dxCalendar-selectedDateRange\", formattedStartDate, formattedEndDate) : messageLocalization.format(\"dxCalendar-selectedDate\", formattedStartDate ?? formattedEndDate);\n    const ariaLabel = `${localizedWidgetName}. ${selectedDatesText}`;\n    return ariaLabel;\n  }\n  _getMultipleModeAriaLabel() {\n    const localizedWidgetName = this._getLocalizedWidgetName();\n    const selectedRangesText = this._getMultipleRangesText();\n    const ariaLabel = `${localizedWidgetName}. ${selectedRangesText}`;\n    return ariaLabel;\n  }\n  _getMultipleRangesText() {\n    const {\n      value: value\n    } = this.option();\n    const ranges = coreDateUtils.getRangesByDates(value.map(date => new Date(date)));\n    if (ranges.length > 2) {\n      const dateRangeCountText = messageLocalization.format(\"dxCalendar-selectedDateRangeCount\", ranges.length);\n      return dateRangeCountText;\n    }\n    const selectedDatesText = messageLocalization.format(\"dxCalendar-selectedDates\");\n    const rangesText = ranges.map(range => this._getRangeText(range)).join(\", \");\n    const result = `${selectedDatesText}: ${rangesText}`;\n    return result;\n  }\n  _getRangeText(range) {\n    const [startDate, endDate] = range;\n    const formattedStartDate = dateLocalization.format(startDate, \"date\");\n    const formattedEndDate = dateLocalization.format(endDate, \"date\");\n    const selectedDatesText = startDate && endDate ? messageLocalization.format(\"dxCalendar-selectedMultipleDateRange\", formattedStartDate, formattedEndDate) : formattedStartDate;\n    return selectedDatesText;\n  }\n  _getTableAriaLabel() {\n    const {\n      value: value,\n      selectionMode: selectionMode\n    } = this.option();\n    const isValueEmpty = !value || Array.isArray(value) && !value.filter(Boolean).length;\n    if (isValueEmpty) {\n      return this._getLocalizedWidgetName();\n    }\n    switch (selectionMode) {\n      case SELECTION_MODE.single:\n        return this._getSingleModeAriaLabel();\n      case SELECTION_MODE.range:\n        return this._getRangeModeAriaLabel();\n      case SELECTION_MODE.multiple:\n        return this._getMultipleModeAriaLabel();\n    }\n  }\n  _updateTableAriaLabel() {\n    const label = this._getTableAriaLabel();\n    this.setAria({\n      label: label\n    }, this._$table);\n  }\n  _createTable() {\n    this._$table = $(\"<table>\");\n    this.setAria({\n      role: \"grid\"\n    }, this._$table);\n    return this._$table;\n  }\n  _renderBody() {\n    this.$body = $(\"<tbody>\").appendTo(this._$table);\n    const rowData = {\n      cellDate: this._getFirstCellData(),\n      prevCellDate: null\n    };\n    const {\n      rowCount: rowsCount,\n      colCount: colsCount\n    } = this.option();\n    for (let rowIndex = 0, rowCount = rowsCount; rowIndex < rowCount; rowIndex++) {\n      rowData.row = this._createRow();\n      for (let colIndex = 0, colCount = colsCount; colIndex < colCount; colIndex++) {\n        this._renderCell(rowData, colIndex);\n      }\n      this._renderWeekNumberCell(rowData);\n    }\n  }\n  _renderWeekNumberCell(rowData) {}\n  _createRow() {\n    const row = domAdapter.createElement(\"tr\");\n    this.setAria(\"role\", \"row\", $(row));\n    this.$body.get(0).appendChild(row);\n    return row;\n  }\n  _createCell(cellDate, cellIndex) {\n    const cell = domAdapter.createElement(\"td\");\n    const $cell = $(cell);\n    cell.className = this._getClassNameByDate(cellDate, cellIndex);\n    cell.setAttribute(\"data-value\", dateSerialization.serializeDate(cellDate, coreDateUtils.getShortDateFormat()));\n    elementData(cell, \"dxDateValueKey\", cellDate);\n    this.setAria({\n      role: \"gridcell\",\n      selected: false,\n      label: this.getCellAriaLabel(cellDate)\n    }, $cell);\n    return {\n      cell: cell,\n      $cell: $cell\n    };\n  }\n  _renderCell(params, cellIndex) {\n    const {\n      cellDate: cellDate,\n      prevCellDate: prevCellDate,\n      row: row\n    } = params;\n    if (prevCellDate) {\n      coreDateUtils.fixTimezoneGap(prevCellDate, cellDate);\n    }\n    params.prevCellDate = cellDate;\n    const {\n      cell: cell,\n      $cell: $cell\n    } = this._createCell(cellDate, cellIndex);\n    const cellTemplate = this.option(\"cellTemplate\");\n    $(row).append(cell);\n    if (cellTemplate) {\n      cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell));\n    } else {\n      cell.innerHTML = this._getCellText(cellDate);\n    }\n    params.cellDate = this._getNextCellData(cellDate);\n  }\n  _getClassNameByDate(cellDate, cellIndex) {\n    let className = \"dx-calendar-cell\";\n    if (this._isTodayCell(cellDate)) {\n      className += \" dx-calendar-today\";\n    }\n    if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {\n      className += \" dx-calendar-empty-cell\";\n    }\n    if (this._isOtherView(cellDate)) {\n      className += \" dx-calendar-other-view\";\n    }\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    if (selectionMode === SELECTION_MODE.range) {\n      if (0 === cellIndex) {\n        className += \" dx-calendar-cell-start-in-row\";\n      }\n      const {\n        colCount: colCount\n      } = this.option();\n      if (cellIndex === colCount - 1) {\n        className += \" dx-calendar-cell-end-in-row\";\n      }\n      if (this._isStartDayOfMonth(cellDate)) {\n        className += \" dx-calendar-cell-start\";\n      }\n      if (this._isEndDayOfMonth(cellDate)) {\n        className += \" dx-calendar-cell-end\";\n      }\n    }\n    return className;\n  }\n  _prepareCellTemplateData(cellDate, cellIndex, $cell) {\n    const isDateCell = cellDate instanceof Date;\n    const text = isDateCell ? this._getCellText(cellDate) : cellDate;\n    const date = isDateCell ? cellDate : void 0;\n    const view = this._getViewName();\n    return {\n      model: {\n        text: text,\n        date: date,\n        view: view\n      },\n      container: getPublicElement($cell),\n      index: cellIndex\n    };\n  }\n  _renderEvents() {\n    this._createCellClickAction();\n    eventsEngine.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\n    eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, NOT_WEEK_CELL_SELECTOR, e => {\n      if (!$(e.currentTarget).hasClass(\"dx-calendar-empty-cell\")) {\n        this._cellClickAction({\n          event: e,\n          value: $(e.currentTarget).data(\"dxDateValueKey\")\n        });\n      }\n    });\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    eventsEngine.off(this._$table, CALENDAR_DXHOVERSTART_EVENT_NAME);\n    if (selectionMode === SELECTION_MODE.range) {\n      this._createCellHoverAction();\n      eventsEngine.on(this._$table, CALENDAR_DXHOVERSTART_EVENT_NAME, NOT_WEEK_CELL_SELECTOR, e => {\n        if (!$(e.currentTarget).hasClass(\"dx-calendar-empty-cell\")) {\n          this._cellHoverAction({\n            event: e,\n            value: $(e.currentTarget).data(\"dxDateValueKey\")\n          });\n        }\n      });\n    }\n    if (selectionMode !== SELECTION_MODE.single) {\n      this._createWeekNumberCellClickAction();\n      eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \".dx-calendar-week-number-cell\", e => {\n        const $row = $(e.currentTarget).closest(\"tr\");\n        const firstDateInRow = $row.find(\".dx-calendar-cell\").first().data(\"dxDateValueKey\");\n        const lastDateInRow = $row.find(\".dx-calendar-cell\").last().data(\"dxDateValueKey\");\n        const rowDates = [...coreDateUtils.getDatesOfInterval(firstDateInRow, lastDateInRow, 864e5), lastDateInRow];\n        this._weekNumberCellClickAction({\n          event: e,\n          rowDates: rowDates\n        });\n      });\n    }\n  }\n  _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n  }\n  _createCellHoverAction() {\n    this._cellHoverAction = this._createActionByOption(\"onCellHover\");\n  }\n  _createWeekNumberCellClickAction() {\n    this._weekNumberCellClickAction = this._createActionByOption(\"onWeekNumberClick\");\n  }\n  _createDisabledDatesHandler() {\n    const {\n      disabledDates: disabledDates\n    } = this.option();\n    this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop;\n  }\n  _getDefaultDisabledDatesHandler(disabledDates) {\n    return noop;\n  }\n  _isTodayCell(cellDate) {\n    Class.abstract();\n  }\n  _isDateOutOfRange(cellDate) {\n    Class.abstract();\n  }\n  isDateDisabled(cellDate) {\n    const dateParts = {\n      date: cellDate,\n      view: this._getViewName()\n    };\n    return this._disabledDatesHandler(dateParts);\n  }\n  _isOtherView(cellDate) {\n    Class.abstract();\n  }\n  _isStartDayOfMonth(cellDate) {\n    Class.abstract();\n  }\n  _isEndDayOfMonth(cellDate) {\n    Class.abstract();\n  }\n  _getCellText(cellDate) {\n    Class.abstract();\n  }\n  _getFirstCellData() {\n    Class.abstract();\n  }\n  _getNextCellData(date) {\n    Class.abstract();\n  }\n  _renderContouredDate(contouredDate) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n    contouredDate = contouredDate || this.option(\"contouredDate\");\n    const $oldContouredCell = this._getContouredCell();\n    const $newContouredCell = this._getCellByDate(contouredDate);\n    $oldContouredCell.removeClass(\"dx-calendar-contoured-date\");\n    if (contouredDate) {\n      $newContouredCell.addClass(\"dx-calendar-contoured-date\");\n    }\n  }\n  _getContouredCell() {\n    return this._$table.find(\".dx-calendar-contoured-date\");\n  }\n  _renderValue() {\n    if (!this.option(\"allowValueSelection\")) {\n      return;\n    }\n    let value = this.option(\"value\");\n    if (!Array.isArray(value)) {\n      value = [value];\n    }\n    this._updateSelectedClass(value);\n  }\n  _updateSelectedClass(value) {\n    var _this$_$selectedCells;\n    if (this._isRangeMode() && !this._isMonthView()) {\n      return;\n    }\n    null === (_this$_$selectedCells = this._$selectedCells) || void 0 === _this$_$selectedCells || _this$_$selectedCells.forEach($cell => {\n      $cell.removeClass(\"dx-calendar-selected-date\");\n    });\n    this._$selectedCells = value.map(value => this._getCellByDate(value));\n    this._$selectedCells.forEach($cell => {\n      $cell.addClass(\"dx-calendar-selected-date\");\n    });\n  }\n  _renderRange() {\n    var _this$_$rangeCells, _this$_$hoveredRangeC, _this$_$rangeStartHov, _this$_$rangeEndHover, _this$_$rangeStartDat, _this$_$rangeEndDateC, _this$_$rangeStartDat2, _this$_$rangeEndDateC2;\n    const {\n      allowValueSelection: allowValueSelection,\n      value: value,\n      range: range\n    } = this.option();\n    if (!allowValueSelection || !this._isRangeMode() || !this._isMonthView()) {\n      return;\n    }\n    null === (_this$_$rangeCells = this._$rangeCells) || void 0 === _this$_$rangeCells || _this$_$rangeCells.forEach($cell => {\n      $cell.removeClass(\"dx-calendar-cell-in-range\");\n    });\n    null === (_this$_$hoveredRangeC = this._$hoveredRangeCells) || void 0 === _this$_$hoveredRangeC || _this$_$hoveredRangeC.forEach($cell => {\n      $cell.removeClass(\"dx-calendar-cell-range-hover\");\n    });\n    null === (_this$_$rangeStartHov = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov || _this$_$rangeStartHov.removeClass(\"dx-calendar-cell-range-hover-start\");\n    null === (_this$_$rangeEndHover = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover || _this$_$rangeEndHover.removeClass(\"dx-calendar-cell-range-hover-end\");\n    null === (_this$_$rangeStartDat = this._$rangeStartDateCell) || void 0 === _this$_$rangeStartDat || _this$_$rangeStartDat.removeClass(\"dx-calendar-range-start-date\");\n    null === (_this$_$rangeEndDateC = this._$rangeEndDateCell) || void 0 === _this$_$rangeEndDateC || _this$_$rangeEndDateC.removeClass(\"dx-calendar-range-end-date\");\n    this._$rangeCells = range.map(value => this._getCellByDate(value));\n    this._$rangeStartDateCell = this._getCellByDate(value[0]);\n    this._$rangeEndDateCell = this._getCellByDate(value[1]);\n    this._$rangeCells.forEach($cell => {\n      $cell.addClass(\"dx-calendar-cell-in-range\");\n    });\n    null === (_this$_$rangeStartDat2 = this._$rangeStartDateCell) || void 0 === _this$_$rangeStartDat2 || _this$_$rangeStartDat2.addClass(\"dx-calendar-range-start-date\");\n    null === (_this$_$rangeEndDateC2 = this._$rangeEndDateCell) || void 0 === _this$_$rangeEndDateC2 || _this$_$rangeEndDateC2.addClass(\"dx-calendar-range-end-date\");\n  }\n  _renderHoveredRange() {\n    var _this$_$hoveredRangeC2, _this$_$rangeStartHov2, _this$_$rangeEndHover2, _this$_$rangeStartHov3, _this$_$rangeEndHover3;\n    const {\n      allowValueSelection: allowValueSelection,\n      hoveredRange: hoveredRange\n    } = this.option();\n    if (!allowValueSelection || !this._isRangeMode() || !this._isMonthView()) {\n      return;\n    }\n    null === (_this$_$hoveredRangeC2 = this._$hoveredRangeCells) || void 0 === _this$_$hoveredRangeC2 || _this$_$hoveredRangeC2.forEach($cell => {\n      $cell.removeClass(\"dx-calendar-cell-range-hover\");\n    });\n    null === (_this$_$rangeStartHov2 = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov2 || _this$_$rangeStartHov2.removeClass(\"dx-calendar-cell-range-hover-start\");\n    null === (_this$_$rangeEndHover2 = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover2 || _this$_$rangeEndHover2.removeClass(\"dx-calendar-cell-range-hover-end\");\n    this._$hoveredRangeCells = hoveredRange.map(value => this._getCellByDate(value));\n    this._$rangeStartHoverCell = this._getCellByDate(hoveredRange[0]);\n    this._$rangeEndHoverCell = this._getCellByDate(hoveredRange[hoveredRange.length - 1]);\n    this._$hoveredRangeCells.forEach($cell => {\n      $cell.addClass(\"dx-calendar-cell-range-hover\");\n    });\n    null === (_this$_$rangeStartHov3 = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov3 || _this$_$rangeStartHov3.addClass(\"dx-calendar-cell-range-hover-start\");\n    null === (_this$_$rangeEndHover3 = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover3 || _this$_$rangeEndHover3.addClass(\"dx-calendar-cell-range-hover-end\");\n  }\n  _isMonthView() {\n    const {\n      zoomLevel: zoomLevel\n    } = this.option();\n    return \"month\" === zoomLevel;\n  }\n  _isRangeMode() {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    return selectionMode === SELECTION_MODE.range;\n  }\n  _getCurrentDateFormat() {\n    return null;\n  }\n  getCellAriaLabel(date) {\n    const viewName = this._getViewName();\n    const isToday = this._isTodayCell(date);\n    const format = this._getCurrentDateFormat();\n    const dateRangeText = format ? dateLocalization.format(date, format) : this._getCellText(date);\n    const ariaLabel = isToday ? `${dateRangeText}. ${CURRENT_DATE_TEXT[viewName]}` : dateRangeText;\n    return ariaLabel;\n  }\n  _getFirstAvailableDate() {\n    let date = this.option(\"date\");\n    const min = this.option(\"min\");\n    date = coreDateUtils.getViewFirstCellDate(this._getViewName(), date);\n    return new Date(min && date < min ? min : date);\n  }\n  _getCellByDate(contouredDate) {\n    Class.abstract();\n  }\n  isBoundary(date) {\n    Class.abstract();\n  }\n  _optionChanged(args) {\n    const {\n      name: name,\n      value: value\n    } = args;\n    switch (name) {\n      case \"value\":\n        this._renderValue();\n        this._updateTableAriaLabel();\n        break;\n      case \"range\":\n        this._renderRange();\n        break;\n      case \"hoveredRange\":\n        this._renderHoveredRange();\n        break;\n      case \"contouredDate\":\n        this._renderContouredDate(value);\n        break;\n      case \"onCellClick\":\n        this._createCellClickAction();\n        break;\n      case \"onCellHover\":\n        this._createCellHoverAction();\n        break;\n      case \"min\":\n      case \"max\":\n      case \"disabledDates\":\n      case \"cellTemplate\":\n      case \"selectionMode\":\n        this._invalidate();\n        break;\n      case \"_todayDate\":\n        this._renderBody();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n}\nexport default BaseView;","map":{"version":3,"names":["_extends","name","clickEventName","eventsEngine","start","hoverStartEventName","addNamespace","dateLocalization","messageLocalization","Class","domAdapter","getPublicElement","data","elementData","$","noop","coreDateUtils","dateSerialization","Widget","CALENDAR_OTHER_VIEW_CLASS","CALENDAR_CELL_CLASS","CALENDAR_CELL_START_CLASS","CALENDAR_CELL_END_CLASS","CALENDAR_CELL_START_IN_ROW_CLASS","CALENDAR_CELL_END_IN_ROW_CLASS","CALENDAR_WEEK_NUMBER_CELL_CLASS","CALENDAR_EMPTY_CELL_CLASS","CALENDAR_TODAY_CLASS","CALENDAR_SELECTED_DATE_CLASS","CALENDAR_CELL_IN_RANGE_CLASS","CALENDAR_CELL_RANGE_HOVER_CLASS","CALENDAR_CELL_RANGE_HOVER_START_CLASS","CALENDAR_CELL_RANGE_HOVER_END_CLASS","CALENDAR_RANGE_START_DATE_CLASS","CALENDAR_RANGE_END_DATE_CLASS","CALENDAR_CONTOURED_DATE_CLASS","NOT_WEEK_CELL_SELECTOR","CALENDAR_DXCLICK_EVENT_NAME","CALENDAR_DXHOVERSTART_EVENT_NAME","CALENDAR_DATE_VALUE_KEY","DAY_INTERVAL","CURRENT_DATE_TEXT","month","format","year","decade","century","ARIA_LABEL_DATE_FORMAT","SELECTION_MODE","single","multiple","range","BaseView","_getViewName","_getDefaultOptions","date","Date","focusStateEnabled","cellTemplate","disabledDates","onCellClick","onCellHover","onWeekNumberClick","rowCount","colCount","allowValueSelection","_todayDate","_initMarkup","_renderImpl","$element","append","_createTable","_createDisabledDatesHandler","_renderBody","_renderContouredDate","_renderValue","_renderRange","_renderEvents","_updateTableAriaLabel","_getLocalizedWidgetName","localizedWidgetName","_getSingleModeAriaLabel","value","option","formattedDate","selectedDatesText","ariaLabel","_getRangeModeAriaLabel","startDate","endDate","formattedStartDate","formattedEndDate","_getMultipleModeAriaLabel","selectedRangesText","_getMultipleRangesText","ranges","getRangesByDates","map","length","dateRangeCountText","rangesText","_getRangeText","join","result","_getTableAriaLabel","selectionMode","isValueEmpty","Array","isArray","filter","Boolean","label","setAria","_$table","role","$body","appendTo","rowData","cellDate","_getFirstCellData","prevCellDate","rowsCount","colsCount","rowIndex","row","_createRow","colIndex","_renderCell","_renderWeekNumberCell","createElement","get","appendChild","_createCell","cellIndex","cell","$cell","className","_getClassNameByDate","setAttribute","serializeDate","getShortDateFormat","selected","getCellAriaLabel","params","fixTimezoneGap","render","_prepareCellTemplateData","innerHTML","_getCellText","_getNextCellData","_isTodayCell","_isDateOutOfRange","isDateDisabled","_isOtherView","_isStartDayOfMonth","_isEndDayOfMonth","isDateCell","text","view","model","container","index","_createCellClickAction","off","on","e","currentTarget","hasClass","_cellClickAction","event","_createCellHoverAction","_cellHoverAction","_createWeekNumberCellClickAction","$row","closest","firstDateInRow","find","first","lastDateInRow","last","rowDates","getDatesOfInterval","_weekNumberCellClickAction","_createActionByOption","_disabledDatesHandler","_getDefaultDisabledDatesHandler","abstract","dateParts","contouredDate","$oldContouredCell","_getContouredCell","$newContouredCell","_getCellByDate","removeClass","addClass","_updateSelectedClass","_this$_$selectedCells","_isRangeMode","_isMonthView","_$selectedCells","forEach","_this$_$rangeCells","_this$_$hoveredRangeC","_this$_$rangeStartHov","_this$_$rangeEndHover","_this$_$rangeStartDat","_this$_$rangeEndDateC","_this$_$rangeStartDat2","_this$_$rangeEndDateC2","_$rangeCells","_$hoveredRangeCells","_$rangeStartHoverCell","_$rangeEndHoverCell","_$rangeStartDateCell","_$rangeEndDateCell","_renderHoveredRange","_this$_$hoveredRangeC2","_this$_$rangeStartHov2","_this$_$rangeEndHover2","_this$_$rangeStartHov3","_this$_$rangeEndHover3","hoveredRange","zoomLevel","_getCurrentDateFormat","viewName","isToday","dateRangeText","_getFirstAvailableDate","min","getViewFirstCellDate","isBoundary","_optionChanged","args","_invalidate"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/calendar/m_calendar.base_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/calendar/m_calendar.base_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    start as hoverStartEventName\r\n} from \"../../../common/core/events/hover\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../common/core/events/utils/index\";\r\nimport dateLocalization from \"../../../common/core/localization/date\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport Class from \"../../../core/class\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport {\r\n    data as elementData\r\n} from \"../../../core/element_data\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport coreDateUtils from \"../../../core/utils/date\";\r\nimport dateSerialization from \"../../../core/utils/date_serialization\";\r\nimport Widget from \"../../core/widget/widget\";\r\nconst CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\r\nconst CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\r\nconst CALENDAR_CELL_START_CLASS = \"dx-calendar-cell-start\";\r\nconst CALENDAR_CELL_END_CLASS = \"dx-calendar-cell-end\";\r\nconst CALENDAR_CELL_START_IN_ROW_CLASS = \"dx-calendar-cell-start-in-row\";\r\nconst CALENDAR_CELL_END_IN_ROW_CLASS = \"dx-calendar-cell-end-in-row\";\r\nconst CALENDAR_WEEK_NUMBER_CELL_CLASS = \"dx-calendar-week-number-cell\";\r\nconst CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\";\r\nconst CALENDAR_TODAY_CLASS = \"dx-calendar-today\";\r\nconst CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\";\r\nconst CALENDAR_CELL_IN_RANGE_CLASS = \"dx-calendar-cell-in-range\";\r\nconst CALENDAR_CELL_RANGE_HOVER_CLASS = \"dx-calendar-cell-range-hover\";\r\nconst CALENDAR_CELL_RANGE_HOVER_START_CLASS = \"dx-calendar-cell-range-hover-start\";\r\nconst CALENDAR_CELL_RANGE_HOVER_END_CLASS = \"dx-calendar-cell-range-hover-end\";\r\nconst CALENDAR_RANGE_START_DATE_CLASS = \"dx-calendar-range-start-date\";\r\nconst CALENDAR_RANGE_END_DATE_CLASS = \"dx-calendar-range-end-date\";\r\nconst CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\";\r\nconst NOT_WEEK_CELL_SELECTOR = \"td:not(.dx-calendar-week-number-cell)\";\r\nconst CALENDAR_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxCalendar\");\r\nconst CALENDAR_DXHOVERSTART_EVENT_NAME = addNamespace(hoverStartEventName, \"dxCalendar\");\r\nconst CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\r\nconst DAY_INTERVAL = 864e5;\r\nconst CURRENT_DATE_TEXT = {\r\n    month: messageLocalization.format(\"dxCalendar-currentDay\"),\r\n    year: messageLocalization.format(\"dxCalendar-currentMonth\"),\r\n    decade: messageLocalization.format(\"dxCalendar-currentYear\"),\r\n    century: messageLocalization.format(\"dxCalendar-currentYearRange\")\r\n};\r\nconst ARIA_LABEL_DATE_FORMAT = \"date\";\r\nconst SELECTION_MODE = {\r\n    single: \"single\",\r\n    multiple: \"multiple\",\r\n    range: \"range\"\r\n};\r\nclass BaseView extends Widget {\r\n    _getViewName() {\r\n        return \"base\"\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            date: new Date,\r\n            focusStateEnabled: false,\r\n            cellTemplate: null,\r\n            disabledDates: null,\r\n            onCellClick: null,\r\n            onCellHover: null,\r\n            onWeekNumberClick: null,\r\n            rowCount: 3,\r\n            colCount: 4,\r\n            allowValueSelection: true,\r\n            _todayDate: () => new Date\r\n        })\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._renderImpl()\r\n    }\r\n    _renderImpl() {\r\n        this.$element().append(this._createTable());\r\n        this._createDisabledDatesHandler();\r\n        this._renderBody();\r\n        this._renderContouredDate();\r\n        this._renderValue();\r\n        this._renderRange();\r\n        this._renderEvents();\r\n        this._updateTableAriaLabel()\r\n    }\r\n    _getLocalizedWidgetName() {\r\n        const localizedWidgetName = messageLocalization.format(\"dxCalendar-ariaWidgetName\");\r\n        return localizedWidgetName\r\n    }\r\n    _getSingleModeAriaLabel() {\r\n        const {\r\n            value: value\r\n        } = this.option();\r\n        const localizedWidgetName = this._getLocalizedWidgetName();\r\n        const formattedDate = dateLocalization.format(value, \"date\");\r\n        const selectedDatesText = messageLocalization.format(\"dxCalendar-selectedDate\", formattedDate);\r\n        const ariaLabel = `${localizedWidgetName}. ${selectedDatesText}`;\r\n        return ariaLabel\r\n    }\r\n    _getRangeModeAriaLabel() {\r\n        const {\r\n            value: value\r\n        } = this.option();\r\n        const localizedWidgetName = this._getLocalizedWidgetName();\r\n        const [startDate, endDate] = value;\r\n        const formattedStartDate = dateLocalization.format(startDate, \"date\");\r\n        const formattedEndDate = dateLocalization.format(endDate, \"date\");\r\n        const selectedDatesText = startDate && endDate ? messageLocalization.format(\"dxCalendar-selectedDateRange\", formattedStartDate, formattedEndDate) : messageLocalization.format(\"dxCalendar-selectedDate\", formattedStartDate ?? formattedEndDate);\r\n        const ariaLabel = `${localizedWidgetName}. ${selectedDatesText}`;\r\n        return ariaLabel\r\n    }\r\n    _getMultipleModeAriaLabel() {\r\n        const localizedWidgetName = this._getLocalizedWidgetName();\r\n        const selectedRangesText = this._getMultipleRangesText();\r\n        const ariaLabel = `${localizedWidgetName}. ${selectedRangesText}`;\r\n        return ariaLabel\r\n    }\r\n    _getMultipleRangesText() {\r\n        const {\r\n            value: value\r\n        } = this.option();\r\n        const ranges = coreDateUtils.getRangesByDates(value.map((date => new Date(date))));\r\n        if (ranges.length > 2) {\r\n            const dateRangeCountText = messageLocalization.format(\"dxCalendar-selectedDateRangeCount\", ranges.length);\r\n            return dateRangeCountText\r\n        }\r\n        const selectedDatesText = messageLocalization.format(\"dxCalendar-selectedDates\");\r\n        const rangesText = ranges.map((range => this._getRangeText(range))).join(\", \");\r\n        const result = `${selectedDatesText}: ${rangesText}`;\r\n        return result\r\n    }\r\n    _getRangeText(range) {\r\n        const [startDate, endDate] = range;\r\n        const formattedStartDate = dateLocalization.format(startDate, \"date\");\r\n        const formattedEndDate = dateLocalization.format(endDate, \"date\");\r\n        const selectedDatesText = startDate && endDate ? messageLocalization.format(\"dxCalendar-selectedMultipleDateRange\", formattedStartDate, formattedEndDate) : formattedStartDate;\r\n        return selectedDatesText\r\n    }\r\n    _getTableAriaLabel() {\r\n        const {\r\n            value: value,\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        const isValueEmpty = !value || Array.isArray(value) && !value.filter(Boolean).length;\r\n        if (isValueEmpty) {\r\n            return this._getLocalizedWidgetName()\r\n        }\r\n        switch (selectionMode) {\r\n            case SELECTION_MODE.single:\r\n                return this._getSingleModeAriaLabel();\r\n            case SELECTION_MODE.range:\r\n                return this._getRangeModeAriaLabel();\r\n            case SELECTION_MODE.multiple:\r\n                return this._getMultipleModeAriaLabel()\r\n        }\r\n    }\r\n    _updateTableAriaLabel() {\r\n        const label = this._getTableAriaLabel();\r\n        this.setAria({\r\n            label: label\r\n        }, this._$table)\r\n    }\r\n    _createTable() {\r\n        this._$table = $(\"<table>\");\r\n        this.setAria({\r\n            role: \"grid\"\r\n        }, this._$table);\r\n        return this._$table\r\n    }\r\n    _renderBody() {\r\n        this.$body = $(\"<tbody>\").appendTo(this._$table);\r\n        const rowData = {\r\n            cellDate: this._getFirstCellData(),\r\n            prevCellDate: null\r\n        };\r\n        const {\r\n            rowCount: rowsCount,\r\n            colCount: colsCount\r\n        } = this.option();\r\n        for (let rowIndex = 0, rowCount = rowsCount; rowIndex < rowCount; rowIndex++) {\r\n            rowData.row = this._createRow();\r\n            for (let colIndex = 0, colCount = colsCount; colIndex < colCount; colIndex++) {\r\n                this._renderCell(rowData, colIndex)\r\n            }\r\n            this._renderWeekNumberCell(rowData)\r\n        }\r\n    }\r\n    _renderWeekNumberCell(rowData) {}\r\n    _createRow() {\r\n        const row = domAdapter.createElement(\"tr\");\r\n        this.setAria(\"role\", \"row\", $(row));\r\n        this.$body.get(0).appendChild(row);\r\n        return row\r\n    }\r\n    _createCell(cellDate, cellIndex) {\r\n        const cell = domAdapter.createElement(\"td\");\r\n        const $cell = $(cell);\r\n        cell.className = this._getClassNameByDate(cellDate, cellIndex);\r\n        cell.setAttribute(\"data-value\", dateSerialization.serializeDate(cellDate, coreDateUtils.getShortDateFormat()));\r\n        elementData(cell, \"dxDateValueKey\", cellDate);\r\n        this.setAria({\r\n            role: \"gridcell\",\r\n            selected: false,\r\n            label: this.getCellAriaLabel(cellDate)\r\n        }, $cell);\r\n        return {\r\n            cell: cell,\r\n            $cell: $cell\r\n        }\r\n    }\r\n    _renderCell(params, cellIndex) {\r\n        const {\r\n            cellDate: cellDate,\r\n            prevCellDate: prevCellDate,\r\n            row: row\r\n        } = params;\r\n        if (prevCellDate) {\r\n            coreDateUtils.fixTimezoneGap(prevCellDate, cellDate)\r\n        }\r\n        params.prevCellDate = cellDate;\r\n        const {\r\n            cell: cell,\r\n            $cell: $cell\r\n        } = this._createCell(cellDate, cellIndex);\r\n        const cellTemplate = this.option(\"cellTemplate\");\r\n        $(row).append(cell);\r\n        if (cellTemplate) {\r\n            cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell))\r\n        } else {\r\n            cell.innerHTML = this._getCellText(cellDate)\r\n        }\r\n        params.cellDate = this._getNextCellData(cellDate)\r\n    }\r\n    _getClassNameByDate(cellDate, cellIndex) {\r\n        let className = \"dx-calendar-cell\";\r\n        if (this._isTodayCell(cellDate)) {\r\n            className += \" dx-calendar-today\"\r\n        }\r\n        if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {\r\n            className += \" dx-calendar-empty-cell\"\r\n        }\r\n        if (this._isOtherView(cellDate)) {\r\n            className += \" dx-calendar-other-view\"\r\n        }\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        if (selectionMode === SELECTION_MODE.range) {\r\n            if (0 === cellIndex) {\r\n                className += \" dx-calendar-cell-start-in-row\"\r\n            }\r\n            const {\r\n                colCount: colCount\r\n            } = this.option();\r\n            if (cellIndex === colCount - 1) {\r\n                className += \" dx-calendar-cell-end-in-row\"\r\n            }\r\n            if (this._isStartDayOfMonth(cellDate)) {\r\n                className += \" dx-calendar-cell-start\"\r\n            }\r\n            if (this._isEndDayOfMonth(cellDate)) {\r\n                className += \" dx-calendar-cell-end\"\r\n            }\r\n        }\r\n        return className\r\n    }\r\n    _prepareCellTemplateData(cellDate, cellIndex, $cell) {\r\n        const isDateCell = cellDate instanceof Date;\r\n        const text = isDateCell ? this._getCellText(cellDate) : cellDate;\r\n        const date = isDateCell ? cellDate : void 0;\r\n        const view = this._getViewName();\r\n        return {\r\n            model: {\r\n                text: text,\r\n                date: date,\r\n                view: view\r\n            },\r\n            container: getPublicElement($cell),\r\n            index: cellIndex\r\n        }\r\n    }\r\n    _renderEvents() {\r\n        this._createCellClickAction();\r\n        eventsEngine.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, NOT_WEEK_CELL_SELECTOR, (e => {\r\n            if (!$(e.currentTarget).hasClass(\"dx-calendar-empty-cell\")) {\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    value: $(e.currentTarget).data(\"dxDateValueKey\")\r\n                })\r\n            }\r\n        }));\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        eventsEngine.off(this._$table, CALENDAR_DXHOVERSTART_EVENT_NAME);\r\n        if (selectionMode === SELECTION_MODE.range) {\r\n            this._createCellHoverAction();\r\n            eventsEngine.on(this._$table, CALENDAR_DXHOVERSTART_EVENT_NAME, NOT_WEEK_CELL_SELECTOR, (e => {\r\n                if (!$(e.currentTarget).hasClass(\"dx-calendar-empty-cell\")) {\r\n                    this._cellHoverAction({\r\n                        event: e,\r\n                        value: $(e.currentTarget).data(\"dxDateValueKey\")\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n        if (selectionMode !== SELECTION_MODE.single) {\r\n            this._createWeekNumberCellClickAction();\r\n            eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \".dx-calendar-week-number-cell\", (e => {\r\n                const $row = $(e.currentTarget).closest(\"tr\");\r\n                const firstDateInRow = $row.find(\".dx-calendar-cell\").first().data(\"dxDateValueKey\");\r\n                const lastDateInRow = $row.find(\".dx-calendar-cell\").last().data(\"dxDateValueKey\");\r\n                const rowDates = [...coreDateUtils.getDatesOfInterval(firstDateInRow, lastDateInRow, 864e5), lastDateInRow];\r\n                this._weekNumberCellClickAction({\r\n                    event: e,\r\n                    rowDates: rowDates\r\n                })\r\n            }))\r\n        }\r\n    }\r\n    _createCellClickAction() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\")\r\n    }\r\n    _createCellHoverAction() {\r\n        this._cellHoverAction = this._createActionByOption(\"onCellHover\")\r\n    }\r\n    _createWeekNumberCellClickAction() {\r\n        this._weekNumberCellClickAction = this._createActionByOption(\"onWeekNumberClick\")\r\n    }\r\n    _createDisabledDatesHandler() {\r\n        const {\r\n            disabledDates: disabledDates\r\n        } = this.option();\r\n        this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop\r\n    }\r\n    _getDefaultDisabledDatesHandler(disabledDates) {\r\n        return noop\r\n    }\r\n    _isTodayCell(cellDate) {\r\n        Class.abstract()\r\n    }\r\n    _isDateOutOfRange(cellDate) {\r\n        Class.abstract()\r\n    }\r\n    isDateDisabled(cellDate) {\r\n        const dateParts = {\r\n            date: cellDate,\r\n            view: this._getViewName()\r\n        };\r\n        return this._disabledDatesHandler(dateParts)\r\n    }\r\n    _isOtherView(cellDate) {\r\n        Class.abstract()\r\n    }\r\n    _isStartDayOfMonth(cellDate) {\r\n        Class.abstract()\r\n    }\r\n    _isEndDayOfMonth(cellDate) {\r\n        Class.abstract()\r\n    }\r\n    _getCellText(cellDate) {\r\n        Class.abstract()\r\n    }\r\n    _getFirstCellData() {\r\n        Class.abstract()\r\n    }\r\n    _getNextCellData(date) {\r\n        Class.abstract()\r\n    }\r\n    _renderContouredDate(contouredDate) {\r\n        if (!this.option(\"focusStateEnabled\")) {\r\n            return\r\n        }\r\n        contouredDate = contouredDate || this.option(\"contouredDate\");\r\n        const $oldContouredCell = this._getContouredCell();\r\n        const $newContouredCell = this._getCellByDate(contouredDate);\r\n        $oldContouredCell.removeClass(\"dx-calendar-contoured-date\");\r\n        if (contouredDate) {\r\n            $newContouredCell.addClass(\"dx-calendar-contoured-date\")\r\n        }\r\n    }\r\n    _getContouredCell() {\r\n        return this._$table.find(\".dx-calendar-contoured-date\")\r\n    }\r\n    _renderValue() {\r\n        if (!this.option(\"allowValueSelection\")) {\r\n            return\r\n        }\r\n        let value = this.option(\"value\");\r\n        if (!Array.isArray(value)) {\r\n            value = [value]\r\n        }\r\n        this._updateSelectedClass(value)\r\n    }\r\n    _updateSelectedClass(value) {\r\n        var _this$_$selectedCells;\r\n        if (this._isRangeMode() && !this._isMonthView()) {\r\n            return\r\n        }\r\n        null === (_this$_$selectedCells = this._$selectedCells) || void 0 === _this$_$selectedCells || _this$_$selectedCells.forEach(($cell => {\r\n            $cell.removeClass(\"dx-calendar-selected-date\")\r\n        }));\r\n        this._$selectedCells = value.map((value => this._getCellByDate(value)));\r\n        this._$selectedCells.forEach(($cell => {\r\n            $cell.addClass(\"dx-calendar-selected-date\")\r\n        }))\r\n    }\r\n    _renderRange() {\r\n        var _this$_$rangeCells, _this$_$hoveredRangeC, _this$_$rangeStartHov, _this$_$rangeEndHover, _this$_$rangeStartDat, _this$_$rangeEndDateC, _this$_$rangeStartDat2, _this$_$rangeEndDateC2;\r\n        const {\r\n            allowValueSelection: allowValueSelection,\r\n            value: value,\r\n            range: range\r\n        } = this.option();\r\n        if (!allowValueSelection || !this._isRangeMode() || !this._isMonthView()) {\r\n            return\r\n        }\r\n        null === (_this$_$rangeCells = this._$rangeCells) || void 0 === _this$_$rangeCells || _this$_$rangeCells.forEach(($cell => {\r\n            $cell.removeClass(\"dx-calendar-cell-in-range\")\r\n        }));\r\n        null === (_this$_$hoveredRangeC = this._$hoveredRangeCells) || void 0 === _this$_$hoveredRangeC || _this$_$hoveredRangeC.forEach(($cell => {\r\n            $cell.removeClass(\"dx-calendar-cell-range-hover\")\r\n        }));\r\n        null === (_this$_$rangeStartHov = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov || _this$_$rangeStartHov.removeClass(\"dx-calendar-cell-range-hover-start\");\r\n        null === (_this$_$rangeEndHover = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover || _this$_$rangeEndHover.removeClass(\"dx-calendar-cell-range-hover-end\");\r\n        null === (_this$_$rangeStartDat = this._$rangeStartDateCell) || void 0 === _this$_$rangeStartDat || _this$_$rangeStartDat.removeClass(\"dx-calendar-range-start-date\");\r\n        null === (_this$_$rangeEndDateC = this._$rangeEndDateCell) || void 0 === _this$_$rangeEndDateC || _this$_$rangeEndDateC.removeClass(\"dx-calendar-range-end-date\");\r\n        this._$rangeCells = range.map((value => this._getCellByDate(value)));\r\n        this._$rangeStartDateCell = this._getCellByDate(value[0]);\r\n        this._$rangeEndDateCell = this._getCellByDate(value[1]);\r\n        this._$rangeCells.forEach(($cell => {\r\n            $cell.addClass(\"dx-calendar-cell-in-range\")\r\n        }));\r\n        null === (_this$_$rangeStartDat2 = this._$rangeStartDateCell) || void 0 === _this$_$rangeStartDat2 || _this$_$rangeStartDat2.addClass(\"dx-calendar-range-start-date\");\r\n        null === (_this$_$rangeEndDateC2 = this._$rangeEndDateCell) || void 0 === _this$_$rangeEndDateC2 || _this$_$rangeEndDateC2.addClass(\"dx-calendar-range-end-date\")\r\n    }\r\n    _renderHoveredRange() {\r\n        var _this$_$hoveredRangeC2, _this$_$rangeStartHov2, _this$_$rangeEndHover2, _this$_$rangeStartHov3, _this$_$rangeEndHover3;\r\n        const {\r\n            allowValueSelection: allowValueSelection,\r\n            hoveredRange: hoveredRange\r\n        } = this.option();\r\n        if (!allowValueSelection || !this._isRangeMode() || !this._isMonthView()) {\r\n            return\r\n        }\r\n        null === (_this$_$hoveredRangeC2 = this._$hoveredRangeCells) || void 0 === _this$_$hoveredRangeC2 || _this$_$hoveredRangeC2.forEach(($cell => {\r\n            $cell.removeClass(\"dx-calendar-cell-range-hover\")\r\n        }));\r\n        null === (_this$_$rangeStartHov2 = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov2 || _this$_$rangeStartHov2.removeClass(\"dx-calendar-cell-range-hover-start\");\r\n        null === (_this$_$rangeEndHover2 = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover2 || _this$_$rangeEndHover2.removeClass(\"dx-calendar-cell-range-hover-end\");\r\n        this._$hoveredRangeCells = hoveredRange.map((value => this._getCellByDate(value)));\r\n        this._$rangeStartHoverCell = this._getCellByDate(hoveredRange[0]);\r\n        this._$rangeEndHoverCell = this._getCellByDate(hoveredRange[hoveredRange.length - 1]);\r\n        this._$hoveredRangeCells.forEach(($cell => {\r\n            $cell.addClass(\"dx-calendar-cell-range-hover\")\r\n        }));\r\n        null === (_this$_$rangeStartHov3 = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov3 || _this$_$rangeStartHov3.addClass(\"dx-calendar-cell-range-hover-start\");\r\n        null === (_this$_$rangeEndHover3 = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover3 || _this$_$rangeEndHover3.addClass(\"dx-calendar-cell-range-hover-end\")\r\n    }\r\n    _isMonthView() {\r\n        const {\r\n            zoomLevel: zoomLevel\r\n        } = this.option();\r\n        return \"month\" === zoomLevel\r\n    }\r\n    _isRangeMode() {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        return selectionMode === SELECTION_MODE.range\r\n    }\r\n    _getCurrentDateFormat() {\r\n        return null\r\n    }\r\n    getCellAriaLabel(date) {\r\n        const viewName = this._getViewName();\r\n        const isToday = this._isTodayCell(date);\r\n        const format = this._getCurrentDateFormat();\r\n        const dateRangeText = format ? dateLocalization.format(date, format) : this._getCellText(date);\r\n        const ariaLabel = isToday ? `${dateRangeText}. ${CURRENT_DATE_TEXT[viewName]}` : dateRangeText;\r\n        return ariaLabel\r\n    }\r\n    _getFirstAvailableDate() {\r\n        let date = this.option(\"date\");\r\n        const min = this.option(\"min\");\r\n        date = coreDateUtils.getViewFirstCellDate(this._getViewName(), date);\r\n        return new Date(min && date < min ? min : date)\r\n    }\r\n    _getCellByDate(contouredDate) {\r\n        Class.abstract()\r\n    }\r\n    isBoundary(date) {\r\n        Class.abstract()\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            name: name,\r\n            value: value\r\n        } = args;\r\n        switch (name) {\r\n            case \"value\":\r\n                this._renderValue();\r\n                this._updateTableAriaLabel();\r\n                break;\r\n            case \"range\":\r\n                this._renderRange();\r\n                break;\r\n            case \"hoveredRange\":\r\n                this._renderHoveredRange();\r\n                break;\r\n            case \"contouredDate\":\r\n                this._renderContouredDate(value);\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"onCellHover\":\r\n                this._createCellHoverAction();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n            case \"disabledDates\":\r\n            case \"cellTemplate\":\r\n            case \"selectionMode\":\r\n                this._invalidate();\r\n                break;\r\n            case \"_todayDate\":\r\n                this._renderBody();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nexport default BaseView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}