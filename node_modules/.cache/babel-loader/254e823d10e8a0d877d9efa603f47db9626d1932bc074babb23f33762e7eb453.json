{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_time_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport dateLocalization from \"../../../common/core/localization/date\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport $ from \"../../../core/renderer\";\nimport Editor from \"../../ui/editor/editor\";\nimport Box from \"../../ui/m_box\";\nimport SelectBox from \"../../ui/m_select_box\";\nimport NumberBox from \"../../ui/number_box/m_number_box\";\nimport dateUtils from \"./m_date_utils\";\nconst TIMEVIEW_CLASS = \"dx-timeview\";\nconst TIMEVIEW_CLOCK_CLASS = \"dx-timeview-clock\";\nconst TIMEVIEW_FIELD_CLASS = \"dx-timeview-field\";\nconst TIMEVIEW_HOURARROW_CLASS = \"dx-timeview-hourarrow\";\nconst TIMEVIEW_TIME_SEPARATOR_CLASS = \"dx-timeview-time-separator\";\nconst TIMEVIEW_FORMAT12_CLASS = \"dx-timeview-format12\";\nconst TIMEVIEW_FORMAT12_AM = -1;\nconst TIMEVIEW_FORMAT12_PM = 1;\nconst TIMEVIEW_MINUTEARROW_CLASS = \"dx-timeview-minutearrow\";\nconst rotateArrow = function ($arrow, angle, offset) {\n  cssRotate($arrow, angle, offset);\n};\nconst cssRotate = function ($arrow, angle, offset) {\n  $arrow.css(\"transform\", `rotate(${angle}deg) translate(0,${offset}px)`);\n};\nclass TimeView extends Editor {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      value: new Date(Date.now()),\n      use24HourFormat: true,\n      _showClock: true,\n      _arrowOffset: 5\n    });\n  }\n  _getValue() {\n    const {\n      value: value\n    } = this.option();\n    return value || new Date();\n  }\n  _init() {\n    super._init();\n    this.$element().addClass(\"dx-timeview\");\n  }\n  _render() {\n    super._render();\n    this._renderBox();\n    this._updateTime();\n  }\n  _renderBox() {\n    const $box = $(\"<div>\").appendTo(this.$element());\n    const items = [];\n    if (this.option(\"_showClock\")) {\n      items.push({\n        ratio: 1,\n        shrink: 0,\n        baseSize: \"auto\",\n        template: this._renderClock.bind(this)\n      });\n    }\n    items.push({\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: this._renderField.bind(this)\n    });\n    this._createComponent($box, Box, {\n      height: \"100%\",\n      width: \"100%\",\n      direction: \"col\",\n      items: items\n    });\n  }\n  _renderClock(_, __, container) {\n    this._$hourArrow = $(\"<div>\").addClass(\"dx-timeview-hourarrow\");\n    this._$minuteArrow = $(\"<div>\").addClass(\"dx-timeview-minutearrow\");\n    const $container = $(container);\n    $container.addClass(\"dx-timeview-clock\").append(this._$hourArrow).append(this._$minuteArrow);\n    this.setAria(\"role\", \"presentation\", $container);\n  }\n  _updateClock() {\n    const time = this._getValue();\n    const hourArrowAngle = time.getHours() / 12 * 360 + time.getMinutes() / 60 * 30;\n    const minuteArrowAngle = time.getMinutes() / 60 * 360;\n    rotateArrow(this._$hourArrow, hourArrowAngle, this.option(\"_arrowOffset\"));\n    rotateArrow(this._$minuteArrow, minuteArrowAngle, this.option(\"_arrowOffset\"));\n  }\n  _getBoxItems(is12HourFormat) {\n    const items = [{\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: () => this._hourBox.$element()\n    }, {\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: $(\"<div>\").addClass(\"dx-timeview-time-separator\").text(dateLocalization.getTimeSeparator())\n    }, {\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: () => this._minuteBox.$element()\n    }];\n    if (is12HourFormat) {\n      items.push({\n        ratio: 0,\n        shrink: 0,\n        baseSize: \"auto\",\n        template: () => this._format12.$element()\n      });\n    }\n    return items;\n  }\n  _renderField() {\n    const is12HourFormat = !this.option(\"use24HourFormat\");\n    this._createHourBox(is12HourFormat);\n    this._createMinuteBox();\n    if (is12HourFormat) {\n      this._createFormat12Box();\n    }\n    return this._createComponent($(\"<div>\").addClass(\"dx-timeview-field\"), Box, {\n      direction: \"row\",\n      align: \"center\",\n      crossAlign: \"center\",\n      items: this._getBoxItems(is12HourFormat)\n    }).$element();\n  }\n  _createHourBox(is12HourFormat) {\n    this._hourBox = this._createComponent($(\"<div>\"), NumberBox, _extends({\n      min: -1,\n      max: is12HourFormat ? 13 : 24,\n      value: this._getValue().getHours(),\n      onValueChanged: this._onHourBoxValueChanged.bind(this),\n      onKeyboardHandled: opts => this._keyboardHandler(opts)\n    }, this._getNumberBoxConfig()));\n    this._hourBox.setAria(\"label\", \"hours\");\n  }\n  _isPM() {\n    return !this.option(\"use24HourFormat\") && 1 === this._format12.option(\"value\");\n  }\n  _onHourBoxValueChanged(_ref) {\n    let {\n      value: value,\n      component: component\n    } = _ref;\n    const currentValue = this._getValue();\n    const newValue = new Date(currentValue);\n    let newHours = this._convertMaxHourToMin(value);\n    component.option(\"value\", newHours);\n    if (this._isPM()) {\n      newHours += 12;\n    }\n    newValue.setHours(newHours);\n    dateUtils.normalizeTime(newValue);\n    this.option(\"value\", newValue);\n  }\n  _convertMaxHourToMin(hours) {\n    const maxHoursValue = this.option(\"use24HourFormat\") ? 24 : 12;\n    return (maxHoursValue + hours) % maxHoursValue;\n  }\n  _createMinuteBox() {\n    this._minuteBox = this._createComponent($(\"<div>\"), NumberBox, _extends({\n      min: -1,\n      max: 60,\n      value: this._getValue().getMinutes(),\n      onKeyboardHandled: opts => this._keyboardHandler(opts),\n      onValueChanged: _ref2 => {\n        let {\n          value: value,\n          component: component\n        } = _ref2;\n        const newMinutes = (60 + value) % 60;\n        component.option(\"value\", newMinutes);\n        const time = new Date(this._getValue());\n        time.setMinutes(newMinutes);\n        dateUtils.normalizeTime(time);\n        this.option(\"value\", time);\n      }\n    }, this._getNumberBoxConfig()));\n    this._minuteBox.setAria(\"label\", \"minutes\");\n  }\n  _createFormat12Box() {\n    const periodNames = dateLocalization.getPeriodNames();\n    this._format12 = this._createComponent($(\"<div>\").addClass(\"dx-timeview-format12\"), SelectBox, {\n      items: [{\n        value: -1,\n        text: periodNames[0]\n      }, {\n        value: 1,\n        text: periodNames[1]\n      }],\n      valueExpr: \"value\",\n      displayExpr: \"text\",\n      onKeyboardHandled: opts => this._keyboardHandler(opts),\n      onValueChanged: _ref3 => {\n        let {\n          value: value\n        } = _ref3;\n        const hours = this._getValue().getHours();\n        const time = new Date(this._getValue());\n        const newHours = (hours + 12 * value) % 24;\n        time.setHours(newHours);\n        this.option(\"value\", time);\n      },\n      value: this._getValue().getHours() >= 12 ? 1 : -1,\n      stylingMode: this.option(\"stylingMode\")\n    });\n    this._format12.setAria(\"label\", \"type\");\n  }\n  _refreshFormat12() {\n    if (this.option(\"use24HourFormat\")) {\n      return;\n    }\n    const value = this._getValue();\n    const hours = value.getHours();\n    const isPM = hours >= 12;\n    const newValue = isPM ? 1 : -1;\n    this._silentEditorValueUpdate(this._format12, newValue);\n  }\n  _silentEditorValueUpdate(editor, value) {\n    if (editor) {\n      editor._suppressValueChangeAction();\n      editor.option(\"value\", value);\n      editor._resumeValueChangeAction();\n    }\n  }\n  _getNumberBoxConfig() {\n    const {\n      stylingMode: stylingMode\n    } = this.option();\n    return {\n      showSpinButtons: true,\n      displayValueFormatter: value => (value < 10 ? \"0\" : \"\") + value,\n      stylingMode: stylingMode\n    };\n  }\n  _normalizeHours(hours) {\n    return this.option(\"use24HourFormat\") ? hours : hours % 12 || 12;\n  }\n  _updateField() {\n    const hours = this._normalizeHours(this._getValue().getHours());\n    this._silentEditorValueUpdate(this._hourBox, hours);\n    this._silentEditorValueUpdate(this._minuteBox, this._getValue().getMinutes());\n    this._refreshFormat12();\n  }\n  _updateTime() {\n    if (this.option(\"_showClock\")) {\n      this._updateClock();\n    }\n    this._updateField();\n  }\n  _visibilityChanged(visible) {\n    if (visible) {\n      this._updateTime();\n    }\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._updateTime();\n        super._optionChanged(args);\n        break;\n      case \"_arrowOffset\":\n        break;\n      case \"use24HourFormat\":\n      case \"_showClock\":\n      case \"stylingMode\":\n        this._invalidate();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n}\nregisterComponent(\"dxTimeView\", TimeView);\nexport default TimeView;","map":{"version":3,"names":["_extends","dateLocalization","registerComponent","$","Editor","Box","SelectBox","NumberBox","dateUtils","TIMEVIEW_CLASS","TIMEVIEW_CLOCK_CLASS","TIMEVIEW_FIELD_CLASS","TIMEVIEW_HOURARROW_CLASS","TIMEVIEW_TIME_SEPARATOR_CLASS","TIMEVIEW_FORMAT12_CLASS","TIMEVIEW_FORMAT12_AM","TIMEVIEW_FORMAT12_PM","TIMEVIEW_MINUTEARROW_CLASS","rotateArrow","$arrow","angle","offset","cssRotate","css","TimeView","_getDefaultOptions","value","Date","now","use24HourFormat","_showClock","_arrowOffset","_getValue","option","_init","$element","addClass","_render","_renderBox","_updateTime","$box","appendTo","items","push","ratio","shrink","baseSize","template","_renderClock","bind","_renderField","_createComponent","height","width","direction","_","__","container","_$hourArrow","_$minuteArrow","$container","append","setAria","_updateClock","time","hourArrowAngle","getHours","getMinutes","minuteArrowAngle","_getBoxItems","is12HourFormat","_hourBox","text","getTimeSeparator","_minuteBox","_format12","_createHourBox","_createMinuteBox","_createFormat12Box","align","crossAlign","min","max","onValueChanged","_onHourBoxValueChanged","onKeyboardHandled","opts","_keyboardHandler","_getNumberBoxConfig","_isPM","_ref","component","currentValue","newValue","newHours","_convertMaxHourToMin","setHours","normalizeTime","hours","maxHoursValue","_ref2","newMinutes","setMinutes","periodNames","getPeriodNames","valueExpr","displayExpr","_ref3","stylingMode","_refreshFormat12","isPM","_silentEditorValueUpdate","editor","_suppressValueChangeAction","_resumeValueChangeAction","showSpinButtons","displayValueFormatter","_normalizeHours","_updateField","_visibilityChanged","visible","_optionChanged","args","name","_invalidate"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/date_box/m_time_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_time_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport dateLocalization from \"../../../common/core/localization/date\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport $ from \"../../../core/renderer\";\r\nimport Editor from \"../../ui/editor/editor\";\r\nimport Box from \"../../ui/m_box\";\r\nimport SelectBox from \"../../ui/m_select_box\";\r\nimport NumberBox from \"../../ui/number_box/m_number_box\";\r\nimport dateUtils from \"./m_date_utils\";\r\nconst TIMEVIEW_CLASS = \"dx-timeview\";\r\nconst TIMEVIEW_CLOCK_CLASS = \"dx-timeview-clock\";\r\nconst TIMEVIEW_FIELD_CLASS = \"dx-timeview-field\";\r\nconst TIMEVIEW_HOURARROW_CLASS = \"dx-timeview-hourarrow\";\r\nconst TIMEVIEW_TIME_SEPARATOR_CLASS = \"dx-timeview-time-separator\";\r\nconst TIMEVIEW_FORMAT12_CLASS = \"dx-timeview-format12\";\r\nconst TIMEVIEW_FORMAT12_AM = -1;\r\nconst TIMEVIEW_FORMAT12_PM = 1;\r\nconst TIMEVIEW_MINUTEARROW_CLASS = \"dx-timeview-minutearrow\";\r\nconst rotateArrow = function($arrow, angle, offset) {\r\n    cssRotate($arrow, angle, offset)\r\n};\r\nconst cssRotate = function($arrow, angle, offset) {\r\n    $arrow.css(\"transform\", `rotate(${angle}deg) translate(0,${offset}px)`)\r\n};\r\nclass TimeView extends Editor {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            value: new Date(Date.now()),\r\n            use24HourFormat: true,\r\n            _showClock: true,\r\n            _arrowOffset: 5\r\n        })\r\n    }\r\n    _getValue() {\r\n        const {\r\n            value: value\r\n        } = this.option();\r\n        return value || new Date\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this.$element().addClass(\"dx-timeview\")\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderBox();\r\n        this._updateTime()\r\n    }\r\n    _renderBox() {\r\n        const $box = $(\"<div>\").appendTo(this.$element());\r\n        const items = [];\r\n        if (this.option(\"_showClock\")) {\r\n            items.push({\r\n                ratio: 1,\r\n                shrink: 0,\r\n                baseSize: \"auto\",\r\n                template: this._renderClock.bind(this)\r\n            })\r\n        }\r\n        items.push({\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: this._renderField.bind(this)\r\n        });\r\n        this._createComponent($box, Box, {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            direction: \"col\",\r\n            items: items\r\n        })\r\n    }\r\n    _renderClock(_, __, container) {\r\n        this._$hourArrow = $(\"<div>\").addClass(\"dx-timeview-hourarrow\");\r\n        this._$minuteArrow = $(\"<div>\").addClass(\"dx-timeview-minutearrow\");\r\n        const $container = $(container);\r\n        $container.addClass(\"dx-timeview-clock\").append(this._$hourArrow).append(this._$minuteArrow);\r\n        this.setAria(\"role\", \"presentation\", $container)\r\n    }\r\n    _updateClock() {\r\n        const time = this._getValue();\r\n        const hourArrowAngle = time.getHours() / 12 * 360 + time.getMinutes() / 60 * 30;\r\n        const minuteArrowAngle = time.getMinutes() / 60 * 360;\r\n        rotateArrow(this._$hourArrow, hourArrowAngle, this.option(\"_arrowOffset\"));\r\n        rotateArrow(this._$minuteArrow, minuteArrowAngle, this.option(\"_arrowOffset\"))\r\n    }\r\n    _getBoxItems(is12HourFormat) {\r\n        const items = [{\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: () => this._hourBox.$element()\r\n        }, {\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: $(\"<div>\").addClass(\"dx-timeview-time-separator\").text(dateLocalization.getTimeSeparator())\r\n        }, {\r\n            ratio: 0,\r\n            shrink: 0,\r\n            baseSize: \"auto\",\r\n            template: () => this._minuteBox.$element()\r\n        }];\r\n        if (is12HourFormat) {\r\n            items.push({\r\n                ratio: 0,\r\n                shrink: 0,\r\n                baseSize: \"auto\",\r\n                template: () => this._format12.$element()\r\n            })\r\n        }\r\n        return items\r\n    }\r\n    _renderField() {\r\n        const is12HourFormat = !this.option(\"use24HourFormat\");\r\n        this._createHourBox(is12HourFormat);\r\n        this._createMinuteBox();\r\n        if (is12HourFormat) {\r\n            this._createFormat12Box()\r\n        }\r\n        return this._createComponent($(\"<div>\").addClass(\"dx-timeview-field\"), Box, {\r\n            direction: \"row\",\r\n            align: \"center\",\r\n            crossAlign: \"center\",\r\n            items: this._getBoxItems(is12HourFormat)\r\n        }).$element()\r\n    }\r\n    _createHourBox(is12HourFormat) {\r\n        this._hourBox = this._createComponent($(\"<div>\"), NumberBox, _extends({\r\n            min: -1,\r\n            max: is12HourFormat ? 13 : 24,\r\n            value: this._getValue().getHours(),\r\n            onValueChanged: this._onHourBoxValueChanged.bind(this),\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts)\r\n        }, this._getNumberBoxConfig()));\r\n        this._hourBox.setAria(\"label\", \"hours\")\r\n    }\r\n    _isPM() {\r\n        return !this.option(\"use24HourFormat\") && 1 === this._format12.option(\"value\")\r\n    }\r\n    _onHourBoxValueChanged(_ref) {\r\n        let {\r\n            value: value,\r\n            component: component\r\n        } = _ref;\r\n        const currentValue = this._getValue();\r\n        const newValue = new Date(currentValue);\r\n        let newHours = this._convertMaxHourToMin(value);\r\n        component.option(\"value\", newHours);\r\n        if (this._isPM()) {\r\n            newHours += 12\r\n        }\r\n        newValue.setHours(newHours);\r\n        dateUtils.normalizeTime(newValue);\r\n        this.option(\"value\", newValue)\r\n    }\r\n    _convertMaxHourToMin(hours) {\r\n        const maxHoursValue = this.option(\"use24HourFormat\") ? 24 : 12;\r\n        return (maxHoursValue + hours) % maxHoursValue\r\n    }\r\n    _createMinuteBox() {\r\n        this._minuteBox = this._createComponent($(\"<div>\"), NumberBox, _extends({\r\n            min: -1,\r\n            max: 60,\r\n            value: this._getValue().getMinutes(),\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts),\r\n            onValueChanged: _ref2 => {\r\n                let {\r\n                    value: value,\r\n                    component: component\r\n                } = _ref2;\r\n                const newMinutes = (60 + value) % 60;\r\n                component.option(\"value\", newMinutes);\r\n                const time = new Date(this._getValue());\r\n                time.setMinutes(newMinutes);\r\n                dateUtils.normalizeTime(time);\r\n                this.option(\"value\", time)\r\n            }\r\n        }, this._getNumberBoxConfig()));\r\n        this._minuteBox.setAria(\"label\", \"minutes\")\r\n    }\r\n    _createFormat12Box() {\r\n        const periodNames = dateLocalization.getPeriodNames();\r\n        this._format12 = this._createComponent($(\"<div>\").addClass(\"dx-timeview-format12\"), SelectBox, {\r\n            items: [{\r\n                value: -1,\r\n                text: periodNames[0]\r\n            }, {\r\n                value: 1,\r\n                text: periodNames[1]\r\n            }],\r\n            valueExpr: \"value\",\r\n            displayExpr: \"text\",\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts),\r\n            onValueChanged: _ref3 => {\r\n                let {\r\n                    value: value\r\n                } = _ref3;\r\n                const hours = this._getValue().getHours();\r\n                const time = new Date(this._getValue());\r\n                const newHours = (hours + 12 * value) % 24;\r\n                time.setHours(newHours);\r\n                this.option(\"value\", time)\r\n            },\r\n            value: this._getValue().getHours() >= 12 ? 1 : -1,\r\n            stylingMode: this.option(\"stylingMode\")\r\n        });\r\n        this._format12.setAria(\"label\", \"type\")\r\n    }\r\n    _refreshFormat12() {\r\n        if (this.option(\"use24HourFormat\")) {\r\n            return\r\n        }\r\n        const value = this._getValue();\r\n        const hours = value.getHours();\r\n        const isPM = hours >= 12;\r\n        const newValue = isPM ? 1 : -1;\r\n        this._silentEditorValueUpdate(this._format12, newValue)\r\n    }\r\n    _silentEditorValueUpdate(editor, value) {\r\n        if (editor) {\r\n            editor._suppressValueChangeAction();\r\n            editor.option(\"value\", value);\r\n            editor._resumeValueChangeAction()\r\n        }\r\n    }\r\n    _getNumberBoxConfig() {\r\n        const {\r\n            stylingMode: stylingMode\r\n        } = this.option();\r\n        return {\r\n            showSpinButtons: true,\r\n            displayValueFormatter: value => (value < 10 ? \"0\" : \"\") + value,\r\n            stylingMode: stylingMode\r\n        }\r\n    }\r\n    _normalizeHours(hours) {\r\n        return this.option(\"use24HourFormat\") ? hours : hours % 12 || 12\r\n    }\r\n    _updateField() {\r\n        const hours = this._normalizeHours(this._getValue().getHours());\r\n        this._silentEditorValueUpdate(this._hourBox, hours);\r\n        this._silentEditorValueUpdate(this._minuteBox, this._getValue().getMinutes());\r\n        this._refreshFormat12()\r\n    }\r\n    _updateTime() {\r\n        if (this.option(\"_showClock\")) {\r\n            this._updateClock()\r\n        }\r\n        this._updateField()\r\n    }\r\n    _visibilityChanged(visible) {\r\n        if (visible) {\r\n            this._updateTime()\r\n        }\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._updateTime();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"_arrowOffset\":\r\n                break;\r\n            case \"use24HourFormat\":\r\n            case \"_showClock\":\r\n            case \"stylingMode\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxTimeView\", TimeView);\r\nexport default TimeView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}