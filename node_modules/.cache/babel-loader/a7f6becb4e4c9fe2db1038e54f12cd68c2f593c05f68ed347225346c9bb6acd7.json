{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_view_port.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport callbacks from \"../../../core/utils/callbacks\";\nimport readyCallbacks from \"../../../core/utils/ready_callbacks\";\nconst ready = readyCallbacks.add;\nconst changeCallback = callbacks();\nlet $originalViewPort = $();\nconst value = function () {\n  let $current;\n  return function (element) {\n    if (!arguments.length) {\n      return $current;\n    }\n    const $element = $(element);\n    $originalViewPort = $element;\n    const isNewViewportFound = !!$element.length;\n    const prevViewPort = value();\n    $current = isNewViewportFound ? $element : $(\"body\");\n    changeCallback.fire(isNewViewportFound ? value() : $(), prevViewPort);\n  };\n}();\nready(function () {\n  value(\".dx-viewport\");\n});\nexport { changeCallback, value };\nexport function originalViewPort() {\n  return $originalViewPort;\n}","map":{"version":3,"names":["$","callbacks","readyCallbacks","ready","add","changeCallback","$originalViewPort","value","$current","element","arguments","length","$element","isNewViewportFound","prevViewPort","fire","originalViewPort"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_view_port.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_view_port.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport callbacks from \"../../../core/utils/callbacks\";\r\nimport readyCallbacks from \"../../../core/utils/ready_callbacks\";\r\nconst ready = readyCallbacks.add;\r\nconst changeCallback = callbacks();\r\nlet $originalViewPort = $();\r\nconst value = function() {\r\n    let $current;\r\n    return function(element) {\r\n        if (!arguments.length) {\r\n            return $current\r\n        }\r\n        const $element = $(element);\r\n        $originalViewPort = $element;\r\n        const isNewViewportFound = !!$element.length;\r\n        const prevViewPort = value();\r\n        $current = isNewViewportFound ? $element : $(\"body\");\r\n        changeCallback.fire(isNewViewportFound ? value() : $(), prevViewPort)\r\n    }\r\n}();\r\nready((function() {\r\n    value(\".dx-viewport\")\r\n}));\r\nexport {\r\n    changeCallback,\r\n    value\r\n};\r\nexport function originalViewPort() {\r\n    return $originalViewPort\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAC,MAAM,wBAAwB;AACtC,OAAOC,SAAS,MAAM,+BAA+B;AACrD,OAAOC,cAAc,MAAM,qCAAqC;AAChE,MAAMC,KAAK,GAAGD,cAAc,CAACE,GAAG;AAChC,MAAMC,cAAc,GAAGJ,SAAS,CAAC,CAAC;AAClC,IAAIK,iBAAiB,GAAGN,CAAC,CAAC,CAAC;AAC3B,MAAMO,KAAK,GAAG,YAAW;EACrB,IAAIC,QAAQ;EACZ,OAAO,UAASC,OAAO,EAAE;IACrB,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE;MACnB,OAAOH,QAAQ;IACnB;IACA,MAAMI,QAAQ,GAAGZ,CAAC,CAACS,OAAO,CAAC;IAC3BH,iBAAiB,GAAGM,QAAQ;IAC5B,MAAMC,kBAAkB,GAAG,CAAC,CAACD,QAAQ,CAACD,MAAM;IAC5C,MAAMG,YAAY,GAAGP,KAAK,CAAC,CAAC;IAC5BC,QAAQ,GAAGK,kBAAkB,GAAGD,QAAQ,GAAGZ,CAAC,CAAC,MAAM,CAAC;IACpDK,cAAc,CAACU,IAAI,CAACF,kBAAkB,GAAGN,KAAK,CAAC,CAAC,GAAGP,CAAC,CAAC,CAAC,EAAEc,YAAY,CAAC;EACzE,CAAC;AACL,CAAC,CAAC,CAAC;AACHX,KAAK,CAAE,YAAW;EACdI,KAAK,CAAC,cAAc,CAAC;AACzB,CAAE,CAAC;AACH,SACIF,cAAc,EACdE,KAAK;AAET,OAAO,SAASS,gBAAgBA,CAAA,EAAG;EAC/B,OAAOV,iBAAiB;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}