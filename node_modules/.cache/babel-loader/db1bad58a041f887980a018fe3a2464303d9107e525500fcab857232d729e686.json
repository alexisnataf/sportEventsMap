{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/list/m_list.edit.decorator.selection.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { name as clickEventName } from \"../../../common/core/events/click\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { addNamespace } from \"../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport $ from \"../../../core/renderer\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport { extend } from \"../../../core/utils/extend\";\nimport CheckBox from \"../../../ui/check_box\";\nimport RadioButton from \"../../../ui/radio_group/radio_button\";\nimport errors from \"../../../ui/widget/ui.errors\";\nimport EditDecorator from \"./m_list.edit.decorator\";\nimport { register as registerDecorator } from \"./m_list.edit.decorator_registry\";\nconst SELECT_DECORATOR_ENABLED_CLASS = \"dx-list-select-decorator-enabled\";\nconst SELECT_DECORATOR_SELECT_ALL_CLASS = \"dx-list-select-all\";\nconst SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS = \"dx-list-select-all-checkbox\";\nconst SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS = \"dx-list-select-all-label\";\nconst SELECT_CHECKBOX_CONTAINER_CLASS = \"dx-list-select-checkbox-container\";\nconst SELECT_CHECKBOX_CLASS = \"dx-list-select-checkbox\";\nconst SELECT_RADIO_BUTTON_CONTAINER_CLASS = \"dx-list-select-radiobutton-container\";\nconst SELECT_RADIO_BUTTON_CLASS = \"dx-list-select-radiobutton\";\nconst FOCUSED_STATE_CLASS = \"dx-state-focused\";\nconst CLICK_EVENT_NAME = addNamespace(clickEventName, \"dxListEditDecorator\");\nclass EditDecoratorSelection extends EditDecorator {\n  _init() {\n    super._init.apply(this, arguments);\n    const selectionMode = this._list.option(\"selectionMode\");\n    this._singleStrategy = \"single\" === selectionMode;\n    this._containerClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CONTAINER_CLASS : SELECT_CHECKBOX_CONTAINER_CLASS;\n    this._controlClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CLASS : SELECT_CHECKBOX_CLASS;\n    this._controlWidget = this._singleStrategy ? RadioButton : CheckBox;\n    this._list.$element().addClass(SELECT_DECORATOR_ENABLED_CLASS);\n  }\n  beforeBag(config) {\n    const {\n      $itemElement: $itemElement\n    } = config;\n    const $container = config.$container.addClass(this._containerClass);\n    const $control = $(\"<div>\").addClass(this._controlClass).appendTo($container);\n    new this._controlWidget($control, extend(this._commonOptions(), {\n      value: this._isSelected($itemElement),\n      elementAttr: {\n        \"aria-label\": messageLocalization.format(\"CheckState\")\n      },\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      onValueChanged: _ref => {\n        let {\n          value: value,\n          component: component,\n          event: event\n        } = _ref;\n        const isUiClick = !!event;\n        if (isUiClick) {\n          component._valueChangeEventInstance = void 0;\n          component.option(\"value\", !value);\n        }\n      }\n    }));\n  }\n  modifyElement(config) {\n    super.modifyElement.apply(this, arguments);\n    const {\n      $itemElement: $itemElement\n    } = config;\n    const control = this._controlWidget.getInstance($itemElement.find(`.${this._controlClass}`));\n    eventsEngine.on($itemElement, \"stateChanged\", (e, state) => {\n      control.option(\"value\", state);\n    });\n  }\n  _updateSelectAllState() {\n    if (!this._$selectAll) {\n      return;\n    }\n    this._selectAllCheckBox.option(\"value\", this._list.isSelectAll());\n  }\n  afterRender() {\n    if (\"all\" !== this._list.option(\"selectionMode\")) {\n      return;\n    }\n    if (!this._$selectAll) {\n      this._renderSelectAll();\n    } else {\n      this._updateSelectAllState();\n    }\n  }\n  handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {\n    const moveFocusDown = !moveFocusUp;\n    const list = this._list;\n    const $selectAll = this._$selectAll;\n    const lastItemIndex = list._getLastItemIndex();\n    const isFocusOutOfList = moveFocusUp && 0 === currentFocusedIndex || moveFocusDown && currentFocusedIndex === lastItemIndex;\n    const hasSelectAllItem = !!$selectAll;\n    if (hasSelectAllItem && isFocusOutOfList) {\n      list.option(\"focusedElement\", $selectAll);\n      list.scrollToItem(list.option(\"focusedElement\"));\n      return true;\n    }\n    return false;\n  }\n  handleEnterPressing(e) {\n    var _this$_$selectAll;\n    if (null !== (_this$_$selectAll = this._$selectAll) && void 0 !== _this$_$selectAll && _this$_$selectAll.hasClass(\"dx-state-focused\")) {\n      e.target = this._$selectAll.get(0);\n      this._selectAllHandler(e);\n      return true;\n    }\n  }\n  _renderSelectAll() {\n    this._$selectAll = $(\"<div>\").addClass(\"dx-list-select-all\");\n    const downArrowHandler = this._list._supportedKeys().downArrow.bind(this._list);\n    const selectAllCheckBoxElement = $(\"<div>\").addClass(\"dx-list-select-all-checkbox\").appendTo(this._$selectAll);\n    this._selectAllCheckBox = this._list._createComponent(selectAllCheckBoxElement, CheckBox, {\n      elementAttr: {\n        \"aria-label\": messageLocalization.format(\"dxList-selectAll\")\n      },\n      focusStateEnabled: false,\n      hoverStateEnabled: false\n    });\n    this._selectAllCheckBox.registerKeyHandler(\"downArrow\", downArrowHandler);\n    $(\"<div>\").addClass(\"dx-list-select-all-label\").text(this._list.option(\"selectAllText\")).appendTo(this._$selectAll);\n    this._list.itemsContainer().prepend(this._$selectAll);\n    this._updateSelectAllState();\n    this._updateSelectAllAriaLabel();\n    this._attachSelectAllHandler();\n  }\n  _attachSelectAllHandler() {\n    this._selectAllCheckBox.option(\"onValueChanged\", _ref2 => {\n      let {\n        value: value,\n        event: event,\n        component: component\n      } = _ref2;\n      const isUiClick = !!event;\n      if (isUiClick) {\n        component._setOptionWithoutOptionChange(\"value\", !value);\n        return;\n      }\n      this._updateSelectAllAriaLabel();\n      this._list._createActionByOption(\"onSelectAllValueChanged\")({\n        value: value\n      });\n    });\n    eventsEngine.off(this._$selectAll, CLICK_EVENT_NAME);\n    eventsEngine.on(this._$selectAll, CLICK_EVENT_NAME, this._selectAllHandler.bind(this));\n  }\n  _updateSelectAllAriaLabel() {\n    if (!this._$selectAll) {\n      return;\n    }\n    const {\n      value: value\n    } = this._selectAllCheckBox.option();\n    const indeterminate = void 0 === value;\n    const stateVariableName = indeterminate ? \"indeterminate\" : value ? \"checked\" : \"notChecked\";\n    const label = `${messageLocalization.format(\"dxList-selectAll\")}, ${messageLocalization.format(`dxList-selectAll-${stateVariableName}`)}`;\n    this._$selectAll.attr({\n      \"aria-label\": label\n    });\n  }\n  _selectAllHandler(event) {\n    var _this$_$selectAll2;\n    event.stopPropagation();\n    this._list._saveSelectionChangeEvent(event);\n    const {\n      value: value\n    } = this._selectAllCheckBox.option();\n    let selectionDeferred;\n    if (true !== value) {\n      selectionDeferred = this._selectAllItems();\n    } else {\n      selectionDeferred = this._unselectAllItems();\n    }\n    this._list.option(\"focusedElement\", null === (_this$_$selectAll2 = this._$selectAll) || void 0 === _this$_$selectAll2 ? void 0 : _this$_$selectAll2.get(0));\n    return selectionDeferred;\n  }\n  _checkSelectAllCapability() {\n    const list = this._list;\n    const dataController = list._dataController;\n    if (\"allPages\" === list.option(\"selectAllMode\") && list.option(\"grouped\") && !dataController.group()) {\n      errors.log(\"W1010\");\n      return false;\n    }\n    return true;\n  }\n  _selectAllItems() {\n    if (!this._checkSelectAllCapability()) {\n      return Deferred().resolve();\n    }\n    return this._list._selection.selectAll(\"page\" === this._list.option(\"selectAllMode\"));\n  }\n  _unselectAllItems() {\n    if (!this._checkSelectAllCapability()) {\n      return Deferred().resolve();\n    }\n    return this._list._selection.deselectAll(\"page\" === this._list.option(\"selectAllMode\"));\n  }\n  _isSelected($itemElement) {\n    return this._list.isItemSelected($itemElement);\n  }\n  dispose() {\n    this._disposeSelectAll();\n    this._list.$element().removeClass(SELECT_DECORATOR_ENABLED_CLASS);\n    super.dispose.apply(this, arguments);\n  }\n  _disposeSelectAll() {\n    if (this._$selectAll) {\n      this._$selectAll.remove();\n      this._$selectAll = null;\n    }\n  }\n}\nregisterDecorator(\"selection\", \"default\", EditDecoratorSelection);","map":{"version":3,"names":["name","clickEventName","eventsEngine","addNamespace","messageLocalization","$","Deferred","extend","CheckBox","RadioButton","errors","EditDecorator","register","registerDecorator","SELECT_DECORATOR_ENABLED_CLASS","SELECT_DECORATOR_SELECT_ALL_CLASS","SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS","SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS","SELECT_CHECKBOX_CONTAINER_CLASS","SELECT_CHECKBOX_CLASS","SELECT_RADIO_BUTTON_CONTAINER_CLASS","SELECT_RADIO_BUTTON_CLASS","FOCUSED_STATE_CLASS","CLICK_EVENT_NAME","EditDecoratorSelection","_init","apply","arguments","selectionMode","_list","option","_singleStrategy","_containerClass","_controlClass","_controlWidget","$element","addClass","beforeBag","config","$itemElement","$container","$control","appendTo","_commonOptions","value","_isSelected","elementAttr","format","focusStateEnabled","hoverStateEnabled","onValueChanged","_ref","component","event","isUiClick","_valueChangeEventInstance","modifyElement","control","getInstance","find","on","e","state","_updateSelectAllState","_$selectAll","_selectAllCheckBox","isSelectAll","afterRender","_renderSelectAll","handleKeyboardEvents","currentFocusedIndex","moveFocusUp","moveFocusDown","list","$selectAll","lastItemIndex","_getLastItemIndex","isFocusOutOfList","hasSelectAllItem","scrollToItem","handleEnterPressing","_this$_$selectAll","hasClass","target","get","_selectAllHandler","downArrowHandler","_supportedKeys","downArrow","bind","selectAllCheckBoxElement","_createComponent","registerKeyHandler","text","itemsContainer","prepend","_updateSelectAllAriaLabel","_attachSelectAllHandler","_ref2","_setOptionWithoutOptionChange","_createActionByOption","off","indeterminate","stateVariableName","label","attr","_this$_$selectAll2","stopPropagation","_saveSelectionChangeEvent","selectionDeferred","_selectAllItems","_unselectAllItems","_checkSelectAllCapability","dataController","_dataController","group","log","resolve","_selection","selectAll","deselectAll","isItemSelected","dispose","_disposeSelectAll","removeClass","remove"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/list/m_list.edit.decorator.selection.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/list/m_list.edit.decorator.selection.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport CheckBox from \"../../../ui/check_box\";\r\nimport RadioButton from \"../../../ui/radio_group/radio_button\";\r\nimport errors from \"../../../ui/widget/ui.errors\";\r\nimport EditDecorator from \"./m_list.edit.decorator\";\r\nimport {\r\n    register as registerDecorator\r\n} from \"./m_list.edit.decorator_registry\";\r\nconst SELECT_DECORATOR_ENABLED_CLASS = \"dx-list-select-decorator-enabled\";\r\nconst SELECT_DECORATOR_SELECT_ALL_CLASS = \"dx-list-select-all\";\r\nconst SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS = \"dx-list-select-all-checkbox\";\r\nconst SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS = \"dx-list-select-all-label\";\r\nconst SELECT_CHECKBOX_CONTAINER_CLASS = \"dx-list-select-checkbox-container\";\r\nconst SELECT_CHECKBOX_CLASS = \"dx-list-select-checkbox\";\r\nconst SELECT_RADIO_BUTTON_CONTAINER_CLASS = \"dx-list-select-radiobutton-container\";\r\nconst SELECT_RADIO_BUTTON_CLASS = \"dx-list-select-radiobutton\";\r\nconst FOCUSED_STATE_CLASS = \"dx-state-focused\";\r\nconst CLICK_EVENT_NAME = addNamespace(clickEventName, \"dxListEditDecorator\");\r\nclass EditDecoratorSelection extends EditDecorator {\r\n    _init() {\r\n        super._init.apply(this, arguments);\r\n        const selectionMode = this._list.option(\"selectionMode\");\r\n        this._singleStrategy = \"single\" === selectionMode;\r\n        this._containerClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CONTAINER_CLASS : SELECT_CHECKBOX_CONTAINER_CLASS;\r\n        this._controlClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CLASS : SELECT_CHECKBOX_CLASS;\r\n        this._controlWidget = this._singleStrategy ? RadioButton : CheckBox;\r\n        this._list.$element().addClass(SELECT_DECORATOR_ENABLED_CLASS)\r\n    }\r\n    beforeBag(config) {\r\n        const {\r\n            $itemElement: $itemElement\r\n        } = config;\r\n        const $container = config.$container.addClass(this._containerClass);\r\n        const $control = $(\"<div>\").addClass(this._controlClass).appendTo($container);\r\n        new this._controlWidget($control, extend(this._commonOptions(), {\r\n            value: this._isSelected($itemElement),\r\n            elementAttr: {\r\n                \"aria-label\": messageLocalization.format(\"CheckState\")\r\n            },\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            onValueChanged: _ref => {\r\n                let {\r\n                    value: value,\r\n                    component: component,\r\n                    event: event\r\n                } = _ref;\r\n                const isUiClick = !!event;\r\n                if (isUiClick) {\r\n                    component._valueChangeEventInstance = void 0;\r\n                    component.option(\"value\", !value)\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    modifyElement(config) {\r\n        super.modifyElement.apply(this, arguments);\r\n        const {\r\n            $itemElement: $itemElement\r\n        } = config;\r\n        const control = this._controlWidget.getInstance($itemElement.find(`.${this._controlClass}`));\r\n        eventsEngine.on($itemElement, \"stateChanged\", ((e, state) => {\r\n            control.option(\"value\", state)\r\n        }))\r\n    }\r\n    _updateSelectAllState() {\r\n        if (!this._$selectAll) {\r\n            return\r\n        }\r\n        this._selectAllCheckBox.option(\"value\", this._list.isSelectAll())\r\n    }\r\n    afterRender() {\r\n        if (\"all\" !== this._list.option(\"selectionMode\")) {\r\n            return\r\n        }\r\n        if (!this._$selectAll) {\r\n            this._renderSelectAll()\r\n        } else {\r\n            this._updateSelectAllState()\r\n        }\r\n    }\r\n    handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {\r\n        const moveFocusDown = !moveFocusUp;\r\n        const list = this._list;\r\n        const $selectAll = this._$selectAll;\r\n        const lastItemIndex = list._getLastItemIndex();\r\n        const isFocusOutOfList = moveFocusUp && 0 === currentFocusedIndex || moveFocusDown && currentFocusedIndex === lastItemIndex;\r\n        const hasSelectAllItem = !!$selectAll;\r\n        if (hasSelectAllItem && isFocusOutOfList) {\r\n            list.option(\"focusedElement\", $selectAll);\r\n            list.scrollToItem(list.option(\"focusedElement\"));\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    handleEnterPressing(e) {\r\n        var _this$_$selectAll;\r\n        if (null !== (_this$_$selectAll = this._$selectAll) && void 0 !== _this$_$selectAll && _this$_$selectAll.hasClass(\"dx-state-focused\")) {\r\n            e.target = this._$selectAll.get(0);\r\n            this._selectAllHandler(e);\r\n            return true\r\n        }\r\n    }\r\n    _renderSelectAll() {\r\n        this._$selectAll = $(\"<div>\").addClass(\"dx-list-select-all\");\r\n        const downArrowHandler = this._list._supportedKeys().downArrow.bind(this._list);\r\n        const selectAllCheckBoxElement = $(\"<div>\").addClass(\"dx-list-select-all-checkbox\").appendTo(this._$selectAll);\r\n        this._selectAllCheckBox = this._list._createComponent(selectAllCheckBoxElement, CheckBox, {\r\n            elementAttr: {\r\n                \"aria-label\": messageLocalization.format(\"dxList-selectAll\")\r\n            },\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false\r\n        });\r\n        this._selectAllCheckBox.registerKeyHandler(\"downArrow\", downArrowHandler);\r\n        $(\"<div>\").addClass(\"dx-list-select-all-label\").text(this._list.option(\"selectAllText\")).appendTo(this._$selectAll);\r\n        this._list.itemsContainer().prepend(this._$selectAll);\r\n        this._updateSelectAllState();\r\n        this._updateSelectAllAriaLabel();\r\n        this._attachSelectAllHandler()\r\n    }\r\n    _attachSelectAllHandler() {\r\n        this._selectAllCheckBox.option(\"onValueChanged\", (_ref2 => {\r\n            let {\r\n                value: value,\r\n                event: event,\r\n                component: component\r\n            } = _ref2;\r\n            const isUiClick = !!event;\r\n            if (isUiClick) {\r\n                component._setOptionWithoutOptionChange(\"value\", !value);\r\n                return\r\n            }\r\n            this._updateSelectAllAriaLabel();\r\n            this._list._createActionByOption(\"onSelectAllValueChanged\")({\r\n                value: value\r\n            })\r\n        }));\r\n        eventsEngine.off(this._$selectAll, CLICK_EVENT_NAME);\r\n        eventsEngine.on(this._$selectAll, CLICK_EVENT_NAME, this._selectAllHandler.bind(this))\r\n    }\r\n    _updateSelectAllAriaLabel() {\r\n        if (!this._$selectAll) {\r\n            return\r\n        }\r\n        const {\r\n            value: value\r\n        } = this._selectAllCheckBox.option();\r\n        const indeterminate = void 0 === value;\r\n        const stateVariableName = indeterminate ? \"indeterminate\" : value ? \"checked\" : \"notChecked\";\r\n        const label = `${messageLocalization.format(\"dxList-selectAll\")}, ${messageLocalization.format(`dxList-selectAll-${stateVariableName}`)}`;\r\n        this._$selectAll.attr({\r\n            \"aria-label\": label\r\n        })\r\n    }\r\n    _selectAllHandler(event) {\r\n        var _this$_$selectAll2;\r\n        event.stopPropagation();\r\n        this._list._saveSelectionChangeEvent(event);\r\n        const {\r\n            value: value\r\n        } = this._selectAllCheckBox.option();\r\n        let selectionDeferred;\r\n        if (true !== value) {\r\n            selectionDeferred = this._selectAllItems()\r\n        } else {\r\n            selectionDeferred = this._unselectAllItems()\r\n        }\r\n        this._list.option(\"focusedElement\", null === (_this$_$selectAll2 = this._$selectAll) || void 0 === _this$_$selectAll2 ? void 0 : _this$_$selectAll2.get(0));\r\n        return selectionDeferred\r\n    }\r\n    _checkSelectAllCapability() {\r\n        const list = this._list;\r\n        const dataController = list._dataController;\r\n        if (\"allPages\" === list.option(\"selectAllMode\") && list.option(\"grouped\") && !dataController.group()) {\r\n            errors.log(\"W1010\");\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    _selectAllItems() {\r\n        if (!this._checkSelectAllCapability()) {\r\n            return Deferred().resolve()\r\n        }\r\n        return this._list._selection.selectAll(\"page\" === this._list.option(\"selectAllMode\"))\r\n    }\r\n    _unselectAllItems() {\r\n        if (!this._checkSelectAllCapability()) {\r\n            return Deferred().resolve()\r\n        }\r\n        return this._list._selection.deselectAll(\"page\" === this._list.option(\"selectAllMode\"))\r\n    }\r\n    _isSelected($itemElement) {\r\n        return this._list.isItemSelected($itemElement)\r\n    }\r\n    dispose() {\r\n        this._disposeSelectAll();\r\n        this._list.$element().removeClass(SELECT_DECORATOR_ENABLED_CLASS);\r\n        super.dispose.apply(this, arguments)\r\n    }\r\n    _disposeSelectAll() {\r\n        if (this._$selectAll) {\r\n            this._$selectAll.remove();\r\n            this._$selectAll = null\r\n        }\r\n    }\r\n}\r\nregisterDecorator(\"selection\", \"default\", EditDecoratorSelection);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}