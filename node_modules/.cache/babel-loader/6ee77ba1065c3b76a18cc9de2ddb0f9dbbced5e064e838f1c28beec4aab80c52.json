{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/options/m_option_manager.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { normalizeOptions } from \"../../../core/options/utils\";\nimport { noop } from \"../../../core/utils/common\";\nimport { equals } from \"../../../core/utils/comparator\";\nimport { compileGetter, compileSetter, getPathParts } from \"../../../core/utils/data\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { isDefined, isPlainObject } from \"../../../core/utils/type\";\nconst cachedGetters = {};\nconst cachedSetters = {};\nexport class OptionManager {\n  constructor(options, optionsByReference) {\n    this._options = options;\n    this._optionsByReference = optionsByReference;\n    this._changingCallback;\n    this._changedCallback;\n    this._namePreparedCallbacks;\n    this._validateOptionsCallback;\n  }\n  _setByReference(options, rulesOptions) {\n    extend(true, options, rulesOptions);\n    for (const fieldName in this._optionsByReference) {\n      if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {\n        options[fieldName] = rulesOptions[fieldName];\n      }\n    }\n  }\n  _setPreparedValue(name, value, merge, silent) {\n    const previousValue = this.get(this._options, name, false);\n    if (!equals(previousValue, value)) {\n      const path = getPathParts(name);\n      !silent && this._changingCallback(name, previousValue, value);\n      cachedSetters[name] = cachedSetters[name] || compileSetter(name);\n      cachedSetters[name](this._options, value, {\n        functionsAsIs: true,\n        merge: isDefined(merge) ? merge : !this._optionsByReference[name],\n        unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]\n      });\n      !silent && this._changedCallback(name, value, previousValue);\n    }\n  }\n  _prepareRelevantNames(options, name, value, silent) {\n    if (isPlainObject(value)) {\n      for (const valueName in value) {\n        this._prepareRelevantNames(options, `${name}.${valueName}`, value[valueName]);\n      }\n    }\n    this._namePreparedCallbacks(options, name, value, silent);\n  }\n  get() {\n    let options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._options;\n    let name = arguments.length > 1 ? arguments[1] : void 0;\n    let unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;\n    cachedGetters[name] = cachedGetters[name] || compileGetter(name);\n    return cachedGetters[name](options, {\n      functionsAsIs: true,\n      unwrapObservables: unwrapObservables\n    });\n  }\n  set(options, value, merge, silent) {\n    options = normalizeOptions(options, value);\n    for (const name in options) {\n      this._prepareRelevantNames(options, name, options[name], silent);\n    }\n    if (this._validateOptionsCallback) {\n      options = this._validateOptionsCallback(options);\n    }\n    for (const name in options) {\n      this._setPreparedValue(name, options[name], merge, silent);\n    }\n  }\n  onRelevantNamesPrepared(callBack) {\n    this._namePreparedCallbacks = callBack;\n  }\n  onChanging(callBack) {\n    this._changingCallback = callBack;\n  }\n  onChanged(callBack) {\n    this._changedCallback = callBack;\n  }\n  onValidateOptions(callback) {\n    this._validateOptionsCallback = callback;\n  }\n  dispose() {\n    this._changingCallback = noop;\n    this._changedCallback = noop;\n  }\n}","map":{"version":3,"names":["normalizeOptions","noop","equals","compileGetter","compileSetter","getPathParts","extend","isDefined","isPlainObject","cachedGetters","cachedSetters","OptionManager","constructor","options","optionsByReference","_options","_optionsByReference","_changingCallback","_changedCallback","_namePreparedCallbacks","_validateOptionsCallback","_setByReference","rulesOptions","fieldName","Object","prototype","hasOwnProperty","call","_setPreparedValue","name","value","merge","silent","previousValue","get","path","functionsAsIs","unwrapObservables","length","_prepareRelevantNames","valueName","arguments","set","onRelevantNamesPrepared","callBack","onChanging","onChanged","onValidateOptions","callback","dispose"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/options/m_option_manager.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/options/m_option_manager.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    normalizeOptions\r\n} from \"../../../core/options/utils\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    equals\r\n} from \"../../../core/utils/comparator\";\r\nimport {\r\n    compileGetter,\r\n    compileSetter,\r\n    getPathParts\r\n} from \"../../../core/utils/data\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject\r\n} from \"../../../core/utils/type\";\r\nconst cachedGetters = {};\r\nconst cachedSetters = {};\r\nexport class OptionManager {\r\n    constructor(options, optionsByReference) {\r\n        this._options = options;\r\n        this._optionsByReference = optionsByReference;\r\n        this._changingCallback;\r\n        this._changedCallback;\r\n        this._namePreparedCallbacks;\r\n        this._validateOptionsCallback\r\n    }\r\n    _setByReference(options, rulesOptions) {\r\n        extend(true, options, rulesOptions);\r\n        for (const fieldName in this._optionsByReference) {\r\n            if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {\r\n                options[fieldName] = rulesOptions[fieldName]\r\n            }\r\n        }\r\n    }\r\n    _setPreparedValue(name, value, merge, silent) {\r\n        const previousValue = this.get(this._options, name, false);\r\n        if (!equals(previousValue, value)) {\r\n            const path = getPathParts(name);\r\n            !silent && this._changingCallback(name, previousValue, value);\r\n            cachedSetters[name] = cachedSetters[name] || compileSetter(name);\r\n            cachedSetters[name](this._options, value, {\r\n                functionsAsIs: true,\r\n                merge: isDefined(merge) ? merge : !this._optionsByReference[name],\r\n                unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]\r\n            });\r\n            !silent && this._changedCallback(name, value, previousValue)\r\n        }\r\n    }\r\n    _prepareRelevantNames(options, name, value, silent) {\r\n        if (isPlainObject(value)) {\r\n            for (const valueName in value) {\r\n                this._prepareRelevantNames(options, `${name}.${valueName}`, value[valueName])\r\n            }\r\n        }\r\n        this._namePreparedCallbacks(options, name, value, silent)\r\n    }\r\n    get() {\r\n        let options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._options;\r\n        let name = arguments.length > 1 ? arguments[1] : void 0;\r\n        let unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;\r\n        cachedGetters[name] = cachedGetters[name] || compileGetter(name);\r\n        return cachedGetters[name](options, {\r\n            functionsAsIs: true,\r\n            unwrapObservables: unwrapObservables\r\n        })\r\n    }\r\n    set(options, value, merge, silent) {\r\n        options = normalizeOptions(options, value);\r\n        for (const name in options) {\r\n            this._prepareRelevantNames(options, name, options[name], silent)\r\n        }\r\n        if (this._validateOptionsCallback) {\r\n            options = this._validateOptionsCallback(options)\r\n        }\r\n        for (const name in options) {\r\n            this._setPreparedValue(name, options[name], merge, silent)\r\n        }\r\n    }\r\n    onRelevantNamesPrepared(callBack) {\r\n        this._namePreparedCallbacks = callBack\r\n    }\r\n    onChanging(callBack) {\r\n        this._changingCallback = callBack\r\n    }\r\n    onChanged(callBack) {\r\n        this._changedCallback = callBack\r\n    }\r\n    onValidateOptions(callback) {\r\n        this._validateOptionsCallback = callback\r\n    }\r\n    dispose() {\r\n        this._changingCallback = noop;\r\n        this._changedCallback = noop\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}