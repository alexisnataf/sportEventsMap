{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_object.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isNumeric, isObject, isPlainObject } from \"../../../core/utils/type\";\nimport variableWrapper from \"../../../core/utils/variable_wrapper\";\nconst clone = function () {\n  function Clone() {}\n  return function (obj) {\n    Clone.prototype = obj;\n    return new Clone();\n  };\n}();\nconst orderEach = function (map, func) {\n  const keys = [];\n  let key;\n  let i;\n  for (key in map) {\n    if (Object.prototype.hasOwnProperty.call(map, key)) {\n      keys.push(key);\n    }\n  }\n  keys.sort(function (x, y) {\n    const isNumberX = isNumeric(x);\n    const isNumberY = isNumeric(y);\n    if (isNumberX && isNumberY) {\n      return x - y;\n    }\n    if (isNumberX && !isNumberY) {\n      return -1;\n    }\n    if (!isNumberX && isNumberY) {\n      return 1;\n    }\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  });\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i];\n    func(key, map[key]);\n  }\n};\nconst getDeepCopyTarget = item => {\n  if (isObject(item)) {\n    return Array.isArray(item) ? [] : {};\n  }\n  return item;\n};\nconst legacyAssign = function (target, property, value, extendComplexObject, assignByReference, shouldCopyUndefined) {\n  if (!assignByReference && variableWrapper.isWrapped(target[property])) {\n    variableWrapper.assign(target[property], value);\n  } else {\n    target[property] = value;\n  }\n};\nconst newAssign = function (target, property, value, extendComplexObject, assignByReference, shouldCopyUndefined) {\n  const goDeeper = extendComplexObject ? isObject(target) : isPlainObject(target);\n  if (!assignByReference && variableWrapper.isWrapped(target[property])) {\n    variableWrapper.assign(target[property], value);\n  } else if (!assignByReference && Array.isArray(value)) {\n    target[property] = value.map(item => deepExtendArraySafe(getDeepCopyTarget(item), item, extendComplexObject, assignByReference, shouldCopyUndefined));\n  } else if (!assignByReference && goDeeper) {\n    target[property] = deepExtendArraySafe(getDeepCopyTarget(value), value, extendComplexObject, assignByReference, shouldCopyUndefined, newAssign);\n  } else {\n    target[property] = value;\n  }\n};\nconst deepExtendArraySafe = function (target, changes, extendComplexObject, assignByReference, shouldCopyUndefined, useNewAssign) {\n  let prevValue;\n  let newValue;\n  const assignFunc = useNewAssign ? newAssign : legacyAssign;\n  for (const name in changes) {\n    prevValue = target[name];\n    newValue = changes[name];\n    if (\"__proto__\" === name || \"constructor\" === name || target === newValue) {\n      continue;\n    }\n    if (isPlainObject(newValue)) {\n      const goDeeper = extendComplexObject ? isObject(prevValue) : isPlainObject(prevValue);\n      newValue = deepExtendArraySafe(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference, shouldCopyUndefined);\n    }\n    const isDeepCopyArray = Array.isArray(newValue) && !assignByReference;\n    const hasDifferentNewValue = (shouldCopyUndefined || void 0 !== newValue) && prevValue !== newValue || shouldCopyUndefined && void 0 === prevValue;\n    if (isDeepCopyArray || hasDifferentNewValue) {\n      assignFunc(target, name, newValue, extendComplexObject, assignByReference, shouldCopyUndefined);\n    }\n  }\n  return target;\n};\nexport { clone, deepExtendArraySafe, legacyAssign, newAssign, orderEach };","map":{"version":3,"names":["isNumeric","isObject","isPlainObject","variableWrapper","clone","Clone","obj","prototype","orderEach","map","func","keys","key","i","Object","hasOwnProperty","call","push","sort","x","y","isNumberX","isNumberY","length","getDeepCopyTarget","item","Array","isArray","legacyAssign","target","property","value","extendComplexObject","assignByReference","shouldCopyUndefined","isWrapped","assign","newAssign","goDeeper","deepExtendArraySafe","changes","useNewAssign","prevValue","newValue","assignFunc","name","isDeepCopyArray","hasDifferentNewValue"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_object.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_object.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isNumeric,\r\n    isObject,\r\n    isPlainObject\r\n} from \"../../../core/utils/type\";\r\nimport variableWrapper from \"../../../core/utils/variable_wrapper\";\r\nconst clone = function() {\r\n    function Clone() {}\r\n    return function(obj) {\r\n        Clone.prototype = obj;\r\n        return new Clone\r\n    }\r\n}();\r\nconst orderEach = function(map, func) {\r\n    const keys = [];\r\n    let key;\r\n    let i;\r\n    for (key in map) {\r\n        if (Object.prototype.hasOwnProperty.call(map, key)) {\r\n            keys.push(key)\r\n        }\r\n    }\r\n    keys.sort((function(x, y) {\r\n        const isNumberX = isNumeric(x);\r\n        const isNumberY = isNumeric(y);\r\n        if (isNumberX && isNumberY) {\r\n            return x - y\r\n        }\r\n        if (isNumberX && !isNumberY) {\r\n            return -1\r\n        }\r\n        if (!isNumberX && isNumberY) {\r\n            return 1\r\n        }\r\n        if (x < y) {\r\n            return -1\r\n        }\r\n        if (x > y) {\r\n            return 1\r\n        }\r\n        return 0\r\n    }));\r\n    for (i = 0; i < keys.length; i++) {\r\n        key = keys[i];\r\n        func(key, map[key])\r\n    }\r\n};\r\nconst getDeepCopyTarget = item => {\r\n    if (isObject(item)) {\r\n        return Array.isArray(item) ? [] : {}\r\n    }\r\n    return item\r\n};\r\nconst legacyAssign = function(target, property, value, extendComplexObject, assignByReference, shouldCopyUndefined) {\r\n    if (!assignByReference && variableWrapper.isWrapped(target[property])) {\r\n        variableWrapper.assign(target[property], value)\r\n    } else {\r\n        target[property] = value\r\n    }\r\n};\r\nconst newAssign = function(target, property, value, extendComplexObject, assignByReference, shouldCopyUndefined) {\r\n    const goDeeper = extendComplexObject ? isObject(target) : isPlainObject(target);\r\n    if (!assignByReference && variableWrapper.isWrapped(target[property])) {\r\n        variableWrapper.assign(target[property], value)\r\n    } else if (!assignByReference && Array.isArray(value)) {\r\n        target[property] = value.map((item => deepExtendArraySafe(getDeepCopyTarget(item), item, extendComplexObject, assignByReference, shouldCopyUndefined)))\r\n    } else if (!assignByReference && goDeeper) {\r\n        target[property] = deepExtendArraySafe(getDeepCopyTarget(value), value, extendComplexObject, assignByReference, shouldCopyUndefined, newAssign)\r\n    } else {\r\n        target[property] = value\r\n    }\r\n};\r\nconst deepExtendArraySafe = function(target, changes, extendComplexObject, assignByReference, shouldCopyUndefined, useNewAssign) {\r\n    let prevValue;\r\n    let newValue;\r\n    const assignFunc = useNewAssign ? newAssign : legacyAssign;\r\n    for (const name in changes) {\r\n        prevValue = target[name];\r\n        newValue = changes[name];\r\n        if (\"__proto__\" === name || \"constructor\" === name || target === newValue) {\r\n            continue\r\n        }\r\n        if (isPlainObject(newValue)) {\r\n            const goDeeper = extendComplexObject ? isObject(prevValue) : isPlainObject(prevValue);\r\n            newValue = deepExtendArraySafe(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference, shouldCopyUndefined)\r\n        }\r\n        const isDeepCopyArray = Array.isArray(newValue) && !assignByReference;\r\n        const hasDifferentNewValue = (shouldCopyUndefined || void 0 !== newValue) && prevValue !== newValue || shouldCopyUndefined && void 0 === prevValue;\r\n        if (isDeepCopyArray || hasDifferentNewValue) {\r\n            assignFunc(target, name, newValue, extendComplexObject, assignByReference, shouldCopyUndefined)\r\n        }\r\n    }\r\n    return target\r\n};\r\nexport {\r\n    clone,\r\n    deepExtendArraySafe,\r\n    legacyAssign,\r\n    newAssign,\r\n    orderEach\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}