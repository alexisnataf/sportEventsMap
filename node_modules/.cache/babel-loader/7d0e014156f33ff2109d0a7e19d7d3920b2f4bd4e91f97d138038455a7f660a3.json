{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/license/rsa_bigint.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nexport function compareSignatures(args) {\n  try {\n    const zero = BigInt(0);\n    const one = BigInt(1);\n    const eight = BigInt(8);\n    const modExp = (base, exponent, modulus) => {\n      let result = one;\n      let b = base;\n      let e = exponent;\n      while (e) {\n        if (e & one) {\n          result = result * b % modulus;\n        }\n        b = b * b % modulus;\n        e >>= one;\n      }\n      return result;\n    };\n    const bigIntFromBytes = bytes => bytes.reduce((acc, cur) => (acc << eight) + BigInt(cur), zero);\n    const actual = bigIntFromBytes(args.actual);\n    const signature = bigIntFromBytes(args.signature);\n    const exponent = BigInt(args.key.e);\n    const modulus = bigIntFromBytes(args.key.n);\n    const expected = modExp(signature, exponent, modulus);\n    return expected === actual;\n  } catch {\n    return true;\n  }\n}","map":{"version":3,"names":["compareSignatures","args","zero","BigInt","one","eight","modExp","base","exponent","modulus","result","b","e","bigIntFromBytes","bytes","reduce","acc","cur","actual","signature","key","n","expected"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/license/rsa_bigint.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/license/rsa_bigint.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nexport function compareSignatures(args) {\r\n    try {\r\n        const zero = BigInt(0);\r\n        const one = BigInt(1);\r\n        const eight = BigInt(8);\r\n        const modExp = (base, exponent, modulus) => {\r\n            let result = one;\r\n            let b = base;\r\n            let e = exponent;\r\n            while (e) {\r\n                if (e & one) {\r\n                    result = result * b % modulus\r\n                }\r\n                b = b * b % modulus;\r\n                e >>= one\r\n            }\r\n            return result\r\n        };\r\n        const bigIntFromBytes = bytes => bytes.reduce(((acc, cur) => (acc << eight) + BigInt(cur)), zero);\r\n        const actual = bigIntFromBytes(args.actual);\r\n        const signature = bigIntFromBytes(args.signature);\r\n        const exponent = BigInt(args.key.e);\r\n        const modulus = bigIntFromBytes(args.key.n);\r\n        const expected = modExp(signature, exponent, modulus);\r\n        return expected === actual\r\n    } catch {\r\n        return true\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,IAAI,EAAE;EACpC,IAAI;IACA,MAAMC,IAAI,GAAGC,MAAM,CAAC,CAAC,CAAC;IACtB,MAAMC,GAAG,GAAGD,MAAM,CAAC,CAAC,CAAC;IACrB,MAAME,KAAK,GAAGF,MAAM,CAAC,CAAC,CAAC;IACvB,MAAMG,MAAM,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,KAAK;MACxC,IAAIC,MAAM,GAAGN,GAAG;MAChB,IAAIO,CAAC,GAAGJ,IAAI;MACZ,IAAIK,CAAC,GAAGJ,QAAQ;MAChB,OAAOI,CAAC,EAAE;QACN,IAAIA,CAAC,GAAGR,GAAG,EAAE;UACTM,MAAM,GAAGA,MAAM,GAAGC,CAAC,GAAGF,OAAO;QACjC;QACAE,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAGF,OAAO;QACnBG,CAAC,KAAKR,GAAG;MACb;MACA,OAAOM,MAAM;IACjB,CAAC;IACD,MAAMG,eAAe,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAAM,CAAE,CAACC,GAAG,EAAEC,GAAG,KAAK,CAACD,GAAG,IAAIX,KAAK,IAAIF,MAAM,CAACc,GAAG,CAAC,EAAGf,IAAI,CAAC;IACjG,MAAMgB,MAAM,GAAGL,eAAe,CAACZ,IAAI,CAACiB,MAAM,CAAC;IAC3C,MAAMC,SAAS,GAAGN,eAAe,CAACZ,IAAI,CAACkB,SAAS,CAAC;IACjD,MAAMX,QAAQ,GAAGL,MAAM,CAACF,IAAI,CAACmB,GAAG,CAACR,CAAC,CAAC;IACnC,MAAMH,OAAO,GAAGI,eAAe,CAACZ,IAAI,CAACmB,GAAG,CAACC,CAAC,CAAC;IAC3C,MAAMC,QAAQ,GAAGhB,MAAM,CAACa,SAAS,EAAEX,QAAQ,EAAEC,OAAO,CAAC;IACrD,OAAOa,QAAQ,KAAKJ,MAAM;EAC9B,CAAC,CAAC,MAAM;IACJ,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}