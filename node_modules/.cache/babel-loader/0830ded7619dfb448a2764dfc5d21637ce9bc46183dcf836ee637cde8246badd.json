{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/scheduler/utils/data_accessor/appointment_data_accessor.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { compileGetter, compileSetter } from \"../../../../core/utils/data\";\nimport dateSerialization from \"../../../../core/utils/date_serialization\";\nimport { DataAccessor } from \"./data_accessor\";\nconst isDateField = field => \"startDate\" === field || \"endDate\" === field;\nexport class AppointmentDataAccessor extends DataAccessor {\n  constructor(fields) {\n    let forceIsoDateParsing = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\n    let dateSerializationFormat = arguments.length > 2 ? arguments[2] : void 0;\n    super();\n    this.forceIsoDateParsing = forceIsoDateParsing;\n    this.dateSerializationFormat = dateSerializationFormat;\n    this.expr = _extends({}, fields);\n    this.updateExpressions(fields);\n  }\n  getCommonAccessExpressions(expr) {\n    return {\n      getter: compileGetter(expr),\n      setter: compileSetter(expr)\n    };\n  }\n  getDateFieldAccessExpressions(expr) {\n    const {\n      getter: commonGetter,\n      setter: commonSetter\n    } = this.getCommonAccessExpressions(expr);\n    let serializationFormatCache;\n    return {\n      getter: object => this.forceIsoDateParsing ? dateSerialization.deserializeDate(commonGetter(object)) : commonGetter(object),\n      setter: (object, value) => {\n        if (this.dateSerializationFormat) {\n          serializationFormatCache = this.dateSerializationFormat;\n        } else if (this.forceIsoDateParsing && !serializationFormatCache) {\n          const oldValue = commonGetter(object);\n          serializationFormatCache = dateSerialization.getDateSerializationFormat(oldValue);\n        }\n        const newValue = dateSerialization.serializeDate(value, serializationFormatCache);\n        commonSetter(object, newValue);\n      }\n    };\n  }\n  getAccessExpressions(name, expr) {\n    return isDateField(name) ? this.getDateFieldAccessExpressions(expr) : this.getCommonAccessExpressions(expr);\n  }\n  updateExpression(field, expr) {\n    const name = field.replace(\"Expr\", \"\");\n    if (!expr) {\n      delete this.getter[name];\n      delete this.setter[name];\n      delete this.expr[field];\n      return;\n    }\n    const {\n      getter: getter,\n      setter: setter\n    } = this.getAccessExpressions(name, expr);\n    this.getter[name] = getter;\n    this.setter[name] = setter;\n    this.expr[field] = expr;\n  }\n}","map":{"version":3,"names":["_extends","compileGetter","compileSetter","dateSerialization","DataAccessor","isDateField","field","AppointmentDataAccessor","constructor","fields","forceIsoDateParsing","arguments","length","dateSerializationFormat","expr","updateExpressions","getCommonAccessExpressions","getter","setter","getDateFieldAccessExpressions","commonGetter","commonSetter","serializationFormatCache","object","deserializeDate","value","oldValue","getDateSerializationFormat","newValue","serializeDate","getAccessExpressions","name","updateExpression","replace"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/scheduler/utils/data_accessor/appointment_data_accessor.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/scheduler/utils/data_accessor/appointment_data_accessor.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    compileGetter,\r\n    compileSetter\r\n} from \"../../../../core/utils/data\";\r\nimport dateSerialization from \"../../../../core/utils/date_serialization\";\r\nimport {\r\n    DataAccessor\r\n} from \"./data_accessor\";\r\nconst isDateField = field => \"startDate\" === field || \"endDate\" === field;\r\nexport class AppointmentDataAccessor extends DataAccessor {\r\n    constructor(fields) {\r\n        let forceIsoDateParsing = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\r\n        let dateSerializationFormat = arguments.length > 2 ? arguments[2] : void 0;\r\n        super();\r\n        this.forceIsoDateParsing = forceIsoDateParsing;\r\n        this.dateSerializationFormat = dateSerializationFormat;\r\n        this.expr = _extends({}, fields);\r\n        this.updateExpressions(fields)\r\n    }\r\n    getCommonAccessExpressions(expr) {\r\n        return {\r\n            getter: compileGetter(expr),\r\n            setter: compileSetter(expr)\r\n        }\r\n    }\r\n    getDateFieldAccessExpressions(expr) {\r\n        const {\r\n            getter: commonGetter,\r\n            setter: commonSetter\r\n        } = this.getCommonAccessExpressions(expr);\r\n        let serializationFormatCache;\r\n        return {\r\n            getter: object => this.forceIsoDateParsing ? dateSerialization.deserializeDate(commonGetter(object)) : commonGetter(object),\r\n            setter: (object, value) => {\r\n                if (this.dateSerializationFormat) {\r\n                    serializationFormatCache = this.dateSerializationFormat\r\n                } else if (this.forceIsoDateParsing && !serializationFormatCache) {\r\n                    const oldValue = commonGetter(object);\r\n                    serializationFormatCache = dateSerialization.getDateSerializationFormat(oldValue)\r\n                }\r\n                const newValue = dateSerialization.serializeDate(value, serializationFormatCache);\r\n                commonSetter(object, newValue)\r\n            }\r\n        }\r\n    }\r\n    getAccessExpressions(name, expr) {\r\n        return isDateField(name) ? this.getDateFieldAccessExpressions(expr) : this.getCommonAccessExpressions(expr)\r\n    }\r\n    updateExpression(field, expr) {\r\n        const name = field.replace(\"Expr\", \"\");\r\n        if (!expr) {\r\n            delete this.getter[name];\r\n            delete this.setter[name];\r\n            delete this.expr[field];\r\n            return\r\n        }\r\n        const {\r\n            getter: getter,\r\n            setter: setter\r\n        } = this.getAccessExpressions(name, expr);\r\n        this.getter[name] = getter;\r\n        this.setter[name] = setter;\r\n        this.expr[field] = expr\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}