{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/resizable/m_resizable.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { locate, move } from \"../../../common/core/animation/translator\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { end as dragEventEnd, move as dragEventMove, start as dragEventStart } from \"../../../common/core/events/drag\";\nimport { addNamespace } from \"../../../common/core/events/utils/index\";\nimport { triggerResizeEvent } from \"../../../common/core/events/visibility_change\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport $ from \"../../../core/renderer\";\nimport { pairToObject } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { fitIntoRange, inRange } from \"../../../core/utils/math\";\nimport { getHeight, getInnerHeight, getInnerWidth, getOuterHeight, getOuterWidth, getWidth } from \"../../../core/utils/size\";\nimport { isFunction, isPlainObject, isWindow } from \"../../../core/utils/type\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport DOMComponent from \"../../core/widget/dom_component\";\nconst RESIZABLE = \"dxResizable\";\nconst RESIZABLE_CLASS = \"dx-resizable\";\nconst RESIZABLE_RESIZING_CLASS = \"dx-resizable-resizing\";\nconst RESIZABLE_HANDLE_CLASS = \"dx-resizable-handle\";\nconst RESIZABLE_HANDLE_TOP_CLASS = \"dx-resizable-handle-top\";\nconst RESIZABLE_HANDLE_BOTTOM_CLASS = \"dx-resizable-handle-bottom\";\nconst RESIZABLE_HANDLE_LEFT_CLASS = \"dx-resizable-handle-left\";\nconst RESIZABLE_HANDLE_RIGHT_CLASS = \"dx-resizable-handle-right\";\nconst RESIZABLE_HANDLE_CORNER_CLASS = \"dx-resizable-handle-corner\";\nconst DRAGSTART_START_EVENT_NAME = addNamespace(dragEventStart, RESIZABLE);\nconst DRAGSTART_EVENT_NAME = addNamespace(dragEventMove, RESIZABLE);\nconst DRAGSTART_END_EVENT_NAME = addNamespace(dragEventEnd, RESIZABLE);\nconst SIDE_BORDER_WIDTH_STYLES = {\n  left: \"borderLeftWidth\",\n  top: \"borderTopWidth\",\n  right: \"borderRightWidth\",\n  bottom: \"borderBottomWidth\"\n};\nclass Resizable extends DOMComponent {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      handles: \"all\",\n      step: \"1\",\n      stepPrecision: \"simple\",\n      minWidth: 30,\n      maxWidth: 1 / 0,\n      minHeight: 30,\n      maxHeight: 1 / 0,\n      onResizeStart: null,\n      onResize: null,\n      onResizeEnd: null,\n      roundStepValue: true,\n      keepAspectRatio: true\n    });\n  }\n  _init() {\n    super._init();\n    this.$element().addClass(\"dx-resizable\");\n  }\n  _initMarkup() {\n    super._initMarkup();\n    this._renderHandles();\n  }\n  _render() {\n    super._render();\n    this._renderActions();\n  }\n  _renderActions() {\n    this._resizeStartAction = this._createActionByOption(\"onResizeStart\");\n    this._resizeEndAction = this._createActionByOption(\"onResizeEnd\");\n    this._resizeAction = this._createActionByOption(\"onResize\");\n  }\n  _renderHandles() {\n    this._handles = [];\n    const {\n      handles: handles\n    } = this.option();\n    if (\"none\" === handles || !handles) {\n      return;\n    }\n    const directions = \"all\" === handles ? [\"top\", \"bottom\", \"left\", \"right\"] : handles.split(\" \");\n    const activeHandlesMap = {};\n    each(directions, (index, handleName) => {\n      activeHandlesMap[handleName] = true;\n      this._renderHandle(handleName);\n    });\n    activeHandlesMap.bottom && activeHandlesMap.right && this._renderHandle(\"corner-bottom-right\");\n    activeHandlesMap.bottom && activeHandlesMap.left && this._renderHandle(\"corner-bottom-left\");\n    activeHandlesMap.top && activeHandlesMap.right && this._renderHandle(\"corner-top-right\");\n    activeHandlesMap.top && activeHandlesMap.left && this._renderHandle(\"corner-top-left\");\n    this._attachEventHandlers();\n  }\n  _renderHandle(handleName) {\n    const $handle = $(\"<div>\").addClass(\"dx-resizable-handle\").addClass(`dx-resizable-handle-${handleName}`).appendTo(this.$element());\n    this._handles.push($handle);\n  }\n  _attachEventHandlers() {\n    if (this.option(\"disabled\")) {\n      return;\n    }\n    const handlers = {};\n    handlers[DRAGSTART_START_EVENT_NAME] = this._dragStartHandler.bind(this);\n    handlers[DRAGSTART_EVENT_NAME] = this._dragHandler.bind(this);\n    handlers[DRAGSTART_END_EVENT_NAME] = this._dragEndHandler.bind(this);\n    this._handles.forEach(handleElement => {\n      eventsEngine.on(handleElement, handlers, {\n        direction: \"both\",\n        immediate: true\n      });\n    });\n  }\n  _detachEventHandlers() {\n    this._handles.forEach(handleElement => {\n      eventsEngine.off(handleElement);\n    });\n  }\n  _toggleEventHandlers(shouldAttachEvents) {\n    shouldAttachEvents ? this._attachEventHandlers() : this._detachEventHandlers();\n  }\n  _getElementSize() {\n    const $element = this.$element();\n    return \"border-box\" === $element.css(\"boxSizing\") ? {\n      width: getOuterWidth($element),\n      height: getOuterHeight($element)\n    } : {\n      width: getWidth($element),\n      height: getHeight($element)\n    };\n  }\n  _dragStartHandler(e) {\n    var _this$_resizeStartAct;\n    const $element = this.$element();\n    if ($element.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      e.cancel = true;\n      return;\n    }\n    this._toggleResizingClass(true);\n    this._movingSides = this._getMovingSides(e);\n    this._elementLocation = locate($element);\n    this._elementSize = this._getElementSize();\n    this._renderDragOffsets(e);\n    null === (_this$_resizeStartAct = this._resizeStartAction) || void 0 === _this$_resizeStartAct || _this$_resizeStartAct.call(this, {\n      event: e,\n      width: this._elementSize.width,\n      height: this._elementSize.height,\n      handles: this._movingSides\n    });\n    e.targetElements = null;\n  }\n  _toggleResizingClass(value) {\n    this.$element().toggleClass(\"dx-resizable-resizing\", value);\n  }\n  _renderDragOffsets(e) {\n    const area = this._getArea();\n    if (!area) {\n      return;\n    }\n    const $handle = $(e.target).closest(\".dx-resizable-handle\");\n    const handleWidth = getOuterWidth($handle);\n    const handleHeight = getOuterHeight($handle);\n    const handleOffset = $handle.offset();\n    const areaOffset = area.offset;\n    const scrollOffset = this._getAreaScrollOffset();\n    e.maxLeftOffset = this._leftMaxOffset = handleOffset.left - areaOffset.left - scrollOffset.scrollX;\n    e.maxRightOffset = this._rightMaxOffset = areaOffset.left + area.width - handleOffset.left - handleWidth + scrollOffset.scrollX;\n    e.maxTopOffset = this._topMaxOffset = handleOffset.top - areaOffset.top - scrollOffset.scrollY;\n    e.maxBottomOffset = this._bottomMaxOffset = areaOffset.top + area.height - handleOffset.top - handleHeight + scrollOffset.scrollY;\n  }\n  _getBorderWidth($element, direction) {\n    if (isWindow($element.get(0))) {\n      return 0;\n    }\n    const borderWidth = $element.css(SIDE_BORDER_WIDTH_STYLES[direction]);\n    return parseInt(borderWidth) || 0;\n  }\n  _proportionate(direction, value) {\n    const size = this._elementSize;\n    const factor = \"x\" === direction ? size.width / size.height : size.height / size.width;\n    return value * factor;\n  }\n  _getProportionalDelta(_ref) {\n    let {\n      x: x,\n      y: y\n    } = _ref;\n    const proportionalY = this._proportionate(\"y\", x);\n    if (proportionalY >= y) {\n      return {\n        x: x,\n        y: proportionalY\n      };\n    }\n    const proportionalX = this._proportionate(\"x\", y);\n    if (proportionalX >= x) {\n      return {\n        x: proportionalX,\n        y: y\n      };\n    }\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  _getDirectionName(axis) {\n    const sides = this._movingSides;\n    if (\"x\" === axis) {\n      return sides.left ? \"left\" : \"right\";\n    }\n    return sides.top ? \"top\" : \"bottom\";\n  }\n  _fitIntoArea(axis, value) {\n    const directionName = this._getDirectionName(axis);\n    return Math.min(value, this[`_${directionName}MaxOffset`] ?? 1 / 0);\n  }\n  _fitDeltaProportionally(delta) {\n    let fittedDelta = _extends({}, delta);\n    const size = this._elementSize;\n    const {\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxWidth: maxWidth,\n      maxHeight: maxHeight\n    } = this.option();\n    const getWidth = () => size.width + fittedDelta.x;\n    const getHeight = () => size.height + fittedDelta.y;\n    const isInArea = axis => fittedDelta[axis] === this._fitIntoArea(axis, fittedDelta[axis]);\n    const isFittedX = () => inRange(getWidth(), minWidth, maxWidth) && isInArea(\"x\");\n    const isFittedY = () => inRange(getHeight(), minHeight, maxHeight) && isInArea(\"y\");\n    if (!isFittedX()) {\n      const x = this._fitIntoArea(\"x\", fitIntoRange(getWidth(), minWidth, maxWidth) - size.width);\n      fittedDelta = {\n        x: x,\n        y: this._proportionate(\"y\", x)\n      };\n    }\n    if (!isFittedY()) {\n      const y = this._fitIntoArea(\"y\", fitIntoRange(getHeight(), minHeight, maxHeight) - size.height);\n      fittedDelta = {\n        x: this._proportionate(\"x\", y),\n        y: y\n      };\n    }\n    return isFittedX() && isFittedY() ? fittedDelta : {\n      x: 0,\n      y: 0\n    };\n  }\n  _fitDelta(_ref2) {\n    let {\n      x: x,\n      y: y\n    } = _ref2;\n    const size = this._elementSize;\n    const {\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxWidth: maxWidth,\n      maxHeight: maxHeight\n    } = this.option();\n    return {\n      x: fitIntoRange(size.width + x, minWidth, maxWidth) - size.width,\n      y: fitIntoRange(size.height + y, minHeight, maxHeight) - size.height\n    };\n  }\n  _getDeltaByOffset(offset) {\n    const sides = this._movingSides;\n    const shouldKeepAspectRatio = this._isCornerHandler(sides) && this.option(\"keepAspectRatio\");\n    let delta = {\n      x: offset.x * (sides.left ? -1 : 1),\n      y: offset.y * (sides.top ? -1 : 1)\n    };\n    if (shouldKeepAspectRatio) {\n      const proportionalDelta = this._getProportionalDelta(delta);\n      const fittedProportionalDelta = this._fitDeltaProportionally(proportionalDelta);\n      delta = fittedProportionalDelta;\n    } else {\n      const fittedDelta = this._fitDelta(delta);\n      const roundedFittedDelta = this._roundByStep(fittedDelta);\n      delta = roundedFittedDelta;\n    }\n    return delta;\n  }\n  _updatePosition(delta, _ref3) {\n    let {\n      width: width,\n      height: height\n    } = _ref3;\n    const location = this._elementLocation;\n    const sides = this._movingSides;\n    const $element = this.$element();\n    const elementRect = this._getElementSize();\n    const offsetTop = delta.y * (sides.top ? -1 : 1) - ((elementRect.height || height) - height);\n    const offsetLeft = delta.x * (sides.left ? -1 : 1) - ((elementRect.width || width) - width);\n    move($element, {\n      top: location.top + (sides.top ? offsetTop : 0),\n      left: location.left + (sides.left ? offsetLeft : 0)\n    });\n  }\n  _dragHandler(e) {\n    const offset = this._getOffset(e);\n    const delta = this._getDeltaByOffset(offset);\n    const dimensions = this._updateDimensions(delta);\n    this._updatePosition(delta, dimensions);\n    this._triggerResizeAction(e, dimensions);\n  }\n  _updateDimensions(delta) {\n    const isAbsoluteSize = size => \"px\" === size.substring(size.length - 2);\n    const {\n      stepPrecision: stepPrecision\n    } = this.option();\n    const isStepPrecisionStrict = \"strict\" === stepPrecision;\n    const size = this._elementSize;\n    const width = size.width + delta.x;\n    const height = size.height + delta.y;\n    const elementStyle = this.$element().get(0).style;\n    const shouldRenderWidth = delta.x || isStepPrecisionStrict || isAbsoluteSize(elementStyle.width);\n    const shouldRenderHeight = delta.y || isStepPrecisionStrict || isAbsoluteSize(elementStyle.height);\n    if (shouldRenderWidth) {\n      this.option({\n        width: width\n      });\n    }\n    if (shouldRenderHeight) {\n      this.option({\n        height: height\n      });\n    }\n    return {\n      width: shouldRenderWidth ? width : size.width,\n      height: shouldRenderHeight ? height : size.height\n    };\n  }\n  _triggerResizeAction(e, _ref4) {\n    var _this$_resizeAction;\n    let {\n      width: width,\n      height: height\n    } = _ref4;\n    null === (_this$_resizeAction = this._resizeAction) || void 0 === _this$_resizeAction || _this$_resizeAction.call(this, {\n      event: e,\n      width: this.option(\"width\") || width,\n      height: this.option(\"height\") || height,\n      handles: this._movingSides\n    });\n    triggerResizeEvent(this.$element());\n  }\n  _isCornerHandler(sides) {\n    return 0 === Object.values(sides).reduce((xor, value) => xor ^ value, 0);\n  }\n  _getOffset(e) {\n    const {\n      offset: offset\n    } = e;\n    const sides = this._movingSides;\n    if (!sides.left && !sides.right) {\n      offset.x = 0;\n    }\n    if (!sides.top && !sides.bottom) {\n      offset.y = 0;\n    }\n    return offset;\n  }\n  _roundByStep(delta) {\n    const {\n      stepPrecision: stepPrecision\n    } = this.option();\n    return \"strict\" === stepPrecision ? this._roundStrict(delta) : this._roundNotStrict(delta);\n  }\n  _getSteps() {\n    return pairToObject(this.option(\"step\"), !this.option(\"roundStepValue\"));\n  }\n  _roundNotStrict(delta) {\n    const steps = this._getSteps();\n    return {\n      x: delta.x - delta.x % steps.h,\n      y: delta.y - delta.y % steps.v\n    };\n  }\n  _roundStrict(delta) {\n    const sides = this._movingSides;\n    const offset = {\n      x: delta.x * (sides.left ? -1 : 1),\n      y: delta.y * (sides.top ? -1 : 1)\n    };\n    const steps = this._getSteps();\n    const location = this._elementLocation;\n    const size = this._elementSize;\n    const xPos = sides.left ? location.left : location.left + size.width;\n    const yPos = sides.top ? location.top : location.top + size.height;\n    const newXShift = (xPos + offset.x) % steps.h;\n    const newYShift = (yPos + offset.y) % steps.v;\n    const sign = Math.sign || (x => {\n      x = +x;\n      if (0 === x || isNaN(x)) {\n        return x;\n      }\n      return x > 0 ? 1 : -1;\n    });\n    const separatorOffset = (steps, offset) => (1 + .2 * sign(offset)) % 1 * steps;\n    const isSmallOffset = (offset, steps) => Math.abs(offset) < .2 * steps;\n    let newOffsetX = offset.x - newXShift;\n    let newOffsetY = offset.y - newYShift;\n    if (newXShift > separatorOffset(steps.h, offset.x)) {\n      newOffsetX += steps.h;\n    }\n    if (newYShift > separatorOffset(steps.v, offset.y)) {\n      newOffsetY += steps.v;\n    }\n    const roundedOffset_x = (sides.left || sides.right) && !isSmallOffset(offset.x, steps.h) ? newOffsetX : 0,\n      roundedOffset_y = (sides.top || sides.bottom) && !isSmallOffset(offset.y, steps.v) ? newOffsetY : 0;\n    return {\n      x: roundedOffset_x * (sides.left ? -1 : 1),\n      y: roundedOffset_y * (sides.top ? -1 : 1)\n    };\n  }\n  _getMovingSides(e) {\n    const $target = $(e.target);\n    const hasCornerTopLeftClass = $target.hasClass(\"dx-resizable-handle-corner-top-left\");\n    const hasCornerTopRightClass = $target.hasClass(\"dx-resizable-handle-corner-top-right\");\n    const hasCornerBottomLeftClass = $target.hasClass(\"dx-resizable-handle-corner-bottom-left\");\n    const hasCornerBottomRightClass = $target.hasClass(\"dx-resizable-handle-corner-bottom-right\");\n    return {\n      top: $target.hasClass(\"dx-resizable-handle-top\") || hasCornerTopLeftClass || hasCornerTopRightClass,\n      left: $target.hasClass(\"dx-resizable-handle-left\") || hasCornerTopLeftClass || hasCornerBottomLeftClass,\n      bottom: $target.hasClass(\"dx-resizable-handle-bottom\") || hasCornerBottomLeftClass || hasCornerBottomRightClass,\n      right: $target.hasClass(\"dx-resizable-handle-right\") || hasCornerTopRightClass || hasCornerBottomRightClass\n    };\n  }\n  _getArea() {\n    let area = this.option(\"area\");\n    if (isFunction(area)) {\n      area = area.call(this);\n    }\n    if (isPlainObject(area)) {\n      return this._getAreaFromObject(area);\n    }\n    return this._getAreaFromElement(area);\n  }\n  _getAreaScrollOffset() {\n    const area = this.option(\"area\");\n    const isElement = !isFunction(area) && !isPlainObject(area);\n    const scrollOffset = {\n      scrollY: 0,\n      scrollX: 0\n    };\n    if (isElement) {\n      const areaElement = $(area)[0];\n      if (isWindow(areaElement)) {\n        scrollOffset.scrollX = areaElement.pageXOffset;\n        scrollOffset.scrollY = areaElement.pageYOffset;\n      }\n    }\n    return scrollOffset;\n  }\n  _getAreaFromObject(area) {\n    const result = {\n      width: area.right - area.left,\n      height: area.bottom - area.top,\n      offset: {\n        left: area.left,\n        top: area.top\n      }\n    };\n    this._correctAreaGeometry(result);\n    return result;\n  }\n  _getAreaFromElement(area) {\n    const $area = $(area);\n    let result;\n    if ($area.length) {\n      result = {\n        width: getInnerWidth($area),\n        height: getInnerHeight($area),\n        offset: extend({\n          top: 0,\n          left: 0\n        }, isWindow($area[0]) ? {} : $area.offset())\n      };\n      this._correctAreaGeometry(result, $area);\n    }\n    return result;\n  }\n  _correctAreaGeometry(result, $area) {\n    const areaBorderLeft = $area ? this._getBorderWidth($area, \"left\") : 0;\n    const areaBorderTop = $area ? this._getBorderWidth($area, \"top\") : 0;\n    result.offset.left += areaBorderLeft + this._getBorderWidth(this.$element(), \"left\");\n    result.offset.top += areaBorderTop + this._getBorderWidth(this.$element(), \"top\");\n    result.width -= getOuterWidth(this.$element()) - getInnerWidth(this.$element());\n    result.height -= getOuterHeight(this.$element()) - getInnerHeight(this.$element());\n  }\n  _dragEndHandler(e) {\n    var _this$_resizeEndActio;\n    const $element = this.$element();\n    null === (_this$_resizeEndActio = this._resizeEndAction) || void 0 === _this$_resizeEndActio || _this$_resizeEndActio.call(this, {\n      event: e,\n      width: getOuterWidth($element),\n      height: getOuterHeight($element),\n      handles: this._movingSides\n    });\n    this._toggleResizingClass(false);\n  }\n  _renderWidth(width) {\n    this.option(\"width\", fitIntoRange(width, this.option(\"minWidth\"), this.option(\"maxWidth\")));\n  }\n  _renderHeight(height) {\n    this.option(\"height\", fitIntoRange(height, this.option(\"minHeight\"), this.option(\"maxHeight\")));\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"disabled\":\n        this._toggleEventHandlers(!args.value);\n        super._optionChanged(args);\n        break;\n      case \"handles\":\n        this._invalidate();\n        break;\n      case \"minWidth\":\n      case \"maxWidth\":\n        hasWindow() && this._renderWidth(getOuterWidth(this.$element()));\n        break;\n      case \"minHeight\":\n      case \"maxHeight\":\n        hasWindow() && this._renderHeight(getOuterHeight(this.$element()));\n        break;\n      case \"onResize\":\n      case \"onResizeStart\":\n      case \"onResizeEnd\":\n        this._renderActions();\n        break;\n      case \"area\":\n      case \"stepPrecision\":\n      case \"step\":\n      case \"roundStepValue\":\n      case \"keepAspectRatio\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _clean() {\n    this.$element().find(\".dx-resizable-handle\").remove();\n  }\n  _useTemplates() {\n    return false;\n  }\n}\nregisterComponent(RESIZABLE, Resizable);\nexport default Resizable;","map":{"version":3,"names":["_extends","locate","move","eventsEngine","end","dragEventEnd","dragEventMove","start","dragEventStart","addNamespace","triggerResizeEvent","registerComponent","$","pairToObject","extend","each","fitIntoRange","inRange","getHeight","getInnerHeight","getInnerWidth","getOuterHeight","getOuterWidth","getWidth","isFunction","isPlainObject","isWindow","hasWindow","DOMComponent","RESIZABLE","RESIZABLE_CLASS","RESIZABLE_RESIZING_CLASS","RESIZABLE_HANDLE_CLASS","RESIZABLE_HANDLE_TOP_CLASS","RESIZABLE_HANDLE_BOTTOM_CLASS","RESIZABLE_HANDLE_LEFT_CLASS","RESIZABLE_HANDLE_RIGHT_CLASS","RESIZABLE_HANDLE_CORNER_CLASS","DRAGSTART_START_EVENT_NAME","DRAGSTART_EVENT_NAME","DRAGSTART_END_EVENT_NAME","SIDE_BORDER_WIDTH_STYLES","left","top","right","bottom","Resizable","_getDefaultOptions","handles","step","stepPrecision","minWidth","maxWidth","minHeight","maxHeight","onResizeStart","onResize","onResizeEnd","roundStepValue","keepAspectRatio","_init","$element","addClass","_initMarkup","_renderHandles","_render","_renderActions","_resizeStartAction","_createActionByOption","_resizeEndAction","_resizeAction","_handles","option","directions","split","activeHandlesMap","index","handleName","_renderHandle","_attachEventHandlers","$handle","appendTo","push","handlers","_dragStartHandler","bind","_dragHandler","_dragEndHandler","forEach","handleElement","on","direction","immediate","_detachEventHandlers","off","_toggleEventHandlers","shouldAttachEvents","_getElementSize","css","width","height","e","_this$_resizeStartAct","is","cancel","_toggleResizingClass","_movingSides","_getMovingSides","_elementLocation","_elementSize","_renderDragOffsets","call","event","targetElements","value","toggleClass","area","_getArea","target","closest","handleWidth","handleHeight","handleOffset","offset","areaOffset","scrollOffset","_getAreaScrollOffset","maxLeftOffset","_leftMaxOffset","scrollX","maxRightOffset","_rightMaxOffset","maxTopOffset","_topMaxOffset","scrollY","maxBottomOffset","_bottomMaxOffset","_getBorderWidth","get","borderWidth","parseInt","_proportionate","size","factor","_getProportionalDelta","_ref","x","y","proportionalY","proportionalX","_getDirectionName","axis","sides","_fitIntoArea","directionName","Math","min","_fitDeltaProportionally","delta","fittedDelta","isInArea","isFittedX","isFittedY","_fitDelta","_ref2","_getDeltaByOffset","shouldKeepAspectRatio","_isCornerHandler","proportionalDelta","fittedProportionalDelta","roundedFittedDelta","_roundByStep","_updatePosition","_ref3","location","elementRect","offsetTop","offsetLeft","_getOffset","dimensions","_updateDimensions","_triggerResizeAction","isAbsoluteSize","substring","length","isStepPrecisionStrict","elementStyle","style","shouldRenderWidth","shouldRenderHeight","_ref4","_this$_resizeAction","Object","values","reduce","xor","_roundStrict","_roundNotStrict","_getSteps","steps","h","v","xPos","yPos","newXShift","newYShift","sign","isNaN","separatorOffset","isSmallOffset","abs","newOffsetX","newOffsetY","roundedOffset_x","roundedOffset_y","$target","hasCornerTopLeftClass","hasClass","hasCornerTopRightClass","hasCornerBottomLeftClass","hasCornerBottomRightClass","_getAreaFromObject","_getAreaFromElement","isElement","areaElement","pageXOffset","pageYOffset","result","_correctAreaGeometry","$area","areaBorderLeft","areaBorderTop","_this$_resizeEndActio","_renderWidth","_renderHeight","_optionChanged","args","name","_invalidate","_clean","find","remove","_useTemplates"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/resizable/m_resizable.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/resizable/m_resizable.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    locate,\r\n    move\r\n} from \"../../../common/core/animation/translator\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    end as dragEventEnd,\r\n    move as dragEventMove,\r\n    start as dragEventStart\r\n} from \"../../../common/core/events/drag\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../common/core/events/utils/index\";\r\nimport {\r\n    triggerResizeEvent\r\n} from \"../../../common/core/events/visibility_change\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    pairToObject\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    fitIntoRange,\r\n    inRange\r\n} from \"../../../core/utils/math\";\r\nimport {\r\n    getHeight,\r\n    getInnerHeight,\r\n    getInnerWidth,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isFunction,\r\n    isPlainObject,\r\n    isWindow\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport DOMComponent from \"../../core/widget/dom_component\";\r\nconst RESIZABLE = \"dxResizable\";\r\nconst RESIZABLE_CLASS = \"dx-resizable\";\r\nconst RESIZABLE_RESIZING_CLASS = \"dx-resizable-resizing\";\r\nconst RESIZABLE_HANDLE_CLASS = \"dx-resizable-handle\";\r\nconst RESIZABLE_HANDLE_TOP_CLASS = \"dx-resizable-handle-top\";\r\nconst RESIZABLE_HANDLE_BOTTOM_CLASS = \"dx-resizable-handle-bottom\";\r\nconst RESIZABLE_HANDLE_LEFT_CLASS = \"dx-resizable-handle-left\";\r\nconst RESIZABLE_HANDLE_RIGHT_CLASS = \"dx-resizable-handle-right\";\r\nconst RESIZABLE_HANDLE_CORNER_CLASS = \"dx-resizable-handle-corner\";\r\nconst DRAGSTART_START_EVENT_NAME = addNamespace(dragEventStart, RESIZABLE);\r\nconst DRAGSTART_EVENT_NAME = addNamespace(dragEventMove, RESIZABLE);\r\nconst DRAGSTART_END_EVENT_NAME = addNamespace(dragEventEnd, RESIZABLE);\r\nconst SIDE_BORDER_WIDTH_STYLES = {\r\n    left: \"borderLeftWidth\",\r\n    top: \"borderTopWidth\",\r\n    right: \"borderRightWidth\",\r\n    bottom: \"borderBottomWidth\"\r\n};\r\nclass Resizable extends DOMComponent {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            handles: \"all\",\r\n            step: \"1\",\r\n            stepPrecision: \"simple\",\r\n            minWidth: 30,\r\n            maxWidth: 1 / 0,\r\n            minHeight: 30,\r\n            maxHeight: 1 / 0,\r\n            onResizeStart: null,\r\n            onResize: null,\r\n            onResizeEnd: null,\r\n            roundStepValue: true,\r\n            keepAspectRatio: true\r\n        })\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this.$element().addClass(\"dx-resizable\")\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._renderHandles()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderActions()\r\n    }\r\n    _renderActions() {\r\n        this._resizeStartAction = this._createActionByOption(\"onResizeStart\");\r\n        this._resizeEndAction = this._createActionByOption(\"onResizeEnd\");\r\n        this._resizeAction = this._createActionByOption(\"onResize\")\r\n    }\r\n    _renderHandles() {\r\n        this._handles = [];\r\n        const {\r\n            handles: handles\r\n        } = this.option();\r\n        if (\"none\" === handles || !handles) {\r\n            return\r\n        }\r\n        const directions = \"all\" === handles ? [\"top\", \"bottom\", \"left\", \"right\"] : handles.split(\" \");\r\n        const activeHandlesMap = {};\r\n        each(directions, ((index, handleName) => {\r\n            activeHandlesMap[handleName] = true;\r\n            this._renderHandle(handleName)\r\n        }));\r\n        activeHandlesMap.bottom && activeHandlesMap.right && this._renderHandle(\"corner-bottom-right\");\r\n        activeHandlesMap.bottom && activeHandlesMap.left && this._renderHandle(\"corner-bottom-left\");\r\n        activeHandlesMap.top && activeHandlesMap.right && this._renderHandle(\"corner-top-right\");\r\n        activeHandlesMap.top && activeHandlesMap.left && this._renderHandle(\"corner-top-left\");\r\n        this._attachEventHandlers()\r\n    }\r\n    _renderHandle(handleName) {\r\n        const $handle = $(\"<div>\").addClass(\"dx-resizable-handle\").addClass(`dx-resizable-handle-${handleName}`).appendTo(this.$element());\r\n        this._handles.push($handle)\r\n    }\r\n    _attachEventHandlers() {\r\n        if (this.option(\"disabled\")) {\r\n            return\r\n        }\r\n        const handlers = {};\r\n        handlers[DRAGSTART_START_EVENT_NAME] = this._dragStartHandler.bind(this);\r\n        handlers[DRAGSTART_EVENT_NAME] = this._dragHandler.bind(this);\r\n        handlers[DRAGSTART_END_EVENT_NAME] = this._dragEndHandler.bind(this);\r\n        this._handles.forEach((handleElement => {\r\n            eventsEngine.on(handleElement, handlers, {\r\n                direction: \"both\",\r\n                immediate: true\r\n            })\r\n        }))\r\n    }\r\n    _detachEventHandlers() {\r\n        this._handles.forEach((handleElement => {\r\n            eventsEngine.off(handleElement)\r\n        }))\r\n    }\r\n    _toggleEventHandlers(shouldAttachEvents) {\r\n        shouldAttachEvents ? this._attachEventHandlers() : this._detachEventHandlers()\r\n    }\r\n    _getElementSize() {\r\n        const $element = this.$element();\r\n        return \"border-box\" === $element.css(\"boxSizing\") ? {\r\n            width: getOuterWidth($element),\r\n            height: getOuterHeight($element)\r\n        } : {\r\n            width: getWidth($element),\r\n            height: getHeight($element)\r\n        }\r\n    }\r\n    _dragStartHandler(e) {\r\n        var _this$_resizeStartAct;\r\n        const $element = this.$element();\r\n        if ($element.is(\".dx-state-disabled, .dx-state-disabled *\")) {\r\n            e.cancel = true;\r\n            return\r\n        }\r\n        this._toggleResizingClass(true);\r\n        this._movingSides = this._getMovingSides(e);\r\n        this._elementLocation = locate($element);\r\n        this._elementSize = this._getElementSize();\r\n        this._renderDragOffsets(e);\r\n        null === (_this$_resizeStartAct = this._resizeStartAction) || void 0 === _this$_resizeStartAct || _this$_resizeStartAct.call(this, {\r\n            event: e,\r\n            width: this._elementSize.width,\r\n            height: this._elementSize.height,\r\n            handles: this._movingSides\r\n        });\r\n        e.targetElements = null\r\n    }\r\n    _toggleResizingClass(value) {\r\n        this.$element().toggleClass(\"dx-resizable-resizing\", value)\r\n    }\r\n    _renderDragOffsets(e) {\r\n        const area = this._getArea();\r\n        if (!area) {\r\n            return\r\n        }\r\n        const $handle = $(e.target).closest(\".dx-resizable-handle\");\r\n        const handleWidth = getOuterWidth($handle);\r\n        const handleHeight = getOuterHeight($handle);\r\n        const handleOffset = $handle.offset();\r\n        const areaOffset = area.offset;\r\n        const scrollOffset = this._getAreaScrollOffset();\r\n        e.maxLeftOffset = this._leftMaxOffset = handleOffset.left - areaOffset.left - scrollOffset.scrollX;\r\n        e.maxRightOffset = this._rightMaxOffset = areaOffset.left + area.width - handleOffset.left - handleWidth + scrollOffset.scrollX;\r\n        e.maxTopOffset = this._topMaxOffset = handleOffset.top - areaOffset.top - scrollOffset.scrollY;\r\n        e.maxBottomOffset = this._bottomMaxOffset = areaOffset.top + area.height - handleOffset.top - handleHeight + scrollOffset.scrollY\r\n    }\r\n    _getBorderWidth($element, direction) {\r\n        if (isWindow($element.get(0))) {\r\n            return 0\r\n        }\r\n        const borderWidth = $element.css(SIDE_BORDER_WIDTH_STYLES[direction]);\r\n        return parseInt(borderWidth) || 0\r\n    }\r\n    _proportionate(direction, value) {\r\n        const size = this._elementSize;\r\n        const factor = \"x\" === direction ? size.width / size.height : size.height / size.width;\r\n        return value * factor\r\n    }\r\n    _getProportionalDelta(_ref) {\r\n        let {\r\n            x: x,\r\n            y: y\r\n        } = _ref;\r\n        const proportionalY = this._proportionate(\"y\", x);\r\n        if (proportionalY >= y) {\r\n            return {\r\n                x: x,\r\n                y: proportionalY\r\n            }\r\n        }\r\n        const proportionalX = this._proportionate(\"x\", y);\r\n        if (proportionalX >= x) {\r\n            return {\r\n                x: proportionalX,\r\n                y: y\r\n            }\r\n        }\r\n        return {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n    _getDirectionName(axis) {\r\n        const sides = this._movingSides;\r\n        if (\"x\" === axis) {\r\n            return sides.left ? \"left\" : \"right\"\r\n        }\r\n        return sides.top ? \"top\" : \"bottom\"\r\n    }\r\n    _fitIntoArea(axis, value) {\r\n        const directionName = this._getDirectionName(axis);\r\n        return Math.min(value, this[`_${directionName}MaxOffset`] ?? 1 / 0)\r\n    }\r\n    _fitDeltaProportionally(delta) {\r\n        let fittedDelta = _extends({}, delta);\r\n        const size = this._elementSize;\r\n        const {\r\n            minWidth: minWidth,\r\n            minHeight: minHeight,\r\n            maxWidth: maxWidth,\r\n            maxHeight: maxHeight\r\n        } = this.option();\r\n        const getWidth = () => size.width + fittedDelta.x;\r\n        const getHeight = () => size.height + fittedDelta.y;\r\n        const isInArea = axis => fittedDelta[axis] === this._fitIntoArea(axis, fittedDelta[axis]);\r\n        const isFittedX = () => inRange(getWidth(), minWidth, maxWidth) && isInArea(\"x\");\r\n        const isFittedY = () => inRange(getHeight(), minHeight, maxHeight) && isInArea(\"y\");\r\n        if (!isFittedX()) {\r\n            const x = this._fitIntoArea(\"x\", fitIntoRange(getWidth(), minWidth, maxWidth) - size.width);\r\n            fittedDelta = {\r\n                x: x,\r\n                y: this._proportionate(\"y\", x)\r\n            }\r\n        }\r\n        if (!isFittedY()) {\r\n            const y = this._fitIntoArea(\"y\", fitIntoRange(getHeight(), minHeight, maxHeight) - size.height);\r\n            fittedDelta = {\r\n                x: this._proportionate(\"x\", y),\r\n                y: y\r\n            }\r\n        }\r\n        return isFittedX() && isFittedY() ? fittedDelta : {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n    _fitDelta(_ref2) {\r\n        let {\r\n            x: x,\r\n            y: y\r\n        } = _ref2;\r\n        const size = this._elementSize;\r\n        const {\r\n            minWidth: minWidth,\r\n            minHeight: minHeight,\r\n            maxWidth: maxWidth,\r\n            maxHeight: maxHeight\r\n        } = this.option();\r\n        return {\r\n            x: fitIntoRange(size.width + x, minWidth, maxWidth) - size.width,\r\n            y: fitIntoRange(size.height + y, minHeight, maxHeight) - size.height\r\n        }\r\n    }\r\n    _getDeltaByOffset(offset) {\r\n        const sides = this._movingSides;\r\n        const shouldKeepAspectRatio = this._isCornerHandler(sides) && this.option(\"keepAspectRatio\");\r\n        let delta = {\r\n            x: offset.x * (sides.left ? -1 : 1),\r\n            y: offset.y * (sides.top ? -1 : 1)\r\n        };\r\n        if (shouldKeepAspectRatio) {\r\n            const proportionalDelta = this._getProportionalDelta(delta);\r\n            const fittedProportionalDelta = this._fitDeltaProportionally(proportionalDelta);\r\n            delta = fittedProportionalDelta\r\n        } else {\r\n            const fittedDelta = this._fitDelta(delta);\r\n            const roundedFittedDelta = this._roundByStep(fittedDelta);\r\n            delta = roundedFittedDelta\r\n        }\r\n        return delta\r\n    }\r\n    _updatePosition(delta, _ref3) {\r\n        let {\r\n            width: width,\r\n            height: height\r\n        } = _ref3;\r\n        const location = this._elementLocation;\r\n        const sides = this._movingSides;\r\n        const $element = this.$element();\r\n        const elementRect = this._getElementSize();\r\n        const offsetTop = delta.y * (sides.top ? -1 : 1) - ((elementRect.height || height) - height);\r\n        const offsetLeft = delta.x * (sides.left ? -1 : 1) - ((elementRect.width || width) - width);\r\n        move($element, {\r\n            top: location.top + (sides.top ? offsetTop : 0),\r\n            left: location.left + (sides.left ? offsetLeft : 0)\r\n        })\r\n    }\r\n    _dragHandler(e) {\r\n        const offset = this._getOffset(e);\r\n        const delta = this._getDeltaByOffset(offset);\r\n        const dimensions = this._updateDimensions(delta);\r\n        this._updatePosition(delta, dimensions);\r\n        this._triggerResizeAction(e, dimensions)\r\n    }\r\n    _updateDimensions(delta) {\r\n        const isAbsoluteSize = size => \"px\" === size.substring(size.length - 2);\r\n        const {\r\n            stepPrecision: stepPrecision\r\n        } = this.option();\r\n        const isStepPrecisionStrict = \"strict\" === stepPrecision;\r\n        const size = this._elementSize;\r\n        const width = size.width + delta.x;\r\n        const height = size.height + delta.y;\r\n        const elementStyle = this.$element().get(0).style;\r\n        const shouldRenderWidth = delta.x || isStepPrecisionStrict || isAbsoluteSize(elementStyle.width);\r\n        const shouldRenderHeight = delta.y || isStepPrecisionStrict || isAbsoluteSize(elementStyle.height);\r\n        if (shouldRenderWidth) {\r\n            this.option({\r\n                width: width\r\n            })\r\n        }\r\n        if (shouldRenderHeight) {\r\n            this.option({\r\n                height: height\r\n            })\r\n        }\r\n        return {\r\n            width: shouldRenderWidth ? width : size.width,\r\n            height: shouldRenderHeight ? height : size.height\r\n        }\r\n    }\r\n    _triggerResizeAction(e, _ref4) {\r\n        var _this$_resizeAction;\r\n        let {\r\n            width: width,\r\n            height: height\r\n        } = _ref4;\r\n        null === (_this$_resizeAction = this._resizeAction) || void 0 === _this$_resizeAction || _this$_resizeAction.call(this, {\r\n            event: e,\r\n            width: this.option(\"width\") || width,\r\n            height: this.option(\"height\") || height,\r\n            handles: this._movingSides\r\n        });\r\n        triggerResizeEvent(this.$element())\r\n    }\r\n    _isCornerHandler(sides) {\r\n        return 0 === Object.values(sides).reduce(((xor, value) => xor ^ value), 0)\r\n    }\r\n    _getOffset(e) {\r\n        const {\r\n            offset: offset\r\n        } = e;\r\n        const sides = this._movingSides;\r\n        if (!sides.left && !sides.right) {\r\n            offset.x = 0\r\n        }\r\n        if (!sides.top && !sides.bottom) {\r\n            offset.y = 0\r\n        }\r\n        return offset\r\n    }\r\n    _roundByStep(delta) {\r\n        const {\r\n            stepPrecision: stepPrecision\r\n        } = this.option();\r\n        return \"strict\" === stepPrecision ? this._roundStrict(delta) : this._roundNotStrict(delta)\r\n    }\r\n    _getSteps() {\r\n        return pairToObject(this.option(\"step\"), !this.option(\"roundStepValue\"))\r\n    }\r\n    _roundNotStrict(delta) {\r\n        const steps = this._getSteps();\r\n        return {\r\n            x: delta.x - delta.x % steps.h,\r\n            y: delta.y - delta.y % steps.v\r\n        }\r\n    }\r\n    _roundStrict(delta) {\r\n        const sides = this._movingSides;\r\n        const offset = {\r\n            x: delta.x * (sides.left ? -1 : 1),\r\n            y: delta.y * (sides.top ? -1 : 1)\r\n        };\r\n        const steps = this._getSteps();\r\n        const location = this._elementLocation;\r\n        const size = this._elementSize;\r\n        const xPos = sides.left ? location.left : location.left + size.width;\r\n        const yPos = sides.top ? location.top : location.top + size.height;\r\n        const newXShift = (xPos + offset.x) % steps.h;\r\n        const newYShift = (yPos + offset.y) % steps.v;\r\n        const sign = Math.sign || (x => {\r\n            x = +x;\r\n            if (0 === x || isNaN(x)) {\r\n                return x\r\n            }\r\n            return x > 0 ? 1 : -1\r\n        });\r\n        const separatorOffset = (steps, offset) => (1 + .2 * sign(offset)) % 1 * steps;\r\n        const isSmallOffset = (offset, steps) => Math.abs(offset) < .2 * steps;\r\n        let newOffsetX = offset.x - newXShift;\r\n        let newOffsetY = offset.y - newYShift;\r\n        if (newXShift > separatorOffset(steps.h, offset.x)) {\r\n            newOffsetX += steps.h\r\n        }\r\n        if (newYShift > separatorOffset(steps.v, offset.y)) {\r\n            newOffsetY += steps.v\r\n        }\r\n        const roundedOffset_x = (sides.left || sides.right) && !isSmallOffset(offset.x, steps.h) ? newOffsetX : 0,\r\n            roundedOffset_y = (sides.top || sides.bottom) && !isSmallOffset(offset.y, steps.v) ? newOffsetY : 0;\r\n        return {\r\n            x: roundedOffset_x * (sides.left ? -1 : 1),\r\n            y: roundedOffset_y * (sides.top ? -1 : 1)\r\n        }\r\n    }\r\n    _getMovingSides(e) {\r\n        const $target = $(e.target);\r\n        const hasCornerTopLeftClass = $target.hasClass(\"dx-resizable-handle-corner-top-left\");\r\n        const hasCornerTopRightClass = $target.hasClass(\"dx-resizable-handle-corner-top-right\");\r\n        const hasCornerBottomLeftClass = $target.hasClass(\"dx-resizable-handle-corner-bottom-left\");\r\n        const hasCornerBottomRightClass = $target.hasClass(\"dx-resizable-handle-corner-bottom-right\");\r\n        return {\r\n            top: $target.hasClass(\"dx-resizable-handle-top\") || hasCornerTopLeftClass || hasCornerTopRightClass,\r\n            left: $target.hasClass(\"dx-resizable-handle-left\") || hasCornerTopLeftClass || hasCornerBottomLeftClass,\r\n            bottom: $target.hasClass(\"dx-resizable-handle-bottom\") || hasCornerBottomLeftClass || hasCornerBottomRightClass,\r\n            right: $target.hasClass(\"dx-resizable-handle-right\") || hasCornerTopRightClass || hasCornerBottomRightClass\r\n        }\r\n    }\r\n    _getArea() {\r\n        let area = this.option(\"area\");\r\n        if (isFunction(area)) {\r\n            area = area.call(this)\r\n        }\r\n        if (isPlainObject(area)) {\r\n            return this._getAreaFromObject(area)\r\n        }\r\n        return this._getAreaFromElement(area)\r\n    }\r\n    _getAreaScrollOffset() {\r\n        const area = this.option(\"area\");\r\n        const isElement = !isFunction(area) && !isPlainObject(area);\r\n        const scrollOffset = {\r\n            scrollY: 0,\r\n            scrollX: 0\r\n        };\r\n        if (isElement) {\r\n            const areaElement = $(area)[0];\r\n            if (isWindow(areaElement)) {\r\n                scrollOffset.scrollX = areaElement.pageXOffset;\r\n                scrollOffset.scrollY = areaElement.pageYOffset\r\n            }\r\n        }\r\n        return scrollOffset\r\n    }\r\n    _getAreaFromObject(area) {\r\n        const result = {\r\n            width: area.right - area.left,\r\n            height: area.bottom - area.top,\r\n            offset: {\r\n                left: area.left,\r\n                top: area.top\r\n            }\r\n        };\r\n        this._correctAreaGeometry(result);\r\n        return result\r\n    }\r\n    _getAreaFromElement(area) {\r\n        const $area = $(area);\r\n        let result;\r\n        if ($area.length) {\r\n            result = {\r\n                width: getInnerWidth($area),\r\n                height: getInnerHeight($area),\r\n                offset: extend({\r\n                    top: 0,\r\n                    left: 0\r\n                }, isWindow($area[0]) ? {} : $area.offset())\r\n            };\r\n            this._correctAreaGeometry(result, $area)\r\n        }\r\n        return result\r\n    }\r\n    _correctAreaGeometry(result, $area) {\r\n        const areaBorderLeft = $area ? this._getBorderWidth($area, \"left\") : 0;\r\n        const areaBorderTop = $area ? this._getBorderWidth($area, \"top\") : 0;\r\n        result.offset.left += areaBorderLeft + this._getBorderWidth(this.$element(), \"left\");\r\n        result.offset.top += areaBorderTop + this._getBorderWidth(this.$element(), \"top\");\r\n        result.width -= getOuterWidth(this.$element()) - getInnerWidth(this.$element());\r\n        result.height -= getOuterHeight(this.$element()) - getInnerHeight(this.$element())\r\n    }\r\n    _dragEndHandler(e) {\r\n        var _this$_resizeEndActio;\r\n        const $element = this.$element();\r\n        null === (_this$_resizeEndActio = this._resizeEndAction) || void 0 === _this$_resizeEndActio || _this$_resizeEndActio.call(this, {\r\n            event: e,\r\n            width: getOuterWidth($element),\r\n            height: getOuterHeight($element),\r\n            handles: this._movingSides\r\n        });\r\n        this._toggleResizingClass(false)\r\n    }\r\n    _renderWidth(width) {\r\n        this.option(\"width\", fitIntoRange(width, this.option(\"minWidth\"), this.option(\"maxWidth\")))\r\n    }\r\n    _renderHeight(height) {\r\n        this.option(\"height\", fitIntoRange(height, this.option(\"minHeight\"), this.option(\"maxHeight\")))\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"disabled\":\r\n                this._toggleEventHandlers(!args.value);\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"handles\":\r\n                this._invalidate();\r\n                break;\r\n            case \"minWidth\":\r\n            case \"maxWidth\":\r\n                hasWindow() && this._renderWidth(getOuterWidth(this.$element()));\r\n                break;\r\n            case \"minHeight\":\r\n            case \"maxHeight\":\r\n                hasWindow() && this._renderHeight(getOuterHeight(this.$element()));\r\n                break;\r\n            case \"onResize\":\r\n            case \"onResizeStart\":\r\n            case \"onResizeEnd\":\r\n                this._renderActions();\r\n                break;\r\n            case \"area\":\r\n            case \"stepPrecision\":\r\n            case \"step\":\r\n            case \"roundStepValue\":\r\n            case \"keepAspectRatio\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _clean() {\r\n        this.$element().find(\".dx-resizable-handle\").remove()\r\n    }\r\n    _useTemplates() {\r\n        return false\r\n    }\r\n}\r\nregisterComponent(RESIZABLE, Resizable);\r\nexport default Resizable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}