{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_console.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isFunction } from \"../../../core/utils/type\";\nconst noop = function () {};\nconst getConsoleMethod = function (method) {\n  if (\"undefined\" === typeof console || !isFunction(console[method])) {\n    return noop;\n  }\n  return console[method].bind(console);\n};\nexport const logger = {\n  log: getConsoleMethod(\"log\"),\n  info: getConsoleMethod(\"info\"),\n  warn: getConsoleMethod(\"warn\"),\n  error: getConsoleMethod(\"error\")\n};\nexport const debug = function () {\n  function assert(condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  }\n  return {\n    assert: assert,\n    assertParam: function (parameter, message) {\n      assert(null !== parameter && void 0 !== parameter, message);\n    }\n  };\n}();\nexport default {\n  logger: logger,\n  debug: debug\n};","map":{"version":3,"names":["isFunction","noop","getConsoleMethod","method","console","bind","logger","log","info","warn","error","debug","assert","condition","message","Error","assertParam","parameter"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_console.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_console.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isFunction\r\n} from \"../../../core/utils/type\";\r\nconst noop = function() {};\r\nconst getConsoleMethod = function(method) {\r\n    if (\"undefined\" === typeof console || !isFunction(console[method])) {\r\n        return noop\r\n    }\r\n    return console[method].bind(console)\r\n};\r\nexport const logger = {\r\n    log: getConsoleMethod(\"log\"),\r\n    info: getConsoleMethod(\"info\"),\r\n    warn: getConsoleMethod(\"warn\"),\r\n    error: getConsoleMethod(\"error\")\r\n};\r\nexport const debug = function() {\r\n    function assert(condition, message) {\r\n        if (!condition) {\r\n            throw new Error(message)\r\n        }\r\n    }\r\n    return {\r\n        assert: assert,\r\n        assertParam: function(parameter, message) {\r\n            assert(null !== parameter && void 0 !== parameter, message)\r\n        }\r\n    }\r\n}();\r\nexport default {\r\n    logger: logger,\r\n    debug: debug\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,UAAU,QACP,0BAA0B;AACjC,MAAMC,IAAI,GAAG,SAAAA,CAAA,EAAW,CAAC,CAAC;AAC1B,MAAMC,gBAAgB,GAAG,SAAAA,CAASC,MAAM,EAAE;EACtC,IAAI,WAAW,KAAK,OAAOC,OAAO,IAAI,CAACJ,UAAU,CAACI,OAAO,CAACD,MAAM,CAAC,CAAC,EAAE;IAChE,OAAOF,IAAI;EACf;EACA,OAAOG,OAAO,CAACD,MAAM,CAAC,CAACE,IAAI,CAACD,OAAO,CAAC;AACxC,CAAC;AACD,OAAO,MAAME,MAAM,GAAG;EAClBC,GAAG,EAAEL,gBAAgB,CAAC,KAAK,CAAC;EAC5BM,IAAI,EAAEN,gBAAgB,CAAC,MAAM,CAAC;EAC9BO,IAAI,EAAEP,gBAAgB,CAAC,MAAM,CAAC;EAC9BQ,KAAK,EAAER,gBAAgB,CAAC,OAAO;AACnC,CAAC;AACD,OAAO,MAAMS,KAAK,GAAG,YAAW;EAC5B,SAASC,MAAMA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAChC,IAAI,CAACD,SAAS,EAAE;MACZ,MAAM,IAAIE,KAAK,CAACD,OAAO,CAAC;IAC5B;EACJ;EACA,OAAO;IACHF,MAAM,EAAEA,MAAM;IACdI,WAAW,EAAE,SAAAA,CAASC,SAAS,EAAEH,OAAO,EAAE;MACtCF,MAAM,CAAC,IAAI,KAAKK,SAAS,IAAI,KAAK,CAAC,KAAKA,SAAS,EAAEH,OAAO,CAAC;IAC/D;EACJ,CAAC;AACL,CAAC,CAAC,CAAC;AACH,eAAe;EACXR,MAAM,EAAEA,MAAM;EACdK,KAAK,EAAEA;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}