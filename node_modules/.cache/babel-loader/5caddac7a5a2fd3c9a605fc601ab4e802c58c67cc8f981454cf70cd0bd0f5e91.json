{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/selection/m_selection.strategy.standard.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dataQuery from \"../../../common/data/query\";\nimport { getUniqueValues, removeDuplicates } from \"../../../core/utils/array\";\nimport { isKeysEqual } from \"../../../core/utils/array_compare\";\nimport { getKeyHash } from \"../../../core/utils/common\";\nimport { Deferred, when } from \"../../../core/utils/deferred\";\nimport { SelectionFilterCreator } from \"../../../core/utils/selection_filter\";\nimport { isDefined, isObject } from \"../../../core/utils/type\";\nimport errors from \"../../../ui/widget/ui.errors\";\nimport SelectionStrategy from \"./m_selection.strategy\";\nexport default class StandardStrategy extends SelectionStrategy {\n  constructor(options) {\n    super(options);\n    this._lastSelectAllPageDeferred = Deferred().reject();\n    this._initSelectedItemKeyHash();\n  }\n  _initSelectedItemKeyHash() {\n    this._setOption(\"keyHashIndices\", this.options.equalByReference ? null : {});\n  }\n  getSelectedItemKeys() {\n    return this.options.selectedItemKeys.slice(0);\n  }\n  getSelectedItems() {\n    return this.options.selectedItems.slice(0);\n  }\n  _preserveSelectionUpdate(items, isDeselect) {\n    const {\n      keyOf: keyOf\n    } = this.options;\n    let keyIndicesToRemoveMap;\n    let keyIndex;\n    let i;\n    if (!keyOf) {\n      return;\n    }\n    const isBatchDeselect = isDeselect && items.length > 1 && !this.options.equalByReference;\n    if (isBatchDeselect) {\n      keyIndicesToRemoveMap = {};\n    }\n    for (i = 0; i < items.length; i++) {\n      const item = items[i];\n      const key = keyOf(item);\n      if (isDeselect) {\n        keyIndex = this.removeSelectedItem(key, keyIndicesToRemoveMap, null === item || void 0 === item ? void 0 : item.disabled);\n        if (keyIndicesToRemoveMap && keyIndex >= 0) {\n          keyIndicesToRemoveMap[keyIndex] = true;\n        }\n      } else {\n        this.addSelectedItem(key, item);\n      }\n    }\n    if (isBatchDeselect) {\n      this._batchRemoveSelectedItems(keyIndicesToRemoveMap);\n    }\n  }\n  _batchRemoveSelectedItems(keyIndicesToRemoveMap) {\n    const selectedItemKeys = this.options.selectedItemKeys.slice(0);\n    const selectedItems = this.options.selectedItems.slice(0);\n    this.options.selectedItemKeys.length = 0;\n    this.options.selectedItems.length = 0;\n    for (let i = 0; i < selectedItemKeys.length; i++) {\n      if (!keyIndicesToRemoveMap[i]) {\n        this.options.selectedItemKeys.push(selectedItemKeys[i]);\n        this.options.selectedItems.push(selectedItems[i]);\n      }\n    }\n    this._initSelectedItemKeyHash();\n    this.updateSelectedItemKeyHash(this.options.selectedItemKeys);\n  }\n  _loadSelectedItemsCore(keys, isDeselect, isSelectAll, filter) {\n    let forceCombinedFilter = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n    let deferred = Deferred();\n    const key = this.options.key();\n    if (!keys.length && !isSelectAll) {\n      deferred.resolve([]);\n      return deferred;\n    }\n    if (isSelectAll && isDeselect && !filter) {\n      deferred.resolve(this.getSelectedItems());\n      return deferred;\n    }\n    const selectionFilterCreator = new SelectionFilterCreator(keys, isSelectAll);\n    const combinedFilter = selectionFilterCreator.getCombinedFilter(key, filter, forceCombinedFilter);\n    let deselectedItems = [];\n    if (isDeselect) {\n      const {\n        selectedItems: selectedItems\n      } = this.options;\n      deselectedItems = combinedFilter && keys.length !== selectedItems.length ? dataQuery(selectedItems).filter(combinedFilter).toArray() : selectedItems.slice(0);\n    }\n    let filteredItems = deselectedItems.length ? deselectedItems : this.options.plainItems(true).filter(this.options.isSelectableItem).map(this.options.getItemData);\n    const localFilter = selectionFilterCreator.getLocalFilter(this.options.keyOf, this.equalKeys.bind(this), this.options.equalByReference, key);\n    filteredItems = filteredItems.filter(localFilter);\n    if (deselectedItems.length || !isSelectAll && filteredItems.length === keys.length) {\n      deferred.resolve(filteredItems);\n    } else {\n      deferred = this._loadFilteredData(combinedFilter, localFilter, null, isSelectAll);\n    }\n    return deferred;\n  }\n  _replaceSelectionUpdate(items) {\n    const internalKeys = [];\n    const {\n      keyOf: keyOf\n    } = this.options;\n    if (!keyOf) {\n      return;\n    }\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const key = keyOf(item);\n      internalKeys.push(key);\n    }\n    this.setSelectedItems(internalKeys, items);\n  }\n  _warnOnIncorrectKeys(keys) {\n    const {\n      allowNullValue: allowNullValue\n    } = this.options;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if ((!allowNullValue || null !== key) && !this.isItemKeySelected(key)) {\n        errors.log(\"W1002\", key);\n      }\n    }\n  }\n  _isMultiSelectEnabled() {\n    const {\n      mode: mode\n    } = this.options;\n    return \"all\" === mode || \"multiple\" === mode;\n  }\n  _requestInProgress() {\n    var _this$_lastLoadDeferr;\n    return \"pending\" === (null === (_this$_lastLoadDeferr = this._lastLoadDeferred) || void 0 === _this$_lastLoadDeferr ? void 0 : _this$_lastLoadDeferr.state());\n  }\n  _concatRequestsItems(keys, isDeselect, oldRequestItems, updatedKeys) {\n    let selectedItems;\n    const deselectedItems = isDeselect ? keys : [];\n    if (updatedKeys) {\n      selectedItems = updatedKeys;\n    } else {\n      selectedItems = removeDuplicates(keys, this.options.selectedItemKeys);\n    }\n    return {\n      addedItems: oldRequestItems.added.concat(selectedItems),\n      removedItems: oldRequestItems.removed.concat(deselectedItems),\n      keys: keys\n    };\n  }\n  _collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys) {\n    const isDeselectAll = isDeselect && isSelectAll;\n    const oldRequestItems = {\n      added: [],\n      removed: []\n    };\n    const multiSelectEnabled = this._isMultiSelectEnabled();\n    let lastRequestData = multiSelectEnabled ? this._lastRequestData : {};\n    if (multiSelectEnabled) {\n      if (this._shouldMergeWithLastRequest) {\n        if (isDeselectAll) {\n          this._lastLoadDeferred.reject();\n          lastRequestData = {};\n        } else if (!isKeysEqual(keys, this.options.selectedItemKeys)) {\n          oldRequestItems.added = lastRequestData.addedItems;\n          oldRequestItems.removed = lastRequestData.removedItems;\n          if (!isDeselect) {\n            this._lastLoadDeferred.reject();\n          }\n        }\n      }\n      lastRequestData = this._concatRequestsItems(keys, isDeselect, oldRequestItems, this._shouldMergeWithLastRequest ? void 0 : updatedKeys);\n    }\n    return lastRequestData;\n  }\n  _updateKeysByLastRequestData(keys, isDeselect, isSelectAll) {\n    let currentKeys = keys;\n    if (this._isMultiSelectEnabled() && this._shouldMergeWithLastRequest && !isDeselect && !isSelectAll) {\n      var _this$_lastRequestDat, _this$_lastRequestDat2;\n      currentKeys = removeDuplicates(keys.concat(null === (_this$_lastRequestDat = this._lastRequestData) || void 0 === _this$_lastRequestDat ? void 0 : _this$_lastRequestDat.addedItems), null === (_this$_lastRequestDat2 = this._lastRequestData) || void 0 === _this$_lastRequestDat2 ? void 0 : _this$_lastRequestDat2.removedItems);\n      currentKeys = getUniqueValues(currentKeys);\n    }\n    return currentKeys;\n  }\n  _loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys) {\n    let forceCombinedFilter = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n    const that = this;\n    const deferred = Deferred();\n    const filter = that.options.filter();\n    this._shouldMergeWithLastRequest = this._requestInProgress();\n    this._lastRequestData = this._collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys);\n    when(that._lastLoadDeferred).always(() => {\n      const currentKeys = that._updateKeysByLastRequestData(keys, isDeselect, isSelectAll);\n      that._shouldMergeWithLastRequest = false;\n      that._loadSelectedItemsCore(currentKeys, isDeselect, isSelectAll, filter, forceCombinedFilter).done(deferred.resolve).fail(deferred.reject);\n    });\n    that._lastLoadDeferred = deferred;\n    return deferred;\n  }\n  selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys) {\n    let forceCombinedFilter = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : false;\n    if (this._isCancelingInProgress) {\n      return Deferred().reject();\n    }\n    const loadingDeferred = this._loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys, forceCombinedFilter);\n    const selectionDeferred = Deferred();\n    loadingDeferred.done(items => {\n      this._storeSelectionState();\n      if (preserve) {\n        this._preserveSelectionUpdate(items, isDeselect);\n      } else {\n        this._replaceSelectionUpdate(items);\n      }\n      this._isCancelingInProgress = true;\n      this._callCallbackIfNotCanceled(() => {\n        this._isCancelingInProgress = false;\n        this.onSelectionChanged();\n        selectionDeferred.resolve(items);\n      }, () => {\n        this._isCancelingInProgress = false;\n        this._restoreSelectionState();\n        selectionDeferred.reject();\n      });\n    });\n    return selectionDeferred;\n  }\n  addSelectedItem(key, itemData) {\n    if (isDefined(itemData) && !this.options.ignoreDisabledItems && itemData.disabled) {\n      if (-1 === this.options.disabledItemKeys.indexOf(key)) {\n        this.options.disabledItemKeys.push(key);\n      }\n      return;\n    }\n    const keyHash = this._getKeyHash(key);\n    if (-1 === this._indexOfSelectedItemKey(keyHash)) {\n      if (!isObject(keyHash) && this.options.keyHashIndices) {\n        this.options.keyHashIndices[keyHash] = [this.options.selectedItemKeys.length];\n      }\n      this.options.selectedItemKeys.push(key);\n      this.options.addedItemKeys.push(key);\n      this.options.addedItems.push(itemData);\n      this.options.selectedItems.push(itemData);\n    }\n  }\n  _getSelectedIndexByKey(key, ignoreIndicesMap) {\n    const {\n      selectedItemKeys: selectedItemKeys\n    } = this.options;\n    for (let index = 0; index < selectedItemKeys.length; index++) {\n      if ((!ignoreIndicesMap || !ignoreIndicesMap[index]) && this.equalKeys(selectedItemKeys[index], key)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  _getSelectedIndexByHash(key, ignoreIndicesMap) {\n    let indices = this.options.keyHashIndices[key];\n    if (indices && indices.length > 1 && ignoreIndicesMap) {\n      indices = indices.filter(index => !ignoreIndicesMap[index]);\n    }\n    return indices && indices[0] >= 0 ? indices[0] : -1;\n  }\n  _indexOfSelectedItemKey(key, ignoreIndicesMap) {\n    let selectedIndex;\n    if (this.options.equalByReference) {\n      selectedIndex = this.options.selectedItemKeys.indexOf(key);\n    } else if (isObject(key)) {\n      selectedIndex = this._getSelectedIndexByKey(key, ignoreIndicesMap);\n    } else {\n      selectedIndex = this._getSelectedIndexByHash(key, ignoreIndicesMap);\n    }\n    return selectedIndex;\n  }\n  _shiftSelectedKeyIndices(keyIndex) {\n    for (let currentKeyIndex = keyIndex; currentKeyIndex < this.options.selectedItemKeys.length; currentKeyIndex++) {\n      const currentKey = this.options.selectedItemKeys[currentKeyIndex];\n      const currentKeyHash = getKeyHash(currentKey);\n      const currentKeyIndices = this.options.keyHashIndices[currentKeyHash];\n      if (!currentKeyIndices) {\n        continue;\n      }\n      for (let i = 0; i < currentKeyIndices.length; i++) {\n        if (currentKeyIndices[i] > keyIndex) {\n          currentKeyIndices[i]--;\n        }\n      }\n    }\n  }\n  removeSelectedItem(key, keyIndicesToRemoveMap, isDisabled) {\n    if (!this.options.ignoreDisabledItems && isDisabled) {\n      return;\n    }\n    const keyHash = this._getKeyHash(key);\n    const isBatchDeselect = !!keyIndicesToRemoveMap;\n    const keyIndex = this._indexOfSelectedItemKey(keyHash, keyIndicesToRemoveMap);\n    if (keyIndex < 0) {\n      return keyIndex;\n    }\n    this.options.removedItemKeys.push(key);\n    this.options.removedItems.push(this.options.selectedItems[keyIndex]);\n    if (isBatchDeselect) {\n      return keyIndex;\n    }\n    this.options.selectedItemKeys.splice(keyIndex, 1);\n    this.options.selectedItems.splice(keyIndex, 1);\n    if (isObject(keyHash) || !this.options.keyHashIndices) {\n      return keyIndex;\n    }\n    const keyIndices = this.options.keyHashIndices[keyHash];\n    if (!keyIndices) {\n      return keyIndex;\n    }\n    keyIndices.shift();\n    if (!keyIndices.length) {\n      delete this.options.keyHashIndices[keyHash];\n    }\n    this._shiftSelectedKeyIndices(keyIndex);\n    return keyIndex;\n  }\n  _updateAddedItemKeys(keys, items) {\n    for (let i = 0; i < keys.length; i++) {\n      if (!this.isItemKeySelected(keys[i])) {\n        this.options.addedItemKeys.push(keys[i]);\n        this.options.addedItems.push(items[i]);\n      }\n    }\n  }\n  _updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems) {\n    for (let i = 0; i < oldSelectedKeys.length; i++) {\n      if (!this.isItemKeySelected(oldSelectedKeys[i])) {\n        this.options.removedItemKeys.push(oldSelectedKeys[i]);\n        this.options.removedItems.push(oldSelectedItems[i]);\n      }\n    }\n  }\n  _isItemSelectionInProgress(key, checkPending) {\n    const shouldCheckPending = checkPending && this._lastRequestData && this._requestInProgress();\n    if (shouldCheckPending) {\n      const addedItems = this._lastRequestData.addedItems ?? [];\n      return addedItems.includes(key);\n    }\n    return false;\n  }\n  _getKeyHash(key) {\n    return this.options.equalByReference ? key : getKeyHash(key);\n  }\n  setSelectedItems(keys, items) {\n    this._updateAddedItemKeys(keys, items);\n    const oldSelectedKeys = this.options.selectedItemKeys;\n    const oldSelectedItems = this.options.selectedItems;\n    if (!this.options.equalByReference) {\n      this._initSelectedItemKeyHash();\n      this.updateSelectedItemKeyHash(keys);\n    }\n    this._setOption(\"selectedItemKeys\", keys);\n    this._setOption(\"selectedItems\", items);\n    this._updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems);\n  }\n  isItemDataSelected(itemData) {\n    let options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const key = this.options.keyOf(itemData);\n    return this.isItemKeySelected(key, options);\n  }\n  isItemKeySelected(key) {\n    let options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    let result = this._isItemSelectionInProgress(key, options.checkPending);\n    if (!result) {\n      const keyHash = this._getKeyHash(key);\n      const index = this._indexOfSelectedItemKey(keyHash);\n      result = -1 !== index;\n    }\n    return result;\n  }\n  getSelectAllState(visibleOnly) {\n    if (visibleOnly) {\n      return this._getVisibleSelectAllState();\n    }\n    return this._getFullSelectAllState();\n  }\n  loadSelectedItemsWithFilter() {\n    const keyExpr = this.options.key();\n    const keys = this.getSelectedItemKeys();\n    const filter = this.options.filter();\n    if (!keys.length) {\n      return Deferred().resolve([]);\n    }\n    const selectionFilterCreator = new SelectionFilterCreator(keys);\n    const combinedFilter = selectionFilterCreator.getCombinedFilter(keyExpr, filter, true);\n    return this._loadFilteredData(combinedFilter);\n  }\n  _storeSelectionState() {\n    const {\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      keyHashIndices: keyHashIndices\n    } = this.options;\n    this._storedSelectionState = {\n      keyHashIndices: JSON.stringify(keyHashIndices),\n      selectedItems: [...selectedItems],\n      selectedItemKeys: [...selectedItemKeys]\n    };\n  }\n  _restoreSelectionState() {\n    this._clearItemKeys();\n    const {\n      selectedItemKeys: selectedItemKeys,\n      selectedItems: selectedItems,\n      keyHashIndices: keyHashIndices\n    } = this._storedSelectionState;\n    this._setOption(\"selectedItemKeys\", selectedItemKeys);\n    this._setOption(\"selectedItems\", selectedItems);\n    this._setOption(\"keyHashIndices\", JSON.parse(keyHashIndices));\n  }\n  _onePageSelectAll(isDeselect) {\n    if (\"pending\" === this._lastSelectAllPageDeferred.state()) {\n      return Deferred().reject();\n    }\n    this._storeSelectionState();\n    this._selectAllPlainItems(isDeselect);\n    this._lastSelectAllPageDeferred = Deferred();\n    this._callCallbackIfNotCanceled(() => {\n      this.onSelectionChanged();\n      this._lastSelectAllPageDeferred.resolve();\n    }, () => {\n      this._restoreSelectionState();\n      this._lastSelectAllPageDeferred.reject();\n    });\n    return this._lastSelectAllPageDeferred;\n  }\n}","map":{"version":3,"names":["dataQuery","getUniqueValues","removeDuplicates","isKeysEqual","getKeyHash","Deferred","when","SelectionFilterCreator","isDefined","isObject","errors","SelectionStrategy","StandardStrategy","constructor","options","_lastSelectAllPageDeferred","reject","_initSelectedItemKeyHash","_setOption","equalByReference","getSelectedItemKeys","selectedItemKeys","slice","getSelectedItems","selectedItems","_preserveSelectionUpdate","items","isDeselect","keyOf","keyIndicesToRemoveMap","keyIndex","i","isBatchDeselect","length","item","key","removeSelectedItem","disabled","addSelectedItem","_batchRemoveSelectedItems","push","updateSelectedItemKeyHash","_loadSelectedItemsCore","keys","isSelectAll","filter","forceCombinedFilter","arguments","deferred","resolve","selectionFilterCreator","combinedFilter","getCombinedFilter","deselectedItems","toArray","filteredItems","plainItems","isSelectableItem","map","getItemData","localFilter","getLocalFilter","equalKeys","bind","_loadFilteredData","_replaceSelectionUpdate","internalKeys","setSelectedItems","_warnOnIncorrectKeys","allowNullValue","isItemKeySelected","log","_isMultiSelectEnabled","mode","_requestInProgress","_this$_lastLoadDeferr","_lastLoadDeferred","state","_concatRequestsItems","oldRequestItems","updatedKeys","addedItems","added","concat","removedItems","removed","_collectLastRequestData","isDeselectAll","multiSelectEnabled","lastRequestData","_lastRequestData","_shouldMergeWithLastRequest","_updateKeysByLastRequestData","currentKeys","_this$_lastRequestDat","_this$_lastRequestDat2","_loadSelectedItems","that","always","done","fail","preserve","_isCancelingInProgress","loadingDeferred","selectionDeferred","_storeSelectionState","_callCallbackIfNotCanceled","onSelectionChanged","_restoreSelectionState","itemData","ignoreDisabledItems","disabledItemKeys","indexOf","keyHash","_getKeyHash","_indexOfSelectedItemKey","keyHashIndices","addedItemKeys","_getSelectedIndexByKey","ignoreIndicesMap","index","_getSelectedIndexByHash","indices","selectedIndex","_shiftSelectedKeyIndices","currentKeyIndex","currentKey","currentKeyHash","currentKeyIndices","isDisabled","removedItemKeys","splice","keyIndices","shift","_updateAddedItemKeys","_updateRemovedItemKeys","oldSelectedKeys","oldSelectedItems","_isItemSelectionInProgress","checkPending","shouldCheckPending","includes","isItemDataSelected","result","getSelectAllState","visibleOnly","_getVisibleSelectAllState","_getFullSelectAllState","loadSelectedItemsWithFilter","keyExpr","_storedSelectionState","JSON","stringify","_clearItemKeys","parse","_onePageSelectAll","_selectAllPlainItems"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/selection/m_selection.strategy.standard.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/selection/m_selection.strategy.standard.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dataQuery from \"../../../common/data/query\";\r\nimport {\r\n    getUniqueValues,\r\n    removeDuplicates\r\n} from \"../../../core/utils/array\";\r\nimport {\r\n    isKeysEqual\r\n} from \"../../../core/utils/array_compare\";\r\nimport {\r\n    getKeyHash\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    SelectionFilterCreator\r\n} from \"../../../core/utils/selection_filter\";\r\nimport {\r\n    isDefined,\r\n    isObject\r\n} from \"../../../core/utils/type\";\r\nimport errors from \"../../../ui/widget/ui.errors\";\r\nimport SelectionStrategy from \"./m_selection.strategy\";\r\nexport default class StandardStrategy extends SelectionStrategy {\r\n    constructor(options) {\r\n        super(options);\r\n        this._lastSelectAllPageDeferred = Deferred().reject();\r\n        this._initSelectedItemKeyHash()\r\n    }\r\n    _initSelectedItemKeyHash() {\r\n        this._setOption(\"keyHashIndices\", this.options.equalByReference ? null : {})\r\n    }\r\n    getSelectedItemKeys() {\r\n        return this.options.selectedItemKeys.slice(0)\r\n    }\r\n    getSelectedItems() {\r\n        return this.options.selectedItems.slice(0)\r\n    }\r\n    _preserveSelectionUpdate(items, isDeselect) {\r\n        const {\r\n            keyOf: keyOf\r\n        } = this.options;\r\n        let keyIndicesToRemoveMap;\r\n        let keyIndex;\r\n        let i;\r\n        if (!keyOf) {\r\n            return\r\n        }\r\n        const isBatchDeselect = isDeselect && items.length > 1 && !this.options.equalByReference;\r\n        if (isBatchDeselect) {\r\n            keyIndicesToRemoveMap = {}\r\n        }\r\n        for (i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            const key = keyOf(item);\r\n            if (isDeselect) {\r\n                keyIndex = this.removeSelectedItem(key, keyIndicesToRemoveMap, null === item || void 0 === item ? void 0 : item.disabled);\r\n                if (keyIndicesToRemoveMap && keyIndex >= 0) {\r\n                    keyIndicesToRemoveMap[keyIndex] = true\r\n                }\r\n            } else {\r\n                this.addSelectedItem(key, item)\r\n            }\r\n        }\r\n        if (isBatchDeselect) {\r\n            this._batchRemoveSelectedItems(keyIndicesToRemoveMap)\r\n        }\r\n    }\r\n    _batchRemoveSelectedItems(keyIndicesToRemoveMap) {\r\n        const selectedItemKeys = this.options.selectedItemKeys.slice(0);\r\n        const selectedItems = this.options.selectedItems.slice(0);\r\n        this.options.selectedItemKeys.length = 0;\r\n        this.options.selectedItems.length = 0;\r\n        for (let i = 0; i < selectedItemKeys.length; i++) {\r\n            if (!keyIndicesToRemoveMap[i]) {\r\n                this.options.selectedItemKeys.push(selectedItemKeys[i]);\r\n                this.options.selectedItems.push(selectedItems[i])\r\n            }\r\n        }\r\n        this._initSelectedItemKeyHash();\r\n        this.updateSelectedItemKeyHash(this.options.selectedItemKeys)\r\n    }\r\n    _loadSelectedItemsCore(keys, isDeselect, isSelectAll, filter) {\r\n        let forceCombinedFilter = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n        let deferred = Deferred();\r\n        const key = this.options.key();\r\n        if (!keys.length && !isSelectAll) {\r\n            deferred.resolve([]);\r\n            return deferred\r\n        }\r\n        if (isSelectAll && isDeselect && !filter) {\r\n            deferred.resolve(this.getSelectedItems());\r\n            return deferred\r\n        }\r\n        const selectionFilterCreator = new SelectionFilterCreator(keys, isSelectAll);\r\n        const combinedFilter = selectionFilterCreator.getCombinedFilter(key, filter, forceCombinedFilter);\r\n        let deselectedItems = [];\r\n        if (isDeselect) {\r\n            const {\r\n                selectedItems: selectedItems\r\n            } = this.options;\r\n            deselectedItems = combinedFilter && keys.length !== selectedItems.length ? dataQuery(selectedItems).filter(combinedFilter).toArray() : selectedItems.slice(0)\r\n        }\r\n        let filteredItems = deselectedItems.length ? deselectedItems : this.options.plainItems(true).filter(this.options.isSelectableItem).map(this.options.getItemData);\r\n        const localFilter = selectionFilterCreator.getLocalFilter(this.options.keyOf, this.equalKeys.bind(this), this.options.equalByReference, key);\r\n        filteredItems = filteredItems.filter(localFilter);\r\n        if (deselectedItems.length || !isSelectAll && filteredItems.length === keys.length) {\r\n            deferred.resolve(filteredItems)\r\n        } else {\r\n            deferred = this._loadFilteredData(combinedFilter, localFilter, null, isSelectAll)\r\n        }\r\n        return deferred\r\n    }\r\n    _replaceSelectionUpdate(items) {\r\n        const internalKeys = [];\r\n        const {\r\n            keyOf: keyOf\r\n        } = this.options;\r\n        if (!keyOf) {\r\n            return\r\n        }\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            const key = keyOf(item);\r\n            internalKeys.push(key)\r\n        }\r\n        this.setSelectedItems(internalKeys, items)\r\n    }\r\n    _warnOnIncorrectKeys(keys) {\r\n        const {\r\n            allowNullValue: allowNullValue\r\n        } = this.options;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const key = keys[i];\r\n            if ((!allowNullValue || null !== key) && !this.isItemKeySelected(key)) {\r\n                errors.log(\"W1002\", key)\r\n            }\r\n        }\r\n    }\r\n    _isMultiSelectEnabled() {\r\n        const {\r\n            mode: mode\r\n        } = this.options;\r\n        return \"all\" === mode || \"multiple\" === mode\r\n    }\r\n    _requestInProgress() {\r\n        var _this$_lastLoadDeferr;\r\n        return \"pending\" === (null === (_this$_lastLoadDeferr = this._lastLoadDeferred) || void 0 === _this$_lastLoadDeferr ? void 0 : _this$_lastLoadDeferr.state())\r\n    }\r\n    _concatRequestsItems(keys, isDeselect, oldRequestItems, updatedKeys) {\r\n        let selectedItems;\r\n        const deselectedItems = isDeselect ? keys : [];\r\n        if (updatedKeys) {\r\n            selectedItems = updatedKeys\r\n        } else {\r\n            selectedItems = removeDuplicates(keys, this.options.selectedItemKeys)\r\n        }\r\n        return {\r\n            addedItems: oldRequestItems.added.concat(selectedItems),\r\n            removedItems: oldRequestItems.removed.concat(deselectedItems),\r\n            keys: keys\r\n        }\r\n    }\r\n    _collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys) {\r\n        const isDeselectAll = isDeselect && isSelectAll;\r\n        const oldRequestItems = {\r\n            added: [],\r\n            removed: []\r\n        };\r\n        const multiSelectEnabled = this._isMultiSelectEnabled();\r\n        let lastRequestData = multiSelectEnabled ? this._lastRequestData : {};\r\n        if (multiSelectEnabled) {\r\n            if (this._shouldMergeWithLastRequest) {\r\n                if (isDeselectAll) {\r\n                    this._lastLoadDeferred.reject();\r\n                    lastRequestData = {}\r\n                } else if (!isKeysEqual(keys, this.options.selectedItemKeys)) {\r\n                    oldRequestItems.added = lastRequestData.addedItems;\r\n                    oldRequestItems.removed = lastRequestData.removedItems;\r\n                    if (!isDeselect) {\r\n                        this._lastLoadDeferred.reject()\r\n                    }\r\n                }\r\n            }\r\n            lastRequestData = this._concatRequestsItems(keys, isDeselect, oldRequestItems, this._shouldMergeWithLastRequest ? void 0 : updatedKeys)\r\n        }\r\n        return lastRequestData\r\n    }\r\n    _updateKeysByLastRequestData(keys, isDeselect, isSelectAll) {\r\n        let currentKeys = keys;\r\n        if (this._isMultiSelectEnabled() && this._shouldMergeWithLastRequest && !isDeselect && !isSelectAll) {\r\n            var _this$_lastRequestDat, _this$_lastRequestDat2;\r\n            currentKeys = removeDuplicates(keys.concat(null === (_this$_lastRequestDat = this._lastRequestData) || void 0 === _this$_lastRequestDat ? void 0 : _this$_lastRequestDat.addedItems), null === (_this$_lastRequestDat2 = this._lastRequestData) || void 0 === _this$_lastRequestDat2 ? void 0 : _this$_lastRequestDat2.removedItems);\r\n            currentKeys = getUniqueValues(currentKeys)\r\n        }\r\n        return currentKeys\r\n    }\r\n    _loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys) {\r\n        let forceCombinedFilter = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n        const that = this;\r\n        const deferred = Deferred();\r\n        const filter = that.options.filter();\r\n        this._shouldMergeWithLastRequest = this._requestInProgress();\r\n        this._lastRequestData = this._collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys);\r\n        when(that._lastLoadDeferred).always((() => {\r\n            const currentKeys = that._updateKeysByLastRequestData(keys, isDeselect, isSelectAll);\r\n            that._shouldMergeWithLastRequest = false;\r\n            that._loadSelectedItemsCore(currentKeys, isDeselect, isSelectAll, filter, forceCombinedFilter).done(deferred.resolve).fail(deferred.reject)\r\n        }));\r\n        that._lastLoadDeferred = deferred;\r\n        return deferred\r\n    }\r\n    selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys) {\r\n        let forceCombinedFilter = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : false;\r\n        if (this._isCancelingInProgress) {\r\n            return Deferred().reject()\r\n        }\r\n        const loadingDeferred = this._loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys, forceCombinedFilter);\r\n        const selectionDeferred = Deferred();\r\n        loadingDeferred.done((items => {\r\n            this._storeSelectionState();\r\n            if (preserve) {\r\n                this._preserveSelectionUpdate(items, isDeselect)\r\n            } else {\r\n                this._replaceSelectionUpdate(items)\r\n            }\r\n            this._isCancelingInProgress = true;\r\n            this._callCallbackIfNotCanceled((() => {\r\n                this._isCancelingInProgress = false;\r\n                this.onSelectionChanged();\r\n                selectionDeferred.resolve(items)\r\n            }), (() => {\r\n                this._isCancelingInProgress = false;\r\n                this._restoreSelectionState();\r\n                selectionDeferred.reject()\r\n            }))\r\n        }));\r\n        return selectionDeferred\r\n    }\r\n    addSelectedItem(key, itemData) {\r\n        if (isDefined(itemData) && !this.options.ignoreDisabledItems && itemData.disabled) {\r\n            if (-1 === this.options.disabledItemKeys.indexOf(key)) {\r\n                this.options.disabledItemKeys.push(key)\r\n            }\r\n            return\r\n        }\r\n        const keyHash = this._getKeyHash(key);\r\n        if (-1 === this._indexOfSelectedItemKey(keyHash)) {\r\n            if (!isObject(keyHash) && this.options.keyHashIndices) {\r\n                this.options.keyHashIndices[keyHash] = [this.options.selectedItemKeys.length]\r\n            }\r\n            this.options.selectedItemKeys.push(key);\r\n            this.options.addedItemKeys.push(key);\r\n            this.options.addedItems.push(itemData);\r\n            this.options.selectedItems.push(itemData)\r\n        }\r\n    }\r\n    _getSelectedIndexByKey(key, ignoreIndicesMap) {\r\n        const {\r\n            selectedItemKeys: selectedItemKeys\r\n        } = this.options;\r\n        for (let index = 0; index < selectedItemKeys.length; index++) {\r\n            if ((!ignoreIndicesMap || !ignoreIndicesMap[index]) && this.equalKeys(selectedItemKeys[index], key)) {\r\n                return index\r\n            }\r\n        }\r\n        return -1\r\n    }\r\n    _getSelectedIndexByHash(key, ignoreIndicesMap) {\r\n        let indices = this.options.keyHashIndices[key];\r\n        if (indices && indices.length > 1 && ignoreIndicesMap) {\r\n            indices = indices.filter((index => !ignoreIndicesMap[index]))\r\n        }\r\n        return indices && indices[0] >= 0 ? indices[0] : -1\r\n    }\r\n    _indexOfSelectedItemKey(key, ignoreIndicesMap) {\r\n        let selectedIndex;\r\n        if (this.options.equalByReference) {\r\n            selectedIndex = this.options.selectedItemKeys.indexOf(key)\r\n        } else if (isObject(key)) {\r\n            selectedIndex = this._getSelectedIndexByKey(key, ignoreIndicesMap)\r\n        } else {\r\n            selectedIndex = this._getSelectedIndexByHash(key, ignoreIndicesMap)\r\n        }\r\n        return selectedIndex\r\n    }\r\n    _shiftSelectedKeyIndices(keyIndex) {\r\n        for (let currentKeyIndex = keyIndex; currentKeyIndex < this.options.selectedItemKeys.length; currentKeyIndex++) {\r\n            const currentKey = this.options.selectedItemKeys[currentKeyIndex];\r\n            const currentKeyHash = getKeyHash(currentKey);\r\n            const currentKeyIndices = this.options.keyHashIndices[currentKeyHash];\r\n            if (!currentKeyIndices) {\r\n                continue\r\n            }\r\n            for (let i = 0; i < currentKeyIndices.length; i++) {\r\n                if (currentKeyIndices[i] > keyIndex) {\r\n                    currentKeyIndices[i]--\r\n                }\r\n            }\r\n        }\r\n    }\r\n    removeSelectedItem(key, keyIndicesToRemoveMap, isDisabled) {\r\n        if (!this.options.ignoreDisabledItems && isDisabled) {\r\n            return\r\n        }\r\n        const keyHash = this._getKeyHash(key);\r\n        const isBatchDeselect = !!keyIndicesToRemoveMap;\r\n        const keyIndex = this._indexOfSelectedItemKey(keyHash, keyIndicesToRemoveMap);\r\n        if (keyIndex < 0) {\r\n            return keyIndex\r\n        }\r\n        this.options.removedItemKeys.push(key);\r\n        this.options.removedItems.push(this.options.selectedItems[keyIndex]);\r\n        if (isBatchDeselect) {\r\n            return keyIndex\r\n        }\r\n        this.options.selectedItemKeys.splice(keyIndex, 1);\r\n        this.options.selectedItems.splice(keyIndex, 1);\r\n        if (isObject(keyHash) || !this.options.keyHashIndices) {\r\n            return keyIndex\r\n        }\r\n        const keyIndices = this.options.keyHashIndices[keyHash];\r\n        if (!keyIndices) {\r\n            return keyIndex\r\n        }\r\n        keyIndices.shift();\r\n        if (!keyIndices.length) {\r\n            delete this.options.keyHashIndices[keyHash]\r\n        }\r\n        this._shiftSelectedKeyIndices(keyIndex);\r\n        return keyIndex\r\n    }\r\n    _updateAddedItemKeys(keys, items) {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (!this.isItemKeySelected(keys[i])) {\r\n                this.options.addedItemKeys.push(keys[i]);\r\n                this.options.addedItems.push(items[i])\r\n            }\r\n        }\r\n    }\r\n    _updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems) {\r\n        for (let i = 0; i < oldSelectedKeys.length; i++) {\r\n            if (!this.isItemKeySelected(oldSelectedKeys[i])) {\r\n                this.options.removedItemKeys.push(oldSelectedKeys[i]);\r\n                this.options.removedItems.push(oldSelectedItems[i])\r\n            }\r\n        }\r\n    }\r\n    _isItemSelectionInProgress(key, checkPending) {\r\n        const shouldCheckPending = checkPending && this._lastRequestData && this._requestInProgress();\r\n        if (shouldCheckPending) {\r\n            const addedItems = this._lastRequestData.addedItems ?? [];\r\n            return addedItems.includes(key)\r\n        }\r\n        return false\r\n    }\r\n    _getKeyHash(key) {\r\n        return this.options.equalByReference ? key : getKeyHash(key)\r\n    }\r\n    setSelectedItems(keys, items) {\r\n        this._updateAddedItemKeys(keys, items);\r\n        const oldSelectedKeys = this.options.selectedItemKeys;\r\n        const oldSelectedItems = this.options.selectedItems;\r\n        if (!this.options.equalByReference) {\r\n            this._initSelectedItemKeyHash();\r\n            this.updateSelectedItemKeyHash(keys)\r\n        }\r\n        this._setOption(\"selectedItemKeys\", keys);\r\n        this._setOption(\"selectedItems\", items);\r\n        this._updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems)\r\n    }\r\n    isItemDataSelected(itemData) {\r\n        let options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n        const key = this.options.keyOf(itemData);\r\n        return this.isItemKeySelected(key, options)\r\n    }\r\n    isItemKeySelected(key) {\r\n        let options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n        let result = this._isItemSelectionInProgress(key, options.checkPending);\r\n        if (!result) {\r\n            const keyHash = this._getKeyHash(key);\r\n            const index = this._indexOfSelectedItemKey(keyHash);\r\n            result = -1 !== index\r\n        }\r\n        return result\r\n    }\r\n    getSelectAllState(visibleOnly) {\r\n        if (visibleOnly) {\r\n            return this._getVisibleSelectAllState()\r\n        }\r\n        return this._getFullSelectAllState()\r\n    }\r\n    loadSelectedItemsWithFilter() {\r\n        const keyExpr = this.options.key();\r\n        const keys = this.getSelectedItemKeys();\r\n        const filter = this.options.filter();\r\n        if (!keys.length) {\r\n            return Deferred().resolve([])\r\n        }\r\n        const selectionFilterCreator = new SelectionFilterCreator(keys);\r\n        const combinedFilter = selectionFilterCreator.getCombinedFilter(keyExpr, filter, true);\r\n        return this._loadFilteredData(combinedFilter)\r\n    }\r\n    _storeSelectionState() {\r\n        const {\r\n            selectedItems: selectedItems,\r\n            selectedItemKeys: selectedItemKeys,\r\n            keyHashIndices: keyHashIndices\r\n        } = this.options;\r\n        this._storedSelectionState = {\r\n            keyHashIndices: JSON.stringify(keyHashIndices),\r\n            selectedItems: [...selectedItems],\r\n            selectedItemKeys: [...selectedItemKeys]\r\n        }\r\n    }\r\n    _restoreSelectionState() {\r\n        this._clearItemKeys();\r\n        const {\r\n            selectedItemKeys: selectedItemKeys,\r\n            selectedItems: selectedItems,\r\n            keyHashIndices: keyHashIndices\r\n        } = this._storedSelectionState;\r\n        this._setOption(\"selectedItemKeys\", selectedItemKeys);\r\n        this._setOption(\"selectedItems\", selectedItems);\r\n        this._setOption(\"keyHashIndices\", JSON.parse(keyHashIndices))\r\n    }\r\n    _onePageSelectAll(isDeselect) {\r\n        if (\"pending\" === this._lastSelectAllPageDeferred.state()) {\r\n            return Deferred().reject()\r\n        }\r\n        this._storeSelectionState();\r\n        this._selectAllPlainItems(isDeselect);\r\n        this._lastSelectAllPageDeferred = Deferred();\r\n        this._callCallbackIfNotCanceled((() => {\r\n            this.onSelectionChanged();\r\n            this._lastSelectAllPageDeferred.resolve()\r\n        }), (() => {\r\n            this._restoreSelectionState();\r\n            this._lastSelectAllPageDeferred.reject()\r\n        }));\r\n        return this._lastSelectAllPageDeferred\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}