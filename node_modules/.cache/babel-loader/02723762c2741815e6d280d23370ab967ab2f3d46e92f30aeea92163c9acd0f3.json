{"ast":null,"code":"/**\r\n * DevExtreme (esm/common/core/localization/intl/number.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { config as dxConfig } from \"../../../../common\";\nimport localizationCoreUtils from \"../core\";\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\nimport accountingFormats from \"../cldr-data/accounting_formats\";\nconst CURRENCY_STYLES = [\"standard\", \"accounting\"];\nconst MAX_FRACTION_DIGITS = 20;\nconst detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\nconst formattersCache = {};\nconst getFormatter = format => {\n  const key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format;\n  }\n  return formattersCache[key];\n};\nconst getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\n  style: \"currency\",\n  currency: currency\n});\nexport default {\n  engine: function () {\n    return \"intl\";\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this.callBase.apply(this, arguments);\n    }\n    return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value);\n  },\n  _normalizeFormatConfig: function (format, formatConfig, value) {\n    let config;\n    if (\"decimal\" === format) {\n      const fractionDigits = String(value).split(\".\")[1];\n      config = {\n        minimumIntegerDigits: formatConfig.precision || void 0,\n        useGrouping: false,\n        maximumFractionDigits: fractionDigits && fractionDigits.length,\n        round: value < 0 ? \"ceil\" : \"floor\"\n      };\n    } else {\n      config = this._getPrecisionConfig(formatConfig.precision);\n    }\n    if (\"percent\" === format) {\n      config.style = \"percent\";\n    } else if (\"currency\" === format) {\n      const useAccountingStyle = formatConfig.useCurrencyAccountingStyle ?? dxConfig().defaultUseCurrencyAccountingStyle;\n      config.style = \"currency\";\n      config.currency = formatConfig.currency || dxConfig().defaultCurrency;\n      config.currencySign = CURRENCY_STYLES[+useAccountingStyle];\n    }\n    return config;\n  },\n  _getPrecisionConfig: function (precision) {\n    let config;\n    if (null === precision) {\n      config = {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20\n      };\n    } else {\n      config = {\n        minimumFractionDigits: precision || 0,\n        maximumFractionDigits: precision || 0\n      };\n    }\n    return config;\n  },\n  format: function (value, format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n    format = this._normalizeFormat(format);\n    if (\"default\" === format.currency) {\n      format.currency = dxConfig().defaultCurrency;\n    }\n    if (!format || \"function\" !== typeof format && !format.type && !format.formatter) {\n      return getFormatter(format)(value);\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  _getCurrencySymbolInfo: function (currency) {\n    const formatter = getCurrencyFormatter(currency);\n    return this._extractCurrencySymbolInfo(formatter.format(0));\n  },\n  _extractCurrencySymbolInfo: function (currencyValueString) {\n    const match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\n    const position = match[1] ? \"before\" : \"after\";\n    const symbol = match[1] || match[4] || \"\";\n    const delimiter = match[2] || match[3] || \"\";\n    return {\n      position: position,\n      symbol: symbol,\n      delimiter: delimiter\n    };\n  },\n  getCurrencySymbol: function (currency) {\n    if (!currency) {\n      currency = dxConfig().defaultCurrency;\n    }\n    const symbolInfo = this._getCurrencySymbolInfo(currency);\n    return {\n      symbol: symbolInfo.symbol\n    };\n  },\n  getOpenXmlCurrencyFormat: function (currency) {\n    const targetCurrency = currency || dxConfig().defaultCurrency;\n    const currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\n    const closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);\n    return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat);\n  }\n};","map":{"version":3,"names":["config","dxConfig","localizationCoreUtils","openXmlCurrencyFormat","accountingFormats","CURRENCY_STYLES","MAX_FRACTION_DIGITS","detectCurrencySymbolRegex","formattersCache","getFormatter","format","key","locale","JSON","stringify","Intl","NumberFormat","getCurrencyFormatter","currency","style","engine","_formatNumberCore","value","formatConfig","callBase","apply","arguments","_normalizeFormatConfig","fractionDigits","String","split","minimumIntegerDigits","precision","useGrouping","maximumFractionDigits","length","round","_getPrecisionConfig","useAccountingStyle","useCurrencyAccountingStyle","defaultUseCurrencyAccountingStyle","defaultCurrency","currencySign","minimumFractionDigits","_normalizeFormat","type","formatter","_getCurrencySymbolInfo","_extractCurrencySymbolInfo","currencyValueString","match","exec","position","symbol","delimiter","getCurrencySymbol","symbolInfo","getOpenXmlCurrencyFormat","targetCurrency","currencySymbol","closestAccountingFormat","getValueByClosestLocale"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/common/core/localization/intl/number.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/common/core/localization/intl/number.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    config as dxConfig\r\n} from \"../../../../common\";\r\nimport localizationCoreUtils from \"../core\";\r\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\r\nimport accountingFormats from \"../cldr-data/accounting_formats\";\r\nconst CURRENCY_STYLES = [\"standard\", \"accounting\"];\r\nconst MAX_FRACTION_DIGITS = 20;\r\nconst detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\r\nconst formattersCache = {};\r\nconst getFormatter = format => {\r\n    const key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\r\n    if (!formattersCache[key]) {\r\n        formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format\r\n    }\r\n    return formattersCache[key]\r\n};\r\nconst getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\r\n    style: \"currency\",\r\n    currency: currency\r\n});\r\nexport default {\r\n    engine: function() {\r\n        return \"intl\"\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value)\r\n    },\r\n    _normalizeFormatConfig: function(format, formatConfig, value) {\r\n        let config;\r\n        if (\"decimal\" === format) {\r\n            const fractionDigits = String(value).split(\".\")[1];\r\n            config = {\r\n                minimumIntegerDigits: formatConfig.precision || void 0,\r\n                useGrouping: false,\r\n                maximumFractionDigits: fractionDigits && fractionDigits.length,\r\n                round: value < 0 ? \"ceil\" : \"floor\"\r\n            }\r\n        } else {\r\n            config = this._getPrecisionConfig(formatConfig.precision)\r\n        }\r\n        if (\"percent\" === format) {\r\n            config.style = \"percent\"\r\n        } else if (\"currency\" === format) {\r\n            const useAccountingStyle = formatConfig.useCurrencyAccountingStyle ?? dxConfig().defaultUseCurrencyAccountingStyle;\r\n            config.style = \"currency\";\r\n            config.currency = formatConfig.currency || dxConfig().defaultCurrency;\r\n            config.currencySign = CURRENCY_STYLES[+useAccountingStyle]\r\n        }\r\n        return config\r\n    },\r\n    _getPrecisionConfig: function(precision) {\r\n        let config;\r\n        if (null === precision) {\r\n            config = {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 20\r\n            }\r\n        } else {\r\n            config = {\r\n                minimumFractionDigits: precision || 0,\r\n                maximumFractionDigits: precision || 0\r\n            }\r\n        }\r\n        return config\r\n    },\r\n    format: function(value, format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        format = this._normalizeFormat(format);\r\n        if (\"default\" === format.currency) {\r\n            format.currency = dxConfig().defaultCurrency\r\n        }\r\n        if (!format || \"function\" !== typeof format && !format.type && !format.formatter) {\r\n            return getFormatter(format)(value)\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _getCurrencySymbolInfo: function(currency) {\r\n        const formatter = getCurrencyFormatter(currency);\r\n        return this._extractCurrencySymbolInfo(formatter.format(0))\r\n    },\r\n    _extractCurrencySymbolInfo: function(currencyValueString) {\r\n        const match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\r\n        const position = match[1] ? \"before\" : \"after\";\r\n        const symbol = match[1] || match[4] || \"\";\r\n        const delimiter = match[2] || match[3] || \"\";\r\n        return {\r\n            position: position,\r\n            symbol: symbol,\r\n            delimiter: delimiter\r\n        }\r\n    },\r\n    getCurrencySymbol: function(currency) {\r\n        if (!currency) {\r\n            currency = dxConfig().defaultCurrency\r\n        }\r\n        const symbolInfo = this._getCurrencySymbolInfo(currency);\r\n        return {\r\n            symbol: symbolInfo.symbol\r\n        }\r\n    },\r\n    getOpenXmlCurrencyFormat: function(currency) {\r\n        const targetCurrency = currency || dxConfig().defaultCurrency;\r\n        const currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\r\n        const closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale((locale => accountingFormats[locale]));\r\n        return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat)\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,MAAM,IAAIC,QAAQ,QACf,oBAAoB;AAC3B,OAAOC,qBAAqB,MAAM,SAAS;AAC3C,OAAOC,qBAAqB,MAAM,6BAA6B;AAC/D,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,MAAMC,eAAe,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC;AAClD,MAAMC,mBAAmB,GAAG,EAAE;AAC9B,MAAMC,yBAAyB,GAAG,yCAAyC;AAC3E,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,YAAY,GAAGC,MAAM,IAAI;EAC3B,MAAMC,GAAG,GAAGT,qBAAqB,CAACU,MAAM,CAAC,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC;EACzE,IAAI,CAACF,eAAe,CAACG,GAAG,CAAC,EAAE;IACvBH,eAAe,CAACG,GAAG,CAAC,GAAG,IAAII,IAAI,CAACC,YAAY,CAACd,qBAAqB,CAACU,MAAM,CAAC,CAAC,EAAEF,MAAM,CAAC,CAACA,MAAM;EAC/F;EACA,OAAOF,eAAe,CAACG,GAAG,CAAC;AAC/B,CAAC;AACD,MAAMM,oBAAoB,GAAGC,QAAQ,IAAI,IAAIH,IAAI,CAACC,YAAY,CAACd,qBAAqB,CAACU,MAAM,CAAC,CAAC,EAAE;EAC3FO,KAAK,EAAE,UAAU;EACjBD,QAAQ,EAAEA;AACd,CAAC,CAAC;AACF,eAAe;EACXE,MAAM,EAAE,SAAAA,CAAA,EAAW;IACf,OAAO,MAAM;EACjB,CAAC;EACDC,iBAAiB,EAAE,SAAAA,CAASC,KAAK,EAAEZ,MAAM,EAAEa,YAAY,EAAE;IACrD,IAAI,aAAa,KAAKb,MAAM,EAAE;MAC1B,OAAO,IAAI,CAACc,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC/C;IACA,OAAOjB,YAAY,CAAC,IAAI,CAACkB,sBAAsB,CAACjB,MAAM,EAAEa,YAAY,EAAED,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC;EACxF,CAAC;EACDK,sBAAsB,EAAE,SAAAA,CAASjB,MAAM,EAAEa,YAAY,EAAED,KAAK,EAAE;IAC1D,IAAItB,MAAM;IACV,IAAI,SAAS,KAAKU,MAAM,EAAE;MACtB,MAAMkB,cAAc,GAAGC,MAAM,CAACP,KAAK,CAAC,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAClD9B,MAAM,GAAG;QACL+B,oBAAoB,EAAER,YAAY,CAACS,SAAS,IAAI,KAAK,CAAC;QACtDC,WAAW,EAAE,KAAK;QAClBC,qBAAqB,EAAEN,cAAc,IAAIA,cAAc,CAACO,MAAM;QAC9DC,KAAK,EAAEd,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG;MAChC,CAAC;IACL,CAAC,MAAM;MACHtB,MAAM,GAAG,IAAI,CAACqC,mBAAmB,CAACd,YAAY,CAACS,SAAS,CAAC;IAC7D;IACA,IAAI,SAAS,KAAKtB,MAAM,EAAE;MACtBV,MAAM,CAACmB,KAAK,GAAG,SAAS;IAC5B,CAAC,MAAM,IAAI,UAAU,KAAKT,MAAM,EAAE;MAC9B,MAAM4B,kBAAkB,GAAGf,YAAY,CAACgB,0BAA0B,IAAItC,QAAQ,CAAC,CAAC,CAACuC,iCAAiC;MAClHxC,MAAM,CAACmB,KAAK,GAAG,UAAU;MACzBnB,MAAM,CAACkB,QAAQ,GAAGK,YAAY,CAACL,QAAQ,IAAIjB,QAAQ,CAAC,CAAC,CAACwC,eAAe;MACrEzC,MAAM,CAAC0C,YAAY,GAAGrC,eAAe,CAAC,CAACiC,kBAAkB,CAAC;IAC9D;IACA,OAAOtC,MAAM;EACjB,CAAC;EACDqC,mBAAmB,EAAE,SAAAA,CAASL,SAAS,EAAE;IACrC,IAAIhC,MAAM;IACV,IAAI,IAAI,KAAKgC,SAAS,EAAE;MACpBhC,MAAM,GAAG;QACL2C,qBAAqB,EAAE,CAAC;QACxBT,qBAAqB,EAAE;MAC3B,CAAC;IACL,CAAC,MAAM;MACHlC,MAAM,GAAG;QACL2C,qBAAqB,EAAEX,SAAS,IAAI,CAAC;QACrCE,qBAAqB,EAAEF,SAAS,IAAI;MACxC,CAAC;IACL;IACA,OAAOhC,MAAM;EACjB,CAAC;EACDU,MAAM,EAAE,SAAAA,CAASY,KAAK,EAAEZ,MAAM,EAAE;IAC5B,IAAI,QAAQ,KAAK,OAAOY,KAAK,EAAE;MAC3B,OAAOA,KAAK;IAChB;IACAZ,MAAM,GAAG,IAAI,CAACkC,gBAAgB,CAAClC,MAAM,CAAC;IACtC,IAAI,SAAS,KAAKA,MAAM,CAACQ,QAAQ,EAAE;MAC/BR,MAAM,CAACQ,QAAQ,GAAGjB,QAAQ,CAAC,CAAC,CAACwC,eAAe;IAChD;IACA,IAAI,CAAC/B,MAAM,IAAI,UAAU,KAAK,OAAOA,MAAM,IAAI,CAACA,MAAM,CAACmC,IAAI,IAAI,CAACnC,MAAM,CAACoC,SAAS,EAAE;MAC9E,OAAOrC,YAAY,CAACC,MAAM,CAAC,CAACY,KAAK,CAAC;IACtC;IACA,OAAO,IAAI,CAACE,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC/C,CAAC;EACDqB,sBAAsB,EAAE,SAAAA,CAAS7B,QAAQ,EAAE;IACvC,MAAM4B,SAAS,GAAG7B,oBAAoB,CAACC,QAAQ,CAAC;IAChD,OAAO,IAAI,CAAC8B,0BAA0B,CAACF,SAAS,CAACpC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC/D,CAAC;EACDsC,0BAA0B,EAAE,SAAAA,CAASC,mBAAmB,EAAE;IACtD,MAAMC,KAAK,GAAG3C,yBAAyB,CAAC4C,IAAI,CAACF,mBAAmB,CAAC,IAAI,EAAE;IACvE,MAAMG,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,OAAO;IAC9C,MAAMG,MAAM,GAAGH,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;IACzC,MAAMI,SAAS,GAAGJ,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5C,OAAO;MACHE,QAAQ,EAAEA,QAAQ;MAClBC,MAAM,EAAEA,MAAM;MACdC,SAAS,EAAEA;IACf,CAAC;EACL,CAAC;EACDC,iBAAiB,EAAE,SAAAA,CAASrC,QAAQ,EAAE;IAClC,IAAI,CAACA,QAAQ,EAAE;MACXA,QAAQ,GAAGjB,QAAQ,CAAC,CAAC,CAACwC,eAAe;IACzC;IACA,MAAMe,UAAU,GAAG,IAAI,CAACT,sBAAsB,CAAC7B,QAAQ,CAAC;IACxD,OAAO;MACHmC,MAAM,EAAEG,UAAU,CAACH;IACvB,CAAC;EACL,CAAC;EACDI,wBAAwB,EAAE,SAAAA,CAASvC,QAAQ,EAAE;IACzC,MAAMwC,cAAc,GAAGxC,QAAQ,IAAIjB,QAAQ,CAAC,CAAC,CAACwC,eAAe;IAC7D,MAAMkB,cAAc,GAAG,IAAI,CAACZ,sBAAsB,CAACW,cAAc,CAAC,CAACL,MAAM;IACzE,MAAMO,uBAAuB,GAAG1D,qBAAqB,CAAC2D,uBAAuB,CAAEjD,MAAM,IAAIR,iBAAiB,CAACQ,MAAM,CAAE,CAAC;IACpH,OAAOT,qBAAqB,CAACwD,cAAc,EAAEC,uBAAuB,CAAC;EACzE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}