{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport dateLocalization from \"../../../common/core/localization/date\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport config from \"../../../core/config\";\nimport devices from \"../../../core/devices\";\nimport browser from \"../../../core/utils/browser\";\nimport dateUtils from \"../../../core/utils/date\";\nimport dateSerialization from \"../../../core/utils/date_serialization\";\nimport { createTextElementHiddenCopy } from \"../../../core/utils/dom\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { inputType } from \"../../../core/utils/support\";\nimport { isDate as isDateType, isNumeric, isString } from \"../../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport DropDownEditor from \"../../ui/drop_down_editor/m_drop_down_editor\";\nimport Calendar from \"./m_date_box.strategy.calendar\";\nimport CalendarWithTime from \"./m_date_box.strategy.calendar_with_time\";\nimport DateView from \"./m_date_box.strategy.date_view\";\nimport List from \"./m_date_box.strategy.list\";\nimport Native from \"./m_date_box.strategy.native\";\nimport uiDateUtils from \"./m_date_utils\";\nconst window = getWindow();\nconst DATEBOX_CLASS = \"dx-datebox\";\nconst DX_AUTO_WIDTH_CLASS = \"dx-auto-width\";\nconst DX_INVALID_BADGE_CLASS = \"dx-show-invalid-badge\";\nconst DX_CLEAR_BUTTON_CLASS = \"dx-clear-button-area\";\nconst DATEBOX_WRAPPER_CLASS = \"dx-datebox-wrapper\";\nconst DROPDOWNEDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nconst PICKER_TYPE = {\n  calendar: \"calendar\",\n  rollers: \"rollers\",\n  list: \"list\",\n  native: \"native\"\n};\nconst TYPE = {\n  date: \"date\",\n  datetime: \"datetime\",\n  time: \"time\"\n};\nconst STRATEGY_NAME = {\n  calendar: \"Calendar\",\n  dateView: \"DateView\",\n  native: \"Native\",\n  calendarWithTime: \"CalendarWithTime\",\n  list: \"List\"\n};\nconst STRATEGY_CLASSES = {\n  Calendar: Calendar,\n  DateView: DateView,\n  Native: Native,\n  CalendarWithTime: CalendarWithTime,\n  List: List\n};\nclass DateBox extends DropDownEditor {\n  _supportedKeys() {\n    return _extends({}, super._supportedKeys(), this._strategy.supportedKeys());\n  }\n  _renderButtonContainers() {\n    super._renderButtonContainers.apply(this, arguments);\n    this._strategy.customizeButtons();\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      type: \"date\",\n      showAnalogClock: true,\n      value: null,\n      displayFormat: null,\n      interval: 30,\n      disabledDates: null,\n      pickerType: PICKER_TYPE.calendar,\n      invalidDateMessage: messageLocalization.format(\"dxDateBox-validation-datetime\"),\n      dateOutOfRangeMessage: messageLocalization.format(\"validation-range\"),\n      applyButtonText: messageLocalization.format(\"OK\"),\n      adaptivityEnabled: false,\n      calendarOptions: {},\n      useHiddenSubmitElement: true,\n      _showValidationIcon: true\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        \"dropDownOptions.showTitle\": true\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        buttonsLocation: \"bottom after\"\n      }\n    }, {\n      device() {\n        const realDevice = devices.real();\n        const {\n          platform: platform\n        } = realDevice;\n        return \"ios\" === platform || \"android\" === platform;\n      },\n      options: {\n        pickerType: PICKER_TYPE.native\n      }\n    }, {\n      device: {\n        platform: \"generic\",\n        deviceType: \"desktop\"\n      },\n      options: {\n        buttonsLocation: \"bottom after\"\n      }\n    }]);\n  }\n  _initOptions(options) {\n    this._userOptions = extend({}, options);\n    super._initOptions(options);\n    this._updatePickerOptions();\n  }\n  _updatePickerOptions() {\n    let {\n      pickerType: pickerType\n    } = this.option();\n    const {\n      type: type\n    } = this.option();\n    if (pickerType === PICKER_TYPE.list && (type === TYPE.datetime || type === TYPE.date)) {\n      pickerType = PICKER_TYPE.calendar;\n    }\n    if (type === TYPE.time && pickerType === PICKER_TYPE.calendar) {\n      pickerType = PICKER_TYPE.list;\n    }\n    this._pickerType = pickerType;\n    this._setShowDropDownButtonOption();\n  }\n  _setShowDropDownButtonOption() {\n    const {\n      platform: platform\n    } = devices.real();\n    const isMozillaOnAndroid = \"android\" === platform && browser.mozilla;\n    const isNativePickerType = this._isNativeType();\n    let showDropDownButton = \"generic\" !== platform || !isNativePickerType;\n    if (isNativePickerType && isMozillaOnAndroid) {\n      showDropDownButton = false;\n    }\n    this.option({\n      showDropDownButton: showDropDownButton\n    });\n  }\n  _init() {\n    this._initStrategy();\n    this.option(extend({}, this._strategy.getDefaultOptions(), this._userOptions));\n    delete this._userOptions;\n    super._init();\n  }\n  _toLowerCaseFirstLetter(string) {\n    return string.charAt(0).toLowerCase() + string.substr(1);\n  }\n  _initStrategy() {\n    const strategyName = this._getStrategyName(this._getFormatType());\n    const strategy = STRATEGY_CLASSES[strategyName];\n    if (!(this._strategy && this._strategy.NAME === strategyName)) {\n      this._strategy = new strategy(this);\n    }\n  }\n  _getFormatType() {\n    const currentType = this.option(\"type\");\n    const isTime = /h|m|s/g.test(currentType);\n    const isDate = /d|M|Y/g.test(currentType);\n    let type = \"\";\n    if (isDate) {\n      type += TYPE.date;\n    }\n    if (isTime) {\n      type += TYPE.time;\n    }\n    return type;\n  }\n  _getStrategyName(type) {\n    const pickerType = this._pickerType;\n    if (pickerType === PICKER_TYPE.rollers) {\n      return STRATEGY_NAME.dateView;\n    }\n    if (pickerType === PICKER_TYPE.native) {\n      return STRATEGY_NAME.native;\n    }\n    if (type === TYPE.date) {\n      return STRATEGY_NAME.calendar;\n    }\n    if (type === TYPE.datetime) {\n      return STRATEGY_NAME.calendarWithTime;\n    }\n    return STRATEGY_NAME.list;\n  }\n  _initMarkup() {\n    this.$element().addClass(\"dx-datebox\");\n    super._initMarkup();\n    this._refreshFormatClass();\n    this._refreshPickerTypeClass();\n    this._strategy.renderInputMinMax(this._input());\n  }\n  _render() {\n    super._render();\n    this._formatValidationIcon();\n  }\n  _renderDimensions() {\n    super._renderDimensions();\n    this.$element().toggleClass(\"dx-auto-width\", !this.option(\"width\"));\n    this._updatePopupWidth();\n    this._updatePopupHeight();\n  }\n  _dimensionChanged() {\n    super._dimensionChanged();\n    this._updatePopupHeight();\n  }\n  _updatePopupHeight() {\n    if (this._popup) {\n      var _this$_strategy$_upda, _this$_strategy;\n      null === (_this$_strategy$_upda = (_this$_strategy = this._strategy)._updatePopupHeight) || void 0 === _this$_strategy$_upda || _this$_strategy$_upda.call(_this$_strategy);\n    }\n  }\n  _refreshFormatClass() {\n    const $element = this.$element();\n    each(TYPE, (_, item) => {\n      $element.removeClass(`dx-datebox-${item}`);\n    });\n    const {\n      type: type\n    } = this.option();\n    $element.addClass(`dx-datebox-${type}`);\n  }\n  _refreshPickerTypeClass() {\n    const $element = this.$element();\n    each(PICKER_TYPE, (_, item) => {\n      $element.removeClass(`dx-datebox-${item}`);\n    });\n    $element.addClass(`dx-datebox-${this._pickerType}`);\n  }\n  _formatValidationIcon() {\n    if (!hasWindow()) {\n      return;\n    }\n    const inputElement = this._input().get(0);\n    const isRtlEnabled = this.option(\"rtlEnabled\");\n    const clearButtonWidth = this._getClearButtonWidth();\n    const longestElementDimensions = this._getLongestElementDimensions();\n    const curWidth = parseFloat(window.getComputedStyle(inputElement).width) - clearButtonWidth;\n    const shouldHideValidationIcon = longestElementDimensions.width > curWidth;\n    const {\n      style: style\n    } = inputElement;\n    const {\n      _showValidationIcon: showValidationIcon\n    } = this.option();\n    this.$element().toggleClass(DX_INVALID_BADGE_CLASS, !shouldHideValidationIcon && showValidationIcon);\n    if (shouldHideValidationIcon) {\n      if (void 0 === this._storedPadding) {\n        this._storedPadding = isRtlEnabled ? longestElementDimensions.leftPadding : longestElementDimensions.rightPadding;\n      }\n      isRtlEnabled ? style.paddingLeft = 0 : style.paddingRight = 0;\n    } else {\n      isRtlEnabled ? style.paddingLeft = `${this._storedPadding}px` : style.paddingRight = `${this._storedPadding}px`;\n    }\n  }\n  _getClearButtonWidth() {\n    let clearButtonWidth = 0;\n    if (this._isClearButtonVisible() && \"\" === this._input().val()) {\n      const clearButtonElement = this.$element().find(`.${DX_CLEAR_BUTTON_CLASS}`).get(0);\n      clearButtonWidth = parseFloat(window.getComputedStyle(clearButtonElement).width);\n    }\n    return clearButtonWidth;\n  }\n  _getLongestElementDimensions() {\n    const format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n    const longestValue = dateLocalization.format(uiDateUtils.getLongestDate(format, dateLocalization.getMonthNames(), dateLocalization.getDayNames()), format);\n    const $input = this._input();\n    const inputElement = $input.get(0);\n    const $longestValueElement = createTextElementHiddenCopy($input, longestValue);\n    const isPaddingStored = void 0 !== this._storedPadding;\n    const storedPadding = !isPaddingStored ? 0 : this._storedPadding;\n    $longestValueElement.appendTo(this.$element());\n    const elementWidth = parseFloat(window.getComputedStyle($longestValueElement.get(0)).width);\n    const rightPadding = parseFloat(window.getComputedStyle(inputElement).paddingRight);\n    const leftPadding = parseFloat(window.getComputedStyle(inputElement).paddingLeft);\n    const necessaryWidth = elementWidth + leftPadding + rightPadding + storedPadding;\n    $longestValueElement.remove();\n    return {\n      width: necessaryWidth,\n      leftPadding: leftPadding,\n      rightPadding: rightPadding\n    };\n  }\n  _getKeyboardListeners() {\n    var _this$_strategy2;\n    return super._getKeyboardListeners().concat([null === (_this$_strategy2 = this._strategy) || void 0 === _this$_strategy2 ? void 0 : _this$_strategy2.getKeyboardListener()]);\n  }\n  _renderPopup() {\n    var _this$_popup;\n    super._renderPopup();\n    null === (_this$_popup = this._popup) || void 0 === _this$_popup || _this$_popup.$wrapper().addClass(\"dx-datebox-wrapper\");\n    this._renderPopupWrapper();\n  }\n  _getPopupToolbarItems() {\n    var _this$_strategy$_getP, _this$_strategy3;\n    const defaultItems = super._getPopupToolbarItems();\n    return (null === (_this$_strategy$_getP = (_this$_strategy3 = this._strategy)._getPopupToolbarItems) || void 0 === _this$_strategy$_getP ? void 0 : _this$_strategy$_getP.call(_this$_strategy3, defaultItems)) ?? defaultItems;\n  }\n  _popupConfig() {\n    const popupConfig = super._popupConfig();\n    return _extends({}, this._strategy.popupConfig(popupConfig), {\n      title: this._getPopupTitle(),\n      dragEnabled: false\n    });\n  }\n  _renderPopupWrapper() {\n    if (!this._popup) {\n      return;\n    }\n    const $element = this.$element();\n    const classPostfixes = extend({}, TYPE, PICKER_TYPE);\n    each(classPostfixes, (_, item) => {\n      $element.removeClass(`dx-datebox-wrapper-${item}`);\n    });\n    const {\n      type: type\n    } = this.option();\n    this._popup.$wrapper().addClass(`dx-datebox-wrapper-${type}`).addClass(`dx-datebox-wrapper-${this._pickerType}`).addClass(\"dx-dropdowneditor-overlay\");\n  }\n  _renderPopupContent() {\n    super._renderPopupContent();\n    this._strategy.renderPopupContent();\n  }\n  _popupShowingHandler() {\n    super._popupShowingHandler();\n    this._strategy.popupShowingHandler();\n  }\n  _popupShownHandler() {\n    super._popupShownHandler();\n    this._strategy.renderOpenedState();\n  }\n  _popupHiddenHandler() {\n    super._popupHiddenHandler();\n    this._strategy.renderOpenedState();\n    this._strategy.popupHiddenHandler();\n  }\n  _visibilityChanged(visible) {\n    if (visible) {\n      this._formatValidationIcon();\n    }\n  }\n  _clearValueHandler(e) {\n    this.option(\"text\", \"\");\n    super._clearValueHandler(e);\n  }\n  _readOnlyPropValue() {\n    if (this._pickerType === PICKER_TYPE.rollers) {\n      return true;\n    }\n    const {\n      platform: platform\n    } = devices.real();\n    const isCustomValueDisabled = this._isNativeType() && (\"ios\" === platform || \"android\" === platform);\n    if (isCustomValueDisabled) {\n      const {\n        readOnly: readOnly\n      } = this.option();\n      return readOnly;\n    }\n    return super._readOnlyPropValue();\n  }\n  _isClearButtonVisible() {\n    return super._isClearButtonVisible() && !this._isNativeType();\n  }\n  _renderValue() {\n    const value = this.dateOption(\"value\");\n    this.option(\"text\", this._getDisplayedText(value));\n    this._strategy.renderValue();\n    return super._renderValue();\n  }\n  _setSubmitValue() {\n    const value = this.dateOption(\"value\");\n    const {\n      type: type,\n      dateSerializationFormat: dateSerializationFormat\n    } = this.option();\n    const submitFormat = uiDateUtils.SUBMIT_FORMATS_MAP[type];\n    const submitValue = dateSerializationFormat ? dateSerialization.serializeDate(value, dateSerializationFormat) : uiDateUtils.toStandardDateFormat(value, submitFormat);\n    this._getSubmitElement().val(submitValue);\n  }\n  _getDisplayedText(value) {\n    const {\n      mode: mode\n    } = this.option();\n    let displayedText;\n    if (\"text\" === mode) {\n      const displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n      displayedText = dateLocalization.format(value, displayFormat);\n    } else {\n      const format = this._getFormatByMode(mode);\n      if (format) {\n        displayedText = dateLocalization.format(value, format);\n      } else {\n        displayedText = uiDateUtils.toStandardDateFormat(value, mode);\n      }\n    }\n    return displayedText;\n  }\n  _getFormatByMode(mode) {\n    return inputType(mode) ? null : uiDateUtils.FORMATS_MAP[mode];\n  }\n  _valueChangeEventHandler(e) {\n    const {\n      text: text,\n      type: type,\n      validationError: validationError\n    } = this.option();\n    const currentValue = this.dateOption(\"value\");\n    if (text === this._getDisplayedText(currentValue)) {\n      this._recallInternalValidation(currentValue, validationError);\n      return;\n    }\n    const parsedDate = this._getParsedDate(text);\n    const value = currentValue ?? this._getDateByDefault();\n    const newValue = uiDateUtils.mergeDates(value, parsedDate, type);\n    const date = parsedDate && \"time\" === type ? newValue : parsedDate;\n    if (this._applyInternalValidation(date).isValid) {\n      const displayedText = this._getDisplayedText(newValue);\n      if (value && newValue && value.getTime() === newValue.getTime() && displayedText !== text) {\n        this._renderValue();\n      } else {\n        this.dateValue(newValue, e);\n      }\n    }\n  }\n  _recallInternalValidation(value, validationError) {\n    if (!validationError || validationError.editorSpecific) {\n      this._applyInternalValidation(value);\n      this._applyCustomValidation(value);\n    }\n  }\n  _getDateByDefault() {\n    return this._strategy.useCurrentDateByDefault() && this._strategy.getDefaultDate();\n  }\n  _getParsedDate(text) {\n    const displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n    const parsedText = this._strategy.getParsedText(text, displayFormat);\n    return parsedText ?? void 0;\n  }\n  _applyInternalValidation(value) {\n    const text = this.option(\"text\");\n    const hasText = !!text && null !== value;\n    const isDate = !!value && isDateType(value) && !isNaN(value.getTime());\n    const isDateInRange = isDate && dateUtils.dateInRange(value, this.dateOption(\"min\"), this.dateOption(\"max\"), this.option(\"type\"));\n    const isValid = !hasText && !value || isDateInRange;\n    let validationMessage = \"\";\n    const {\n      invalidDateMessage: invalidDateMessage,\n      dateOutOfRangeMessage: dateOutOfRangeMessage\n    } = this.option();\n    if (!isDate) {\n      validationMessage = invalidDateMessage;\n    } else if (!isDateInRange) {\n      validationMessage = dateOutOfRangeMessage;\n    }\n    this._updateInternalValidationState(isValid, validationMessage);\n    return {\n      isValid: isValid,\n      isDate: isDate\n    };\n  }\n  _updateInternalValidationState(isValid, validationMessage) {\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: validationMessage\n      }\n    });\n  }\n  _applyCustomValidation(value) {\n    this.validationRequest.fire({\n      editor: this,\n      value: this._serializeDate(value)\n    });\n  }\n  _isValueChanged(newValue) {\n    const oldValue = this.dateOption(\"value\");\n    const oldTime = oldValue && oldValue.getTime();\n    const newTime = newValue && newValue.getTime();\n    return oldTime !== newTime;\n  }\n  _isTextChanged(newValue) {\n    const oldText = this.option(\"text\");\n    const newText = newValue && this._getDisplayedText(newValue) || \"\";\n    return oldText !== newText;\n  }\n  _renderProps() {\n    super._renderProps();\n    this._input().attr(\"autocomplete\", \"off\");\n  }\n  _renderOpenedState() {\n    if (!this._isNativeType()) {\n      super._renderOpenedState();\n    }\n    if (this._strategy.isAdaptivityChanged()) {\n      this._refreshStrategy();\n    }\n  }\n  _getPopupTitle() {\n    const {\n      placeholder: placeholder\n    } = this.option();\n    if (placeholder) {\n      return placeholder;\n    }\n    const {\n      type: type\n    } = this.option();\n    if (type === TYPE.time) {\n      return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleTime\");\n    }\n    if (type === TYPE.date || type === TYPE.datetime) {\n      return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleDate\");\n    }\n    return \"\";\n  }\n  _refreshStrategy() {\n    this._strategy.dispose();\n    this._initStrategy();\n    this.option(this._strategy.getDefaultOptions());\n    this._refresh();\n  }\n  _applyButtonHandler(e) {\n    const value = this._strategy.getValue();\n    this.dateValue(value, e.event);\n    super._applyButtonHandler();\n  }\n  _dispose() {\n    var _this$_strategy4;\n    super._dispose();\n    null === (_this$_strategy4 = this._strategy) || void 0 === _this$_strategy4 || _this$_strategy4.dispose();\n  }\n  _isNativeType() {\n    return this._pickerType === PICKER_TYPE.native;\n  }\n  _updatePopupTitle() {\n    var _this$_popup2;\n    null === (_this$_popup2 = this._popup) || void 0 === _this$_popup2 || _this$_popup2.option(\"title\", this._getPopupTitle());\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"showClearButton\":\n      case \"buttons\":\n      case \"isValid\":\n      case \"readOnly\":\n        super._optionChanged.apply(this, arguments);\n        this._formatValidationIcon();\n        break;\n      case \"pickerType\":\n        this._updatePickerOptions();\n        this._refreshStrategy();\n        this._refreshPickerTypeClass();\n        this._invalidate();\n        break;\n      case \"type\":\n        this._updatePickerOptions();\n        this._refreshStrategy();\n        this._refreshFormatClass();\n        this._renderPopupWrapper();\n        this._formatValidationIcon();\n        this._updateValue();\n        break;\n      case \"placeholder\":\n        super._optionChanged.apply(this, arguments);\n        this._updatePopupTitle();\n        break;\n      case \"min\":\n      case \"max\":\n        {\n          const isValid = this.option(\"isValid\");\n          this._applyInternalValidation(this.dateOption(\"value\"));\n          if (!isValid) {\n            this._applyCustomValidation(this.dateOption(\"value\"));\n          }\n          this._invalidate();\n          break;\n        }\n      case \"dateSerializationFormat\":\n      case \"interval\":\n      case \"disabledDates\":\n      case \"calendarOptions\":\n        this._invalidate();\n        break;\n      case \"displayFormat\":\n        this.option(\"text\", this._getDisplayedText(this.dateOption(\"value\")));\n        this._renderInputValue();\n        break;\n      case \"text\":\n        this._strategy.textChangedHandler(args.value);\n        super._optionChanged.apply(this, arguments);\n        break;\n      case \"showDropDownButton\":\n        this._formatValidationIcon();\n        super._optionChanged.apply(this, arguments);\n        break;\n      case \"todayButtonText\":\n        this._setPopupOption(\"toolbarItems\", this._getPopupToolbarItems());\n        break;\n      case \"invalidDateMessage\":\n      case \"dateOutOfRangeMessage\":\n      case \"adaptivityEnabled\":\n      case \"showAnalogClock\":\n      case \"_showValidationIcon\":\n        break;\n      default:\n        super._optionChanged.apply(this, arguments);\n    }\n  }\n  _getSerializationFormat() {\n    const value = this.option(\"value\");\n    if (this.option(\"dateSerializationFormat\") && config().forceIsoDateParsing) {\n      return this.option(\"dateSerializationFormat\");\n    }\n    if (isNumeric(value)) {\n      return \"number\";\n    }\n    if (!isString(value)) {\n      return;\n    }\n    return dateSerialization.getDateSerializationFormat(value);\n  }\n  _updateValue(value) {\n    super._updateValue();\n    this._applyInternalValidation(value ?? this.dateOption(\"value\"));\n  }\n  dateValue(value, dxEvent) {\n    const isValueChanged = this._isValueChanged(value);\n    if (isValueChanged && dxEvent) {\n      this._saveValueChangeEvent(dxEvent);\n    }\n    if (!isValueChanged) {\n      const {\n        text: text\n      } = this.option();\n      if (this._isTextChanged(value)) {\n        this._updateValue(value);\n      } else if (\"\" === text) {\n        this._applyCustomValidation(value);\n      }\n    }\n    return this.dateOption(\"value\", value);\n  }\n  dateOption(optionName, value) {\n    if (1 === arguments.length) {\n      return dateSerialization.deserializeDate(this.option(optionName));\n    }\n    this.option(optionName, this._serializeDate(value));\n  }\n  _serializeDate(date) {\n    const serializationFormat = this._getSerializationFormat();\n    return dateSerialization.serializeDate(date, serializationFormat);\n  }\n  _clearValue() {\n    const value = this.option(\"value\");\n    super._clearValue();\n    if (null === value) {\n      this._applyCustomValidation(null);\n    }\n  }\n  clear() {\n    const value = this.option(\"value\");\n    super.clear();\n    if (null === value) {\n      this._applyInternalValidation(null);\n    }\n  }\n}\nexport default DateBox;","map":{"version":3,"names":["_extends","dateLocalization","messageLocalization","config","devices","browser","dateUtils","dateSerialization","createTextElementHiddenCopy","extend","each","inputType","isDate","isDateType","isNumeric","isString","getWindow","hasWindow","DropDownEditor","Calendar","CalendarWithTime","DateView","List","Native","uiDateUtils","window","DATEBOX_CLASS","DX_AUTO_WIDTH_CLASS","DX_INVALID_BADGE_CLASS","DX_CLEAR_BUTTON_CLASS","DATEBOX_WRAPPER_CLASS","DROPDOWNEDITOR_OVERLAY_CLASS","PICKER_TYPE","calendar","rollers","list","native","TYPE","date","datetime","time","STRATEGY_NAME","dateView","calendarWithTime","STRATEGY_CLASSES","DateBox","_supportedKeys","_strategy","supportedKeys","_renderButtonContainers","apply","arguments","customizeButtons","_getDefaultOptions","type","showAnalogClock","value","displayFormat","interval","disabledDates","pickerType","invalidDateMessage","format","dateOutOfRangeMessage","applyButtonText","adaptivityEnabled","calendarOptions","useHiddenSubmitElement","_showValidationIcon","_defaultOptionsRules","concat","device","platform","options","buttonsLocation","realDevice","real","deviceType","_initOptions","_userOptions","_updatePickerOptions","option","_pickerType","_setShowDropDownButtonOption","isMozillaOnAndroid","mozilla","isNativePickerType","_isNativeType","showDropDownButton","_init","_initStrategy","getDefaultOptions","_toLowerCaseFirstLetter","string","charAt","toLowerCase","substr","strategyName","_getStrategyName","_getFormatType","strategy","NAME","currentType","isTime","test","_initMarkup","$element","addClass","_refreshFormatClass","_refreshPickerTypeClass","renderInputMinMax","_input","_render","_formatValidationIcon","_renderDimensions","toggleClass","_updatePopupWidth","_updatePopupHeight","_dimensionChanged","_popup","_this$_strategy$_upda","_this$_strategy","call","_","item","removeClass","inputElement","get","isRtlEnabled","clearButtonWidth","_getClearButtonWidth","longestElementDimensions","_getLongestElementDimensions","curWidth","parseFloat","getComputedStyle","width","shouldHideValidationIcon","style","showValidationIcon","_storedPadding","leftPadding","rightPadding","paddingLeft","paddingRight","_isClearButtonVisible","val","clearButtonElement","find","getDisplayFormat","longestValue","getLongestDate","getMonthNames","getDayNames","$input","$longestValueElement","isPaddingStored","storedPadding","appendTo","elementWidth","necessaryWidth","remove","_getKeyboardListeners","_this$_strategy2","getKeyboardListener","_renderPopup","_this$_popup","$wrapper","_renderPopupWrapper","_getPopupToolbarItems","_this$_strategy$_getP","_this$_strategy3","defaultItems","_popupConfig","popupConfig","title","_getPopupTitle","dragEnabled","classPostfixes","_renderPopupContent","renderPopupContent","_popupShowingHandler","popupShowingHandler","_popupShownHandler","renderOpenedState","_popupHiddenHandler","popupHiddenHandler","_visibilityChanged","visible","_clearValueHandler","e","_readOnlyPropValue","isCustomValueDisabled","readOnly","_renderValue","dateOption","_getDisplayedText","renderValue","_setSubmitValue","dateSerializationFormat","submitFormat","SUBMIT_FORMATS_MAP","submitValue","serializeDate","toStandardDateFormat","_getSubmitElement","mode","displayedText","_getFormatByMode","FORMATS_MAP","_valueChangeEventHandler","text","validationError","currentValue","_recallInternalValidation","parsedDate","_getParsedDate","_getDateByDefault","newValue","mergeDates","_applyInternalValidation","isValid","getTime","dateValue","editorSpecific","_applyCustomValidation","useCurrentDateByDefault","getDefaultDate","parsedText","getParsedText","hasText","isNaN","isDateInRange","dateInRange","validationMessage","_updateInternalValidationState","message","validationRequest","fire","editor","_serializeDate","_isValueChanged","oldValue","oldTime","newTime","_isTextChanged","oldText","newText","_renderProps","attr","_renderOpenedState","isAdaptivityChanged","_refreshStrategy","placeholder","dispose","_refresh","_applyButtonHandler","getValue","event","_dispose","_this$_strategy4","_updatePopupTitle","_this$_popup2","_optionChanged","args","name","_invalidate","_updateValue","_renderInputValue","textChangedHandler","_setPopupOption","_getSerializationFormat","forceIsoDateParsing","getDateSerializationFormat","dxEvent","isValueChanged","_saveValueChangeEvent","optionName","length","deserializeDate","serializationFormat","_clearValue","clear"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/date_box/m_date_box.base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport dateLocalization from \"../../../common/core/localization/date\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport config from \"../../../core/config\";\r\nimport devices from \"../../../core/devices\";\r\nimport browser from \"../../../core/utils/browser\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport dateSerialization from \"../../../core/utils/date_serialization\";\r\nimport {\r\n    createTextElementHiddenCopy\r\n} from \"../../../core/utils/dom\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    inputType\r\n} from \"../../../core/utils/support\";\r\nimport {\r\n    isDate as isDateType,\r\n    isNumeric,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport DropDownEditor from \"../../ui/drop_down_editor/m_drop_down_editor\";\r\nimport Calendar from \"./m_date_box.strategy.calendar\";\r\nimport CalendarWithTime from \"./m_date_box.strategy.calendar_with_time\";\r\nimport DateView from \"./m_date_box.strategy.date_view\";\r\nimport List from \"./m_date_box.strategy.list\";\r\nimport Native from \"./m_date_box.strategy.native\";\r\nimport uiDateUtils from \"./m_date_utils\";\r\nconst window = getWindow();\r\nconst DATEBOX_CLASS = \"dx-datebox\";\r\nconst DX_AUTO_WIDTH_CLASS = \"dx-auto-width\";\r\nconst DX_INVALID_BADGE_CLASS = \"dx-show-invalid-badge\";\r\nconst DX_CLEAR_BUTTON_CLASS = \"dx-clear-button-area\";\r\nconst DATEBOX_WRAPPER_CLASS = \"dx-datebox-wrapper\";\r\nconst DROPDOWNEDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nconst PICKER_TYPE = {\r\n    calendar: \"calendar\",\r\n    rollers: \"rollers\",\r\n    list: \"list\",\r\n    native: \"native\"\r\n};\r\nconst TYPE = {\r\n    date: \"date\",\r\n    datetime: \"datetime\",\r\n    time: \"time\"\r\n};\r\nconst STRATEGY_NAME = {\r\n    calendar: \"Calendar\",\r\n    dateView: \"DateView\",\r\n    native: \"Native\",\r\n    calendarWithTime: \"CalendarWithTime\",\r\n    list: \"List\"\r\n};\r\nconst STRATEGY_CLASSES = {\r\n    Calendar: Calendar,\r\n    DateView: DateView,\r\n    Native: Native,\r\n    CalendarWithTime: CalendarWithTime,\r\n    List: List\r\n};\r\nclass DateBox extends DropDownEditor {\r\n    _supportedKeys() {\r\n        return _extends({}, super._supportedKeys(), this._strategy.supportedKeys())\r\n    }\r\n    _renderButtonContainers() {\r\n        super._renderButtonContainers.apply(this, arguments);\r\n        this._strategy.customizeButtons()\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            type: \"date\",\r\n            showAnalogClock: true,\r\n            value: null,\r\n            displayFormat: null,\r\n            interval: 30,\r\n            disabledDates: null,\r\n            pickerType: PICKER_TYPE.calendar,\r\n            invalidDateMessage: messageLocalization.format(\"dxDateBox-validation-datetime\"),\r\n            dateOutOfRangeMessage: messageLocalization.format(\"validation-range\"),\r\n            applyButtonText: messageLocalization.format(\"OK\"),\r\n            adaptivityEnabled: false,\r\n            calendarOptions: {},\r\n            useHiddenSubmitElement: true,\r\n            _showValidationIcon: true\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: {\r\n                platform: \"ios\"\r\n            },\r\n            options: {\r\n                \"dropDownOptions.showTitle\": true\r\n            }\r\n        }, {\r\n            device: {\r\n                platform: \"android\"\r\n            },\r\n            options: {\r\n                buttonsLocation: \"bottom after\"\r\n            }\r\n        }, {\r\n            device() {\r\n                const realDevice = devices.real();\r\n                const {\r\n                    platform: platform\r\n                } = realDevice;\r\n                return \"ios\" === platform || \"android\" === platform\r\n            },\r\n            options: {\r\n                pickerType: PICKER_TYPE.native\r\n            }\r\n        }, {\r\n            device: {\r\n                platform: \"generic\",\r\n                deviceType: \"desktop\"\r\n            },\r\n            options: {\r\n                buttonsLocation: \"bottom after\"\r\n            }\r\n        }])\r\n    }\r\n    _initOptions(options) {\r\n        this._userOptions = extend({}, options);\r\n        super._initOptions(options);\r\n        this._updatePickerOptions()\r\n    }\r\n    _updatePickerOptions() {\r\n        let {\r\n            pickerType: pickerType\r\n        } = this.option();\r\n        const {\r\n            type: type\r\n        } = this.option();\r\n        if (pickerType === PICKER_TYPE.list && (type === TYPE.datetime || type === TYPE.date)) {\r\n            pickerType = PICKER_TYPE.calendar\r\n        }\r\n        if (type === TYPE.time && pickerType === PICKER_TYPE.calendar) {\r\n            pickerType = PICKER_TYPE.list\r\n        }\r\n        this._pickerType = pickerType;\r\n        this._setShowDropDownButtonOption()\r\n    }\r\n    _setShowDropDownButtonOption() {\r\n        const {\r\n            platform: platform\r\n        } = devices.real();\r\n        const isMozillaOnAndroid = \"android\" === platform && browser.mozilla;\r\n        const isNativePickerType = this._isNativeType();\r\n        let showDropDownButton = \"generic\" !== platform || !isNativePickerType;\r\n        if (isNativePickerType && isMozillaOnAndroid) {\r\n            showDropDownButton = false\r\n        }\r\n        this.option({\r\n            showDropDownButton: showDropDownButton\r\n        })\r\n    }\r\n    _init() {\r\n        this._initStrategy();\r\n        this.option(extend({}, this._strategy.getDefaultOptions(), this._userOptions));\r\n        delete this._userOptions;\r\n        super._init()\r\n    }\r\n    _toLowerCaseFirstLetter(string) {\r\n        return string.charAt(0).toLowerCase() + string.substr(1)\r\n    }\r\n    _initStrategy() {\r\n        const strategyName = this._getStrategyName(this._getFormatType());\r\n        const strategy = STRATEGY_CLASSES[strategyName];\r\n        if (!(this._strategy && this._strategy.NAME === strategyName)) {\r\n            this._strategy = new strategy(this)\r\n        }\r\n    }\r\n    _getFormatType() {\r\n        const currentType = this.option(\"type\");\r\n        const isTime = /h|m|s/g.test(currentType);\r\n        const isDate = /d|M|Y/g.test(currentType);\r\n        let type = \"\";\r\n        if (isDate) {\r\n            type += TYPE.date\r\n        }\r\n        if (isTime) {\r\n            type += TYPE.time\r\n        }\r\n        return type\r\n    }\r\n    _getStrategyName(type) {\r\n        const pickerType = this._pickerType;\r\n        if (pickerType === PICKER_TYPE.rollers) {\r\n            return STRATEGY_NAME.dateView\r\n        }\r\n        if (pickerType === PICKER_TYPE.native) {\r\n            return STRATEGY_NAME.native\r\n        }\r\n        if (type === TYPE.date) {\r\n            return STRATEGY_NAME.calendar\r\n        }\r\n        if (type === TYPE.datetime) {\r\n            return STRATEGY_NAME.calendarWithTime\r\n        }\r\n        return STRATEGY_NAME.list\r\n    }\r\n    _initMarkup() {\r\n        this.$element().addClass(\"dx-datebox\");\r\n        super._initMarkup();\r\n        this._refreshFormatClass();\r\n        this._refreshPickerTypeClass();\r\n        this._strategy.renderInputMinMax(this._input())\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._formatValidationIcon()\r\n    }\r\n    _renderDimensions() {\r\n        super._renderDimensions();\r\n        this.$element().toggleClass(\"dx-auto-width\", !this.option(\"width\"));\r\n        this._updatePopupWidth();\r\n        this._updatePopupHeight()\r\n    }\r\n    _dimensionChanged() {\r\n        super._dimensionChanged();\r\n        this._updatePopupHeight()\r\n    }\r\n    _updatePopupHeight() {\r\n        if (this._popup) {\r\n            var _this$_strategy$_upda, _this$_strategy;\r\n            null === (_this$_strategy$_upda = (_this$_strategy = this._strategy)._updatePopupHeight) || void 0 === _this$_strategy$_upda || _this$_strategy$_upda.call(_this$_strategy)\r\n        }\r\n    }\r\n    _refreshFormatClass() {\r\n        const $element = this.$element();\r\n        each(TYPE, ((_, item) => {\r\n            $element.removeClass(`dx-datebox-${item}`)\r\n        }));\r\n        const {\r\n            type: type\r\n        } = this.option();\r\n        $element.addClass(`dx-datebox-${type}`)\r\n    }\r\n    _refreshPickerTypeClass() {\r\n        const $element = this.$element();\r\n        each(PICKER_TYPE, ((_, item) => {\r\n            $element.removeClass(`dx-datebox-${item}`)\r\n        }));\r\n        $element.addClass(`dx-datebox-${this._pickerType}`)\r\n    }\r\n    _formatValidationIcon() {\r\n        if (!hasWindow()) {\r\n            return\r\n        }\r\n        const inputElement = this._input().get(0);\r\n        const isRtlEnabled = this.option(\"rtlEnabled\");\r\n        const clearButtonWidth = this._getClearButtonWidth();\r\n        const longestElementDimensions = this._getLongestElementDimensions();\r\n        const curWidth = parseFloat(window.getComputedStyle(inputElement).width) - clearButtonWidth;\r\n        const shouldHideValidationIcon = longestElementDimensions.width > curWidth;\r\n        const {\r\n            style: style\r\n        } = inputElement;\r\n        const {\r\n            _showValidationIcon: showValidationIcon\r\n        } = this.option();\r\n        this.$element().toggleClass(DX_INVALID_BADGE_CLASS, !shouldHideValidationIcon && showValidationIcon);\r\n        if (shouldHideValidationIcon) {\r\n            if (void 0 === this._storedPadding) {\r\n                this._storedPadding = isRtlEnabled ? longestElementDimensions.leftPadding : longestElementDimensions.rightPadding\r\n            }\r\n            isRtlEnabled ? style.paddingLeft = 0 : style.paddingRight = 0\r\n        } else {\r\n            isRtlEnabled ? style.paddingLeft = `${this._storedPadding}px` : style.paddingRight = `${this._storedPadding}px`\r\n        }\r\n    }\r\n    _getClearButtonWidth() {\r\n        let clearButtonWidth = 0;\r\n        if (this._isClearButtonVisible() && \"\" === this._input().val()) {\r\n            const clearButtonElement = this.$element().find(`.${DX_CLEAR_BUTTON_CLASS}`).get(0);\r\n            clearButtonWidth = parseFloat(window.getComputedStyle(clearButtonElement).width)\r\n        }\r\n        return clearButtonWidth\r\n    }\r\n    _getLongestElementDimensions() {\r\n        const format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\r\n        const longestValue = dateLocalization.format(uiDateUtils.getLongestDate(format, dateLocalization.getMonthNames(), dateLocalization.getDayNames()), format);\r\n        const $input = this._input();\r\n        const inputElement = $input.get(0);\r\n        const $longestValueElement = createTextElementHiddenCopy($input, longestValue);\r\n        const isPaddingStored = void 0 !== this._storedPadding;\r\n        const storedPadding = !isPaddingStored ? 0 : this._storedPadding;\r\n        $longestValueElement.appendTo(this.$element());\r\n        const elementWidth = parseFloat(window.getComputedStyle($longestValueElement.get(0)).width);\r\n        const rightPadding = parseFloat(window.getComputedStyle(inputElement).paddingRight);\r\n        const leftPadding = parseFloat(window.getComputedStyle(inputElement).paddingLeft);\r\n        const necessaryWidth = elementWidth + leftPadding + rightPadding + storedPadding;\r\n        $longestValueElement.remove();\r\n        return {\r\n            width: necessaryWidth,\r\n            leftPadding: leftPadding,\r\n            rightPadding: rightPadding\r\n        }\r\n    }\r\n    _getKeyboardListeners() {\r\n        var _this$_strategy2;\r\n        return super._getKeyboardListeners().concat([null === (_this$_strategy2 = this._strategy) || void 0 === _this$_strategy2 ? void 0 : _this$_strategy2.getKeyboardListener()])\r\n    }\r\n    _renderPopup() {\r\n        var _this$_popup;\r\n        super._renderPopup();\r\n        null === (_this$_popup = this._popup) || void 0 === _this$_popup || _this$_popup.$wrapper().addClass(\"dx-datebox-wrapper\");\r\n        this._renderPopupWrapper()\r\n    }\r\n    _getPopupToolbarItems() {\r\n        var _this$_strategy$_getP, _this$_strategy3;\r\n        const defaultItems = super._getPopupToolbarItems();\r\n        return (null === (_this$_strategy$_getP = (_this$_strategy3 = this._strategy)._getPopupToolbarItems) || void 0 === _this$_strategy$_getP ? void 0 : _this$_strategy$_getP.call(_this$_strategy3, defaultItems)) ?? defaultItems\r\n    }\r\n    _popupConfig() {\r\n        const popupConfig = super._popupConfig();\r\n        return _extends({}, this._strategy.popupConfig(popupConfig), {\r\n            title: this._getPopupTitle(),\r\n            dragEnabled: false\r\n        })\r\n    }\r\n    _renderPopupWrapper() {\r\n        if (!this._popup) {\r\n            return\r\n        }\r\n        const $element = this.$element();\r\n        const classPostfixes = extend({}, TYPE, PICKER_TYPE);\r\n        each(classPostfixes, ((_, item) => {\r\n            $element.removeClass(`dx-datebox-wrapper-${item}`)\r\n        }));\r\n        const {\r\n            type: type\r\n        } = this.option();\r\n        this._popup.$wrapper().addClass(`dx-datebox-wrapper-${type}`).addClass(`dx-datebox-wrapper-${this._pickerType}`).addClass(\"dx-dropdowneditor-overlay\")\r\n    }\r\n    _renderPopupContent() {\r\n        super._renderPopupContent();\r\n        this._strategy.renderPopupContent()\r\n    }\r\n    _popupShowingHandler() {\r\n        super._popupShowingHandler();\r\n        this._strategy.popupShowingHandler()\r\n    }\r\n    _popupShownHandler() {\r\n        super._popupShownHandler();\r\n        this._strategy.renderOpenedState()\r\n    }\r\n    _popupHiddenHandler() {\r\n        super._popupHiddenHandler();\r\n        this._strategy.renderOpenedState();\r\n        this._strategy.popupHiddenHandler()\r\n    }\r\n    _visibilityChanged(visible) {\r\n        if (visible) {\r\n            this._formatValidationIcon()\r\n        }\r\n    }\r\n    _clearValueHandler(e) {\r\n        this.option(\"text\", \"\");\r\n        super._clearValueHandler(e)\r\n    }\r\n    _readOnlyPropValue() {\r\n        if (this._pickerType === PICKER_TYPE.rollers) {\r\n            return true\r\n        }\r\n        const {\r\n            platform: platform\r\n        } = devices.real();\r\n        const isCustomValueDisabled = this._isNativeType() && (\"ios\" === platform || \"android\" === platform);\r\n        if (isCustomValueDisabled) {\r\n            const {\r\n                readOnly: readOnly\r\n            } = this.option();\r\n            return readOnly\r\n        }\r\n        return super._readOnlyPropValue()\r\n    }\r\n    _isClearButtonVisible() {\r\n        return super._isClearButtonVisible() && !this._isNativeType()\r\n    }\r\n    _renderValue() {\r\n        const value = this.dateOption(\"value\");\r\n        this.option(\"text\", this._getDisplayedText(value));\r\n        this._strategy.renderValue();\r\n        return super._renderValue()\r\n    }\r\n    _setSubmitValue() {\r\n        const value = this.dateOption(\"value\");\r\n        const {\r\n            type: type,\r\n            dateSerializationFormat: dateSerializationFormat\r\n        } = this.option();\r\n        const submitFormat = uiDateUtils.SUBMIT_FORMATS_MAP[type];\r\n        const submitValue = dateSerializationFormat ? dateSerialization.serializeDate(value, dateSerializationFormat) : uiDateUtils.toStandardDateFormat(value, submitFormat);\r\n        this._getSubmitElement().val(submitValue)\r\n    }\r\n    _getDisplayedText(value) {\r\n        const {\r\n            mode: mode\r\n        } = this.option();\r\n        let displayedText;\r\n        if (\"text\" === mode) {\r\n            const displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\r\n            displayedText = dateLocalization.format(value, displayFormat)\r\n        } else {\r\n            const format = this._getFormatByMode(mode);\r\n            if (format) {\r\n                displayedText = dateLocalization.format(value, format)\r\n            } else {\r\n                displayedText = uiDateUtils.toStandardDateFormat(value, mode)\r\n            }\r\n        }\r\n        return displayedText\r\n    }\r\n    _getFormatByMode(mode) {\r\n        return inputType(mode) ? null : uiDateUtils.FORMATS_MAP[mode]\r\n    }\r\n    _valueChangeEventHandler(e) {\r\n        const {\r\n            text: text,\r\n            type: type,\r\n            validationError: validationError\r\n        } = this.option();\r\n        const currentValue = this.dateOption(\"value\");\r\n        if (text === this._getDisplayedText(currentValue)) {\r\n            this._recallInternalValidation(currentValue, validationError);\r\n            return\r\n        }\r\n        const parsedDate = this._getParsedDate(text);\r\n        const value = currentValue ?? this._getDateByDefault();\r\n        const newValue = uiDateUtils.mergeDates(value, parsedDate, type);\r\n        const date = parsedDate && \"time\" === type ? newValue : parsedDate;\r\n        if (this._applyInternalValidation(date).isValid) {\r\n            const displayedText = this._getDisplayedText(newValue);\r\n            if (value && newValue && value.getTime() === newValue.getTime() && displayedText !== text) {\r\n                this._renderValue()\r\n            } else {\r\n                this.dateValue(newValue, e)\r\n            }\r\n        }\r\n    }\r\n    _recallInternalValidation(value, validationError) {\r\n        if (!validationError || validationError.editorSpecific) {\r\n            this._applyInternalValidation(value);\r\n            this._applyCustomValidation(value)\r\n        }\r\n    }\r\n    _getDateByDefault() {\r\n        return this._strategy.useCurrentDateByDefault() && this._strategy.getDefaultDate()\r\n    }\r\n    _getParsedDate(text) {\r\n        const displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\r\n        const parsedText = this._strategy.getParsedText(text, displayFormat);\r\n        return parsedText ?? void 0\r\n    }\r\n    _applyInternalValidation(value) {\r\n        const text = this.option(\"text\");\r\n        const hasText = !!text && null !== value;\r\n        const isDate = !!value && isDateType(value) && !isNaN(value.getTime());\r\n        const isDateInRange = isDate && dateUtils.dateInRange(value, this.dateOption(\"min\"), this.dateOption(\"max\"), this.option(\"type\"));\r\n        const isValid = !hasText && !value || isDateInRange;\r\n        let validationMessage = \"\";\r\n        const {\r\n            invalidDateMessage: invalidDateMessage,\r\n            dateOutOfRangeMessage: dateOutOfRangeMessage\r\n        } = this.option();\r\n        if (!isDate) {\r\n            validationMessage = invalidDateMessage\r\n        } else if (!isDateInRange) {\r\n            validationMessage = dateOutOfRangeMessage\r\n        }\r\n        this._updateInternalValidationState(isValid, validationMessage);\r\n        return {\r\n            isValid: isValid,\r\n            isDate: isDate\r\n        }\r\n    }\r\n    _updateInternalValidationState(isValid, validationMessage) {\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: validationMessage\r\n            }\r\n        })\r\n    }\r\n    _applyCustomValidation(value) {\r\n        this.validationRequest.fire({\r\n            editor: this,\r\n            value: this._serializeDate(value)\r\n        })\r\n    }\r\n    _isValueChanged(newValue) {\r\n        const oldValue = this.dateOption(\"value\");\r\n        const oldTime = oldValue && oldValue.getTime();\r\n        const newTime = newValue && newValue.getTime();\r\n        return oldTime !== newTime\r\n    }\r\n    _isTextChanged(newValue) {\r\n        const oldText = this.option(\"text\");\r\n        const newText = newValue && this._getDisplayedText(newValue) || \"\";\r\n        return oldText !== newText\r\n    }\r\n    _renderProps() {\r\n        super._renderProps();\r\n        this._input().attr(\"autocomplete\", \"off\")\r\n    }\r\n    _renderOpenedState() {\r\n        if (!this._isNativeType()) {\r\n            super._renderOpenedState()\r\n        }\r\n        if (this._strategy.isAdaptivityChanged()) {\r\n            this._refreshStrategy()\r\n        }\r\n    }\r\n    _getPopupTitle() {\r\n        const {\r\n            placeholder: placeholder\r\n        } = this.option();\r\n        if (placeholder) {\r\n            return placeholder\r\n        }\r\n        const {\r\n            type: type\r\n        } = this.option();\r\n        if (type === TYPE.time) {\r\n            return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleTime\")\r\n        }\r\n        if (type === TYPE.date || type === TYPE.datetime) {\r\n            return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleDate\")\r\n        }\r\n        return \"\"\r\n    }\r\n    _refreshStrategy() {\r\n        this._strategy.dispose();\r\n        this._initStrategy();\r\n        this.option(this._strategy.getDefaultOptions());\r\n        this._refresh()\r\n    }\r\n    _applyButtonHandler(e) {\r\n        const value = this._strategy.getValue();\r\n        this.dateValue(value, e.event);\r\n        super._applyButtonHandler()\r\n    }\r\n    _dispose() {\r\n        var _this$_strategy4;\r\n        super._dispose();\r\n        null === (_this$_strategy4 = this._strategy) || void 0 === _this$_strategy4 || _this$_strategy4.dispose()\r\n    }\r\n    _isNativeType() {\r\n        return this._pickerType === PICKER_TYPE.native\r\n    }\r\n    _updatePopupTitle() {\r\n        var _this$_popup2;\r\n        null === (_this$_popup2 = this._popup) || void 0 === _this$_popup2 || _this$_popup2.option(\"title\", this._getPopupTitle())\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"showClearButton\":\r\n            case \"buttons\":\r\n            case \"isValid\":\r\n            case \"readOnly\":\r\n                super._optionChanged.apply(this, arguments);\r\n                this._formatValidationIcon();\r\n                break;\r\n            case \"pickerType\":\r\n                this._updatePickerOptions();\r\n                this._refreshStrategy();\r\n                this._refreshPickerTypeClass();\r\n                this._invalidate();\r\n                break;\r\n            case \"type\":\r\n                this._updatePickerOptions();\r\n                this._refreshStrategy();\r\n                this._refreshFormatClass();\r\n                this._renderPopupWrapper();\r\n                this._formatValidationIcon();\r\n                this._updateValue();\r\n                break;\r\n            case \"placeholder\":\r\n                super._optionChanged.apply(this, arguments);\r\n                this._updatePopupTitle();\r\n                break;\r\n            case \"min\":\r\n            case \"max\": {\r\n                const isValid = this.option(\"isValid\");\r\n                this._applyInternalValidation(this.dateOption(\"value\"));\r\n                if (!isValid) {\r\n                    this._applyCustomValidation(this.dateOption(\"value\"))\r\n                }\r\n                this._invalidate();\r\n                break\r\n            }\r\n            case \"dateSerializationFormat\":\r\n            case \"interval\":\r\n            case \"disabledDates\":\r\n            case \"calendarOptions\":\r\n                this._invalidate();\r\n                break;\r\n            case \"displayFormat\":\r\n                this.option(\"text\", this._getDisplayedText(this.dateOption(\"value\")));\r\n                this._renderInputValue();\r\n                break;\r\n            case \"text\":\r\n                this._strategy.textChangedHandler(args.value);\r\n                super._optionChanged.apply(this, arguments);\r\n                break;\r\n            case \"showDropDownButton\":\r\n                this._formatValidationIcon();\r\n                super._optionChanged.apply(this, arguments);\r\n                break;\r\n            case \"todayButtonText\":\r\n                this._setPopupOption(\"toolbarItems\", this._getPopupToolbarItems());\r\n                break;\r\n            case \"invalidDateMessage\":\r\n            case \"dateOutOfRangeMessage\":\r\n            case \"adaptivityEnabled\":\r\n            case \"showAnalogClock\":\r\n            case \"_showValidationIcon\":\r\n                break;\r\n            default:\r\n                super._optionChanged.apply(this, arguments)\r\n        }\r\n    }\r\n    _getSerializationFormat() {\r\n        const value = this.option(\"value\");\r\n        if (this.option(\"dateSerializationFormat\") && config().forceIsoDateParsing) {\r\n            return this.option(\"dateSerializationFormat\")\r\n        }\r\n        if (isNumeric(value)) {\r\n            return \"number\"\r\n        }\r\n        if (!isString(value)) {\r\n            return\r\n        }\r\n        return dateSerialization.getDateSerializationFormat(value)\r\n    }\r\n    _updateValue(value) {\r\n        super._updateValue();\r\n        this._applyInternalValidation(value ?? this.dateOption(\"value\"))\r\n    }\r\n    dateValue(value, dxEvent) {\r\n        const isValueChanged = this._isValueChanged(value);\r\n        if (isValueChanged && dxEvent) {\r\n            this._saveValueChangeEvent(dxEvent)\r\n        }\r\n        if (!isValueChanged) {\r\n            const {\r\n                text: text\r\n            } = this.option();\r\n            if (this._isTextChanged(value)) {\r\n                this._updateValue(value)\r\n            } else if (\"\" === text) {\r\n                this._applyCustomValidation(value)\r\n            }\r\n        }\r\n        return this.dateOption(\"value\", value)\r\n    }\r\n    dateOption(optionName, value) {\r\n        if (1 === arguments.length) {\r\n            return dateSerialization.deserializeDate(this.option(optionName))\r\n        }\r\n        this.option(optionName, this._serializeDate(value))\r\n    }\r\n    _serializeDate(date) {\r\n        const serializationFormat = this._getSerializationFormat();\r\n        return dateSerialization.serializeDate(date, serializationFormat)\r\n    }\r\n    _clearValue() {\r\n        const value = this.option(\"value\");\r\n        super._clearValue();\r\n        if (null === value) {\r\n            this._applyCustomValidation(null)\r\n        }\r\n    }\r\n    clear() {\r\n        const value = this.option(\"value\");\r\n        super.clear();\r\n        if (null === value) {\r\n            this._applyInternalValidation(null)\r\n        }\r\n    }\r\n}\r\nexport default DateBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}