{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/events/m_pointer.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerEvent from \"../../common/core/events/core/event_registrator\";\nimport MouseStrategy from \"../../common/core/events/pointer/mouse\";\nimport MouseAndTouchStrategy from \"../../common/core/events/pointer/mouse_and_touch\";\nimport TouchStrategy from \"../../common/core/events/pointer/touch\";\nimport GlobalConfig from \"../../core/config\";\nimport { each } from \"../../core/utils/iterator\";\nimport devices from \"../core/m_devices\";\nimport support from \"../core/utils/m_support\";\nconst getStrategy = (support, _ref) => {\n  let {\n    tablet: tablet,\n    phone: phone\n  } = _ref;\n  const pointerEventStrategy = getStrategyFromGlobalConfig();\n  if (pointerEventStrategy) {\n    return pointerEventStrategy;\n  }\n  if (support.touch && !(tablet || phone)) {\n    return MouseAndTouchStrategy;\n  }\n  if (support.touch) {\n    return TouchStrategy;\n  }\n  return MouseStrategy;\n};\nconst EventStrategy = getStrategy(support, devices.real());\neach(EventStrategy.map, (pointerEvent, originalEvents) => {\n  registerEvent(pointerEvent, new EventStrategy(pointerEvent, originalEvents));\n});\nconst pointer = {\n  down: \"dxpointerdown\",\n  up: \"dxpointerup\",\n  move: \"dxpointermove\",\n  cancel: \"dxpointercancel\",\n  enter: \"dxpointerenter\",\n  leave: \"dxpointerleave\",\n  over: \"dxpointerover\",\n  out: \"dxpointerout\"\n};\nfunction getStrategyFromGlobalConfig() {\n  const eventStrategyName = GlobalConfig().pointerEventStrategy;\n  return {\n    \"mouse-and-touch\": MouseAndTouchStrategy,\n    touch: TouchStrategy,\n    mouse: MouseStrategy\n  }[eventStrategyName];\n}\nexport default pointer;","map":{"version":3,"names":["registerEvent","MouseStrategy","MouseAndTouchStrategy","TouchStrategy","GlobalConfig","each","devices","support","getStrategy","_ref","tablet","phone","pointerEventStrategy","getStrategyFromGlobalConfig","touch","EventStrategy","real","map","pointerEvent","originalEvents","pointer","down","up","move","cancel","enter","leave","over","out","eventStrategyName","mouse"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/events/m_pointer.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/events/m_pointer.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport registerEvent from \"../../common/core/events/core/event_registrator\";\r\nimport MouseStrategy from \"../../common/core/events/pointer/mouse\";\r\nimport MouseAndTouchStrategy from \"../../common/core/events/pointer/mouse_and_touch\";\r\nimport TouchStrategy from \"../../common/core/events/pointer/touch\";\r\nimport GlobalConfig from \"../../core/config\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport devices from \"../core/m_devices\";\r\nimport support from \"../core/utils/m_support\";\r\nconst getStrategy = (support, _ref) => {\r\n    let {\r\n        tablet: tablet,\r\n        phone: phone\r\n    } = _ref;\r\n    const pointerEventStrategy = getStrategyFromGlobalConfig();\r\n    if (pointerEventStrategy) {\r\n        return pointerEventStrategy\r\n    }\r\n    if (support.touch && !(tablet || phone)) {\r\n        return MouseAndTouchStrategy\r\n    }\r\n    if (support.touch) {\r\n        return TouchStrategy\r\n    }\r\n    return MouseStrategy\r\n};\r\nconst EventStrategy = getStrategy(support, devices.real());\r\neach(EventStrategy.map, ((pointerEvent, originalEvents) => {\r\n    registerEvent(pointerEvent, new EventStrategy(pointerEvent, originalEvents))\r\n}));\r\nconst pointer = {\r\n    down: \"dxpointerdown\",\r\n    up: \"dxpointerup\",\r\n    move: \"dxpointermove\",\r\n    cancel: \"dxpointercancel\",\r\n    enter: \"dxpointerenter\",\r\n    leave: \"dxpointerleave\",\r\n    over: \"dxpointerover\",\r\n    out: \"dxpointerout\"\r\n};\r\n\r\nfunction getStrategyFromGlobalConfig() {\r\n    const eventStrategyName = GlobalConfig().pointerEventStrategy;\r\n    return {\r\n        \"mouse-and-touch\": MouseAndTouchStrategy,\r\n        touch: TouchStrategy,\r\n        mouse: MouseStrategy\r\n    } [eventStrategyName]\r\n}\r\nexport default pointer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,iDAAiD;AAC3E,OAAOC,aAAa,MAAM,wCAAwC;AAClE,OAAOC,qBAAqB,MAAM,kDAAkD;AACpF,OAAOC,aAAa,MAAM,wCAAwC;AAClE,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,SACIC,IAAI,QACD,2BAA2B;AAClC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,MAAMC,WAAW,GAAGA,CAACD,OAAO,EAAEE,IAAI,KAAK;EACnC,IAAI;IACAC,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA;EACX,CAAC,GAAGF,IAAI;EACR,MAAMG,oBAAoB,GAAGC,2BAA2B,CAAC,CAAC;EAC1D,IAAID,oBAAoB,EAAE;IACtB,OAAOA,oBAAoB;EAC/B;EACA,IAAIL,OAAO,CAACO,KAAK,IAAI,EAAEJ,MAAM,IAAIC,KAAK,CAAC,EAAE;IACrC,OAAOT,qBAAqB;EAChC;EACA,IAAIK,OAAO,CAACO,KAAK,EAAE;IACf,OAAOX,aAAa;EACxB;EACA,OAAOF,aAAa;AACxB,CAAC;AACD,MAAMc,aAAa,GAAGP,WAAW,CAACD,OAAO,EAAED,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC;AAC1DX,IAAI,CAACU,aAAa,CAACE,GAAG,EAAG,CAACC,YAAY,EAAEC,cAAc,KAAK;EACvDnB,aAAa,CAACkB,YAAY,EAAE,IAAIH,aAAa,CAACG,YAAY,EAAEC,cAAc,CAAC,CAAC;AAChF,CAAE,CAAC;AACH,MAAMC,OAAO,GAAG;EACZC,IAAI,EAAE,eAAe;EACrBC,EAAE,EAAE,aAAa;EACjBC,IAAI,EAAE,eAAe;EACrBC,MAAM,EAAE,iBAAiB;EACzBC,KAAK,EAAE,gBAAgB;EACvBC,KAAK,EAAE,gBAAgB;EACvBC,IAAI,EAAE,eAAe;EACrBC,GAAG,EAAE;AACT,CAAC;AAED,SAASf,2BAA2BA,CAAA,EAAG;EACnC,MAAMgB,iBAAiB,GAAGzB,YAAY,CAAC,CAAC,CAACQ,oBAAoB;EAC7D,OAAO;IACH,iBAAiB,EAAEV,qBAAqB;IACxCY,KAAK,EAAEX,aAAa;IACpB2B,KAAK,EAAE7B;EACX,CAAC,CAAE4B,iBAAiB,CAAC;AACzB;AACA,eAAeT,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}