{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/number_box/m_number_box.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { addNamespace, getChar, isCommandKeyPressed, normalizeKeyName } from \"../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport devices from \"../../../core/devices\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport $ from \"../../../core/renderer\";\nimport browser from \"../../../core/utils/browser\";\nimport { applyServerDecimalSeparator, ensureDefined } from \"../../../core/utils/common\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport { fitIntoRange, inRange } from \"../../../core/utils/math\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport TextEditor from \"../../ui/text_box/m_text_editor\";\nimport SpinButtons from \"./m_number_box.spins\";\nconst math = Math;\nconst WIDGET_CLASS = \"dx-numberbox\";\nconst FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\nconst FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\nclass NumberBoxBase extends TextEditor {\n  _supportedKeys() {\n    return _extends({}, super._supportedKeys(), {\n      upArrow(e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n          this._spinUpChangeHandler(e);\n        }\n      },\n      downArrow(e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n          this._spinDownChangeHandler(e);\n        }\n      },\n      enter() {}\n    });\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      value: 0,\n      min: void 0,\n      max: void 0,\n      step: 1,\n      showSpinButtons: false,\n      useLargeSpinButtons: true,\n      mode: \"text\",\n      invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\n      buttons: void 0\n    });\n  }\n  _useTemplates() {\n    return false;\n  }\n  _getDefaultButtons() {\n    return super._getDefaultButtons().concat([{\n      name: \"spins\",\n      Ctor: SpinButtons\n    }]);\n  }\n  _isSupportInputMode() {\n    const version = parseFloat(browser.version);\n    return browser.chrome && version >= 66 || browser.safari && version >= 12;\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => devices.real().generic && !devices.isSimulator(),\n      options: {\n        useLargeSpinButtons: false\n      }\n    }, {\n      device: function () {\n        return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode();\n      }.bind(this),\n      options: {\n        mode: \"number\"\n      }\n    }]);\n  }\n  _initMarkup() {\n    this._renderSubmitElement();\n    this.$element().addClass(WIDGET_CLASS);\n    super._initMarkup();\n    this._toggleTabIndex();\n  }\n  _getDefaultAttributes() {\n    const attributes = super._getDefaultAttributes();\n    attributes.inputmode = \"decimal\";\n    return attributes;\n  }\n  _renderContentImpl() {\n    this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\n    this.setAria(\"role\", \"spinbutton\");\n  }\n  _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    this._setSubmitValue(this.option(\"value\"));\n  }\n  _setSubmitValue(value) {\n    this._getSubmitElement().val(applyServerDecimalSeparator(value));\n  }\n  _getSubmitElement() {\n    return this._$submitElement;\n  }\n  _keyPressHandler(e) {\n    super._keyPressHandler();\n    const char = getChar(e);\n    const isInputCharValid = /[\\d.,eE\\-+]/.test(char);\n    if (!isInputCharValid) {\n      const keyName = normalizeKeyName(e);\n      if (isCommandKeyPressed(e) || keyName && FIREFOX_CONTROL_KEYS.includes(keyName)) {\n        return;\n      }\n      e.preventDefault();\n      return;\n    }\n    this._keyPressed = true;\n  }\n  _onMouseWheel(dxEvent) {\n    dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\n  }\n  _renderValue() {\n    const inputValue = this._input().val();\n    const value = this.option(\"value\");\n    if (!inputValue.length || Number(inputValue) !== value) {\n      this._forceValueRender();\n      this._toggleEmptinessEventHandler();\n    }\n    const valueText = isDefined(value) ? null : messageLocalization.format(\"dxNumberBox-noDataText\");\n    this.setAria({\n      valuenow: ensureDefined(value, \"\"),\n      valuetext: valueText\n    });\n    this.option(\"text\", this._input().val());\n    this._updateButtons();\n    return Deferred().resolve();\n  }\n  _forceValueRender() {\n    const value = this.option(\"value\");\n    const number = Number(value);\n    const formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\n    this._renderDisplayText(formattedValue);\n  }\n  _applyDisplayValueFormatter(value) {\n    const {\n      displayValueFormatter: displayValueFormatter\n    } = this.option();\n    return null === displayValueFormatter || void 0 === displayValueFormatter ? void 0 : displayValueFormatter(value);\n  }\n  _renderProps() {\n    this._input().prop({\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      step: this.option(\"step\")\n    });\n    this.setAria({\n      valuemin: ensureDefined(this.option(\"min\"), \"\"),\n      valuemax: ensureDefined(this.option(\"max\"), \"\")\n    });\n  }\n  _spinButtonsPointerDownHandler() {\n    const $input = this._input();\n    if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\n      eventsEngine.trigger($input, \"focus\");\n    }\n  }\n  _spinUpChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(1, e.event || e);\n    }\n  }\n  _spinDownChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(-1, e.event || e);\n    }\n  }\n  _spinValueChange(sign, dxEvent) {\n    const step = parseFloat(this.option(\"step\"));\n    if (0 === step) {\n      return;\n    }\n    let value = parseFloat(this._normalizeInputValue()) || 0;\n    value = this._correctRounding(value, step * sign);\n    const min = this.option(\"min\");\n    const max = this.option(\"max\");\n    if (isDefined(min)) {\n      value = Math.max(min, value);\n    }\n    if (isDefined(max)) {\n      value = Math.min(max, value);\n    }\n    this._saveValueChangeEvent(dxEvent);\n    this.option(\"value\", value);\n  }\n  _correctRounding(value, step) {\n    const regex = /[,.](.*)/;\n    const isFloatValue = regex.test(value);\n    const isFloatStep = regex.test(step);\n    if (isFloatValue || isFloatStep) {\n      const valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0;\n      const stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;\n      const accuracy = math.max(valueAccuracy, stepAccuracy);\n      value = this._round(value + step, accuracy);\n      return value;\n    }\n    return value + step;\n  }\n  _round(value, precision) {\n    precision = precision || 0;\n    const multiplier = 10 ** precision;\n    value *= multiplier;\n    value = Math.round(value) / multiplier;\n    return value;\n  }\n  _renderValueChangeEvent() {\n    super._renderValueChangeEvent();\n    const forceValueChangeEvent = addNamespace(\"focusout\", \"NumberBoxForceValueChange\");\n    eventsEngine.off(this.element(), forceValueChangeEvent);\n    eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this));\n  }\n  _forceRefreshInputValue() {\n    const {\n      mode: mode\n    } = this.option();\n    if (\"number\" === mode) {\n      return;\n    }\n    const $input = this._input();\n    const formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\n    $input.val(null);\n    $input.val(formattedValue);\n  }\n  _valueChangeEventHandler(e) {\n    const $input = this._input();\n    const inputValue = this._normalizeText();\n    const value = this._parseValue(inputValue);\n    const valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\n    if (this._isValueValid() && !this._validateValue(value)) {\n      $input.val(this._applyDisplayValueFormatter(value));\n      return;\n    }\n    if (valueHasDigits) {\n      super._valueChangeEventHandler(e, isNaN(value) ? null : value);\n    }\n    this._applyValueBoundaries(inputValue, value);\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n  }\n  _applyValueBoundaries(inputValue, parsedValue) {\n    const isValueIncomplete = this._isValueIncomplete(inputValue);\n    const isValueCorrect = this._isValueInRange(inputValue);\n    if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\n      if (Number(inputValue) !== parsedValue) {\n        this._input().val(this._applyDisplayValueFormatter(parsedValue));\n      }\n    }\n  }\n  _replaceCommaWithPoint(value) {\n    return value.replace(\",\", \".\");\n  }\n  _inputIsInvalid() {\n    const {\n      mode: mode\n    } = this.option();\n    const isNumberMode = \"number\" === mode;\n    const validityState = this._input().get(0).validity;\n    return isNumberMode && (null === validityState || void 0 === validityState ? void 0 : validityState.badInput);\n  }\n  _renderDisplayText(text) {\n    if (this._inputIsInvalid()) {\n      return;\n    }\n    super._renderDisplayText(text);\n  }\n  _isValueIncomplete(value) {\n    return /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i.test(value);\n  }\n  _isValueInRange(value) {\n    return inRange(value, this.option(\"min\"), this.option(\"max\"));\n  }\n  _isNumber(value) {\n    return null !== this._parseValue(value);\n  }\n  _validateValue(value) {\n    const inputValue = this._normalizeText();\n    const isValueValid = this._isValueValid();\n    let isValid = true;\n    const isNumber = this._isNumber(inputValue);\n    if (isNaN(Number(value))) {\n      isValid = false;\n    }\n    if (!value && isValueValid) {\n      isValid = true;\n    } else if (!isNumber && !isValueValid) {\n      isValid = false;\n    }\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"invalidValueMessage\")\n      }\n    });\n    return isValid;\n  }\n  _normalizeInputValue() {\n    return this._parseValue(this._normalizeText());\n  }\n  _normalizeText() {\n    const value = this._input().val().trim();\n    return this._replaceCommaWithPoint(value);\n  }\n  _parseValue(value) {\n    const number = parseFloat(value);\n    if (isNaN(number)) {\n      return null;\n    }\n    return fitIntoRange(number, this.option(\"min\"), this.option(\"max\"));\n  }\n  _clearValue() {\n    if (this._inputIsInvalid()) {\n      this._input().val(\"\");\n      this._validateValue();\n    }\n    super._clearValue();\n  }\n  clear() {\n    if (null === this.option(\"value\")) {\n      this.option(\"text\", \"\");\n      if (this._input().length) {\n        this._renderValue();\n      }\n    } else {\n      this.option(\"value\", null);\n    }\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._validateValue(args.value);\n        this._setSubmitValue(args.value);\n        super._optionChanged(args);\n        this._resumeValueChangeAction();\n        break;\n      case \"step\":\n        this._renderProps();\n        break;\n      case \"min\":\n      case \"max\":\n        this._renderProps();\n        this.option(\"value\", this._parseValue(this.option(\"value\")));\n        break;\n      case \"showSpinButtons\":\n      case \"useLargeSpinButtons\":\n        this._updateButtons([\"spins\"]);\n        break;\n      case \"invalidValueMessage\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n}\nexport default NumberBoxBase;","map":{"version":3,"names":["_extends","eventsEngine","addNamespace","getChar","isCommandKeyPressed","normalizeKeyName","messageLocalization","devices","domAdapter","$","browser","applyServerDecimalSeparator","ensureDefined","Deferred","fitIntoRange","inRange","isDefined","TextEditor","SpinButtons","math","Math","WIDGET_CLASS","FIREFOX_CONTROL_KEYS","FORCE_VALUECHANGE_EVENT_NAMESPACE","NumberBoxBase","_supportedKeys","upArrow","e","preventDefault","stopPropagation","_spinUpChangeHandler","downArrow","_spinDownChangeHandler","enter","_getDefaultOptions","value","min","max","step","showSpinButtons","useLargeSpinButtons","mode","invalidValueMessage","format","buttons","_useTemplates","_getDefaultButtons","concat","name","Ctor","_isSupportInputMode","version","parseFloat","chrome","safari","_defaultOptionsRules","device","real","generic","isSimulator","options","deviceType","bind","_initMarkup","_renderSubmitElement","$element","addClass","_toggleTabIndex","_getDefaultAttributes","attributes","inputmode","_renderContentImpl","option","_validateValue","setAria","_$submitElement","attr","appendTo","_setSubmitValue","_getSubmitElement","val","_keyPressHandler","char","isInputCharValid","test","keyName","includes","_keyPressed","_onMouseWheel","dxEvent","delta","_spinValueChange","_renderValue","inputValue","_input","length","Number","_forceValueRender","_toggleEmptinessEventHandler","valueText","valuenow","valuetext","_updateButtons","resolve","number","formattedValue","isNaN","_applyDisplayValueFormatter","_renderDisplayText","displayValueFormatter","_renderProps","prop","valuemin","valuemax","_spinButtonsPointerDownHandler","$input","getActiveElement","trigger","event","sign","_normalizeInputValue","_correctRounding","_saveValueChangeEvent","regex","isFloatValue","isFloatStep","valueAccuracy","exec","stepAccuracy","accuracy","_round","precision","multiplier","round","_renderValueChangeEvent","forceValueChangeEvent","off","element","on","_forceRefreshInputValue","_valueChangeEventHandler","_normalizeText","_parseValue","valueHasDigits","_isValueValid","_applyValueBoundaries","validationRequest","fire","editor","parsedValue","isValueIncomplete","_isValueIncomplete","isValueCorrect","_isValueInRange","_replaceCommaWithPoint","replace","_inputIsInvalid","isNumberMode","validityState","get","validity","badInput","text","_isNumber","isValueValid","isValid","isNumber","validationError","editorSpecific","message","trim","_clearValue","clear","_optionChanged","args","_resumeValueChangeAction"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/number_box/m_number_box.base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/number_box/m_number_box.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    addNamespace,\r\n    getChar,\r\n    isCommandKeyPressed,\r\n    normalizeKeyName\r\n} from \"../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport devices from \"../../../core/devices\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport $ from \"../../../core/renderer\";\r\nimport browser from \"../../../core/utils/browser\";\r\nimport {\r\n    applyServerDecimalSeparator,\r\n    ensureDefined\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    fitIntoRange,\r\n    inRange\r\n} from \"../../../core/utils/math\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport TextEditor from \"../../ui/text_box/m_text_editor\";\r\nimport SpinButtons from \"./m_number_box.spins\";\r\nconst math = Math;\r\nconst WIDGET_CLASS = \"dx-numberbox\";\r\nconst FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\r\nconst FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\r\nclass NumberBoxBase extends TextEditor {\r\n    _supportedKeys() {\r\n        return _extends({}, super._supportedKeys(), {\r\n            upArrow(e) {\r\n                if (!isCommandKeyPressed(e)) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this._spinUpChangeHandler(e)\r\n                }\r\n            },\r\n            downArrow(e) {\r\n                if (!isCommandKeyPressed(e)) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this._spinDownChangeHandler(e)\r\n                }\r\n            },\r\n            enter() {}\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\r\n            buttons: void 0\r\n        })\r\n    }\r\n    _useTemplates() {\r\n        return false\r\n    }\r\n    _getDefaultButtons() {\r\n        return super._getDefaultButtons().concat([{\r\n            name: \"spins\",\r\n            Ctor: SpinButtons\r\n        }])\r\n    }\r\n    _isSupportInputMode() {\r\n        const version = parseFloat(browser.version);\r\n        return browser.chrome && version >= 66 || browser.safari && version >= 12\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => devices.real().generic && !devices.isSimulator(),\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode()\r\n            }.bind(this),\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    }\r\n    _initMarkup() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        super._initMarkup();\r\n        this._toggleTabIndex()\r\n    }\r\n    _getDefaultAttributes() {\r\n        const attributes = super._getDefaultAttributes();\r\n        attributes.inputmode = \"decimal\";\r\n        return attributes\r\n    }\r\n    _renderContentImpl() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\")\r\n    }\r\n    _renderSubmitElement() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    }\r\n    _setSubmitValue(value) {\r\n        this._getSubmitElement().val(applyServerDecimalSeparator(value))\r\n    }\r\n    _getSubmitElement() {\r\n        return this._$submitElement\r\n    }\r\n    _keyPressHandler(e) {\r\n        super._keyPressHandler();\r\n        const char = getChar(e);\r\n        const isInputCharValid = /[\\d.,eE\\-+]/.test(char);\r\n        if (!isInputCharValid) {\r\n            const keyName = normalizeKeyName(e);\r\n            if (isCommandKeyPressed(e) || keyName && FIREFOX_CONTROL_KEYS.includes(keyName)) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        this._keyPressed = true\r\n    }\r\n    _onMouseWheel(dxEvent) {\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent)\r\n    }\r\n    _renderValue() {\r\n        const inputValue = this._input().val();\r\n        const value = this.option(\"value\");\r\n        if (!inputValue.length || Number(inputValue) !== value) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        const valueText = isDefined(value) ? null : messageLocalization.format(\"dxNumberBox-noDataText\");\r\n        this.setAria({\r\n            valuenow: ensureDefined(value, \"\"),\r\n            valuetext: valueText\r\n        });\r\n        this.option(\"text\", this._input().val());\r\n        this._updateButtons();\r\n        return Deferred().resolve()\r\n    }\r\n    _forceValueRender() {\r\n        const value = this.option(\"value\");\r\n        const number = Number(value);\r\n        const formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\r\n        this._renderDisplayText(formattedValue)\r\n    }\r\n    _applyDisplayValueFormatter(value) {\r\n        const {\r\n            displayValueFormatter: displayValueFormatter\r\n        } = this.option();\r\n        return null === displayValueFormatter || void 0 === displayValueFormatter ? void 0 : displayValueFormatter(value)\r\n    }\r\n    _renderProps() {\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: ensureDefined(this.option(\"min\"), \"\"),\r\n            valuemax: ensureDefined(this.option(\"max\"), \"\")\r\n        })\r\n    }\r\n    _spinButtonsPointerDownHandler() {\r\n        const $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    }\r\n    _spinUpChangeHandler(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    }\r\n    _spinDownChangeHandler(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    }\r\n    _spinValueChange(sign, dxEvent) {\r\n        const step = parseFloat(this.option(\"step\"));\r\n        if (0 === step) {\r\n            return\r\n        }\r\n        let value = parseFloat(this._normalizeInputValue()) || 0;\r\n        value = this._correctRounding(value, step * sign);\r\n        const min = this.option(\"min\");\r\n        const max = this.option(\"max\");\r\n        if (isDefined(min)) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (isDefined(max)) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    }\r\n    _correctRounding(value, step) {\r\n        const regex = /[,.](.*)/;\r\n        const isFloatValue = regex.test(value);\r\n        const isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            const valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0;\r\n            const stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;\r\n            const accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    }\r\n    _round(value, precision) {\r\n        precision = precision || 0;\r\n        const multiplier = 10 ** precision;\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    }\r\n    _renderValueChangeEvent() {\r\n        super._renderValueChangeEvent();\r\n        const forceValueChangeEvent = addNamespace(\"focusout\", \"NumberBoxForceValueChange\");\r\n        eventsEngine.off(this.element(), forceValueChangeEvent);\r\n        eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this))\r\n    }\r\n    _forceRefreshInputValue() {\r\n        const {\r\n            mode: mode\r\n        } = this.option();\r\n        if (\"number\" === mode) {\r\n            return\r\n        }\r\n        const $input = this._input();\r\n        const formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    }\r\n    _valueChangeEventHandler(e) {\r\n        const $input = this._input();\r\n        const inputValue = this._normalizeText();\r\n        const value = this._parseValue(inputValue);\r\n        const valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyDisplayValueFormatter(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            super._valueChangeEventHandler(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    }\r\n    _applyValueBoundaries(inputValue, parsedValue) {\r\n        const isValueIncomplete = this._isValueIncomplete(inputValue);\r\n        const isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyDisplayValueFormatter(parsedValue))\r\n            }\r\n        }\r\n    }\r\n    _replaceCommaWithPoint(value) {\r\n        return value.replace(\",\", \".\")\r\n    }\r\n    _inputIsInvalid() {\r\n        const {\r\n            mode: mode\r\n        } = this.option();\r\n        const isNumberMode = \"number\" === mode;\r\n        const validityState = this._input().get(0).validity;\r\n        return isNumberMode && (null === validityState || void 0 === validityState ? void 0 : validityState.badInput)\r\n    }\r\n    _renderDisplayText(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        super._renderDisplayText(text)\r\n    }\r\n    _isValueIncomplete(value) {\r\n        return /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i.test(value)\r\n    }\r\n    _isValueInRange(value) {\r\n        return inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    }\r\n    _isNumber(value) {\r\n        return null !== this._parseValue(value)\r\n    }\r\n    _validateValue(value) {\r\n        const inputValue = this._normalizeText();\r\n        const isValueValid = this._isValueValid();\r\n        let isValid = true;\r\n        const isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else if (!isNumber && !isValueValid) {\r\n            isValid = false\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    }\r\n    _normalizeInputValue() {\r\n        return this._parseValue(this._normalizeText())\r\n    }\r\n    _normalizeText() {\r\n        const value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    }\r\n    _parseValue(value) {\r\n        const number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    }\r\n    _clearValue() {\r\n        if (this._inputIsInvalid()) {\r\n            this._input().val(\"\");\r\n            this._validateValue()\r\n        }\r\n        super._clearValue()\r\n    }\r\n    clear() {\r\n        if (null === this.option(\"value\")) {\r\n            this.option(\"text\", \"\");\r\n            if (this._input().length) {\r\n                this._renderValue()\r\n            }\r\n        } else {\r\n            this.option(\"value\", null)\r\n        }\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                super._optionChanged(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n            case \"useLargeSpinButtons\":\r\n                this._updateButtons([\"spins\"]);\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nexport default NumberBoxBase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}