{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/calendar/m_calendar.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { fx } from \"../../../common/core/animation\";\nimport { move } from \"../../../common/core/animation/translator\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport Swipeable from \"../../../common/core/events/gesture/swipeable\";\nimport { end as hoverEndEventName } from \"../../../common/core/events/hover\";\nimport { addNamespace, isCommandKeyPressed } from \"../../../common/core/events/utils/index\";\nimport dateLocalization from \"../../../common/core/localization/date\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport devices from \"../../../core/devices\";\nimport Guid from \"../../../core/guid\";\nimport $ from \"../../../core/renderer\";\nimport { FunctionTemplate } from \"../../../core/templates/function_template\";\nimport dateUtils from \"../../../core/utils/date\";\nimport dateSerialization from \"../../../core/utils/date_serialization\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { inRange } from \"../../../core/utils/math\";\nimport { getWidth } from \"../../../core/utils/size\";\nimport { isDefined, isFunction, isNumeric, isString } from \"../../../core/utils/type\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport Button from \"../../../ui/button\";\nimport { isFluent } from \"../../../ui/themes\";\nimport Editor from \"../../ui/editor/editor\";\nimport CalendarMultipleSelectionStrategy from \"./m_calendar.multiple.selection.strategy\";\nimport Navigator from \"./m_calendar.navigator\";\nimport CalendarRangeSelectionStrategy from \"./m_calendar.range.selection.strategy\";\nimport CalendarSingleSelectionStrategy from \"./m_calendar.single.selection.strategy\";\nimport Views from \"./m_calendar.views\";\nconst CALENDAR_CLASS = \"dx-calendar\";\nconst CALENDAR_BODY_CLASS = \"dx-calendar-body\";\nconst CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\nconst CALENDAR_FOOTER_CLASS = \"dx-calendar-footer\";\nconst CALENDAR_TODAY_BUTTON_CLASS = \"dx-calendar-today-button\";\nconst CALENDAR_HAS_FOOTER_CLASS = \"dx-calendar-with-footer\";\nconst CALENDAR_VIEWS_WRAPPER_CLASS = \"dx-calendar-views-wrapper\";\nconst CALENDAR_VIEW_CLASS = \"dx-calendar-view\";\nconst CALENDAR_MULTIVIEW_CLASS = \"dx-calendar-multiview\";\nconst CALENDAR_RANGE_CLASS = \"dx-calendar-range\";\nconst GESTURE_COVER_CLASS = \"dx-gesture-cover\";\nconst ANIMATION_DURATION_SHOW_VIEW = 250;\nconst POP_ANIMATION_FROM = .6;\nconst POP_ANIMATION_TO = 1;\nconst CALENDAR_INPUT_STANDARD_PATTERN = \"yyyy-MM-dd\";\nconst CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\nconst CALENDAR_DXHOVEREND_EVENT_NAME = addNamespace(hoverEndEventName, \"dxCalendar\");\nconst LEVEL_COMPARE_MAP = {\n  month: 3,\n  year: 2,\n  decade: 1,\n  century: 0\n};\nconst ZOOM_LEVEL = {\n  MONTH: \"month\",\n  YEAR: \"year\",\n  DECADE: \"decade\",\n  CENTURY: \"century\"\n};\nconst SELECTION_STRATEGIES = {\n  SingleSelection: CalendarSingleSelectionStrategy,\n  MultipleSelection: CalendarMultipleSelectionStrategy,\n  RangeSelection: CalendarRangeSelectionStrategy\n};\nclass Calendar extends Editor {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      currentDate: new Date(),\n      value: null,\n      min: new Date(1e3, 0),\n      max: new Date(3e3, 0),\n      viewsCount: 1,\n      zoomLevel: ZOOM_LEVEL.MONTH,\n      maxZoomLevel: ZOOM_LEVEL.MONTH,\n      minZoomLevel: ZOOM_LEVEL.CENTURY,\n      selectionMode: \"single\",\n      selectWeekOnClick: true,\n      showTodayButton: false,\n      showWeekNumbers: false,\n      weekNumberRule: \"auto\",\n      cellTemplate: \"cell\",\n      disabledDates: null,\n      onCellClick: null,\n      onContouredChanged: null,\n      skipFocusCheck: false,\n      _todayDate: () => new Date()\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  }\n  _supportedKeys() {\n    return _extends({}, super._supportedKeys(), {\n      rightArrow(e) {\n        e.preventDefault();\n        if (isCommandKeyPressed(e)) {\n          this._waitRenderView(1);\n        } else {\n          this._moveCurrentDateByOffset(1 * this._getRtlCorrection());\n        }\n      },\n      leftArrow(e) {\n        e.preventDefault();\n        if (isCommandKeyPressed(e)) {\n          this._waitRenderView(-1);\n        } else {\n          this._moveCurrentDateByOffset(-1 * this._getRtlCorrection());\n        }\n      },\n      upArrow(e) {\n        e.preventDefault();\n        if (isCommandKeyPressed(e)) {\n          this._navigateUp();\n        } else {\n          if (fx.isAnimating(this._view.$element())) {\n            return;\n          }\n          this._moveCurrentDateByOffset(-1 * this._view.option(\"colCount\"));\n        }\n      },\n      downArrow(e) {\n        e.preventDefault();\n        if (isCommandKeyPressed(e)) {\n          this._navigateDown();\n        } else {\n          if (fx.isAnimating(this._view.$element())) {\n            return;\n          }\n          this._moveCurrentDateByOffset(1 * this._view.option(\"colCount\"));\n        }\n      },\n      home(e) {\n        e.preventDefault();\n        const zoomLevel = this.option(\"zoomLevel\");\n        const currentDate = this.option(\"currentDate\");\n        const min = this._dateOption(\"min\");\n        if (this._view.isDateDisabled(currentDate)) {\n          return;\n        }\n        const date = dateUtils.sameView(zoomLevel, currentDate, min) ? min : dateUtils.getViewFirstCellDate(zoomLevel, currentDate);\n        this._moveToClosestAvailableDate(date);\n      },\n      end(e) {\n        e.preventDefault();\n        const zoomLevel = this.option(\"zoomLevel\");\n        const currentDate = this.option(\"currentDate\");\n        const max = this._dateOption(\"max\");\n        if (this._view.isDateDisabled(currentDate)) {\n          return;\n        }\n        const date = dateUtils.sameView(zoomLevel, currentDate, max) ? max : dateUtils.getViewLastCellDate(zoomLevel, currentDate);\n        this._moveToClosestAvailableDate(date);\n      },\n      pageUp(e) {\n        e.preventDefault();\n        this._waitRenderView(-1 * this._getRtlCorrection());\n      },\n      pageDown(e) {\n        e.preventDefault();\n        this._waitRenderView(1 * this._getRtlCorrection());\n      },\n      tab() {},\n      enter: this._enterKeyHandler\n    });\n  }\n  _enterKeyHandler(e) {\n    if (!this._isMaxZoomLevel()) {\n      this._navigateDown();\n    } else if (!this._view.isDateDisabled(this.option(\"currentDate\"))) {\n      const value = this._updateTimeComponent(this.option(\"currentDate\"));\n      this._selectionStrategy.selectValue(value, e);\n    }\n  }\n  _getSerializationFormat(optionName) {\n    const value = this.option(optionName || \"value\");\n    if (this.option(\"dateSerializationFormat\")) {\n      return this.option(\"dateSerializationFormat\");\n    }\n    if (isNumeric(value)) {\n      return \"number\";\n    }\n    if (!isString(value)) {\n      return;\n    }\n    return dateSerialization.getDateSerializationFormat(value);\n  }\n  _convertToDate(value) {\n    return dateSerialization.deserializeDate(value);\n  }\n  _dateValue(value, event) {\n    if (event) {\n      if (\"keydown\" === event.type) {\n        const cellElement = this._view._getContouredCell().get(0);\n        event.target = cellElement;\n      }\n      this._saveValueChangeEvent(event);\n    }\n    this._dateOption(\"value\", value);\n  }\n  _dateOption(optionName, optionValue) {\n    const isArray = \"value\" === optionName && !this._isSingleMode();\n    const value = this.option(\"value\");\n    if (1 === arguments.length) {\n      return isArray ? (value ?? []).map(value => this._convertToDate(value)) : this._convertToDate(this.option(optionName));\n    }\n    const serializationFormat = this._getSerializationFormat(optionName);\n    const serializedValue = isArray ? (null === optionValue || void 0 === optionValue ? void 0 : optionValue.map(value => dateSerialization.serializeDate(value, serializationFormat))) || [] : dateSerialization.serializeDate(optionValue, serializationFormat);\n    this.option(optionName, serializedValue);\n  }\n  _isSingleMode() {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    return \"single\" === selectionMode;\n  }\n  _shiftDate(zoomLevel, date, offset, reverse) {\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.MONTH:\n        date.setDate(date.getDate() + offset * reverse);\n        break;\n      case ZOOM_LEVEL.YEAR:\n        date.setMonth(date.getMonth() + offset * reverse);\n        break;\n      case ZOOM_LEVEL.DECADE:\n        date.setFullYear(date.getFullYear() + offset * reverse);\n        break;\n      case ZOOM_LEVEL.CENTURY:\n        date.setFullYear(date.getFullYear() + 10 * offset * reverse);\n    }\n  }\n  _moveCurrentDateByOffset(offset) {\n    const baseDate = this.option(\"currentDate\");\n    let currentDate = new Date(baseDate);\n    const zoomLevel = this.option(\"zoomLevel\");\n    this._shiftDate(zoomLevel, currentDate, offset, 1);\n    const maxDate = this._getMaxDate();\n    const minDate = this._getMinDate();\n    let isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, currentDate, baseDate);\n    let isDateForwardInRange = inRange(currentDate, minDate, maxDate) && isDateForwardInNeighborView;\n    const dateForward = new Date(currentDate);\n    while (isDateForwardInRange) {\n      if (!this._view.isDateDisabled(dateForward)) {\n        currentDate = dateForward;\n        break;\n      }\n      this._shiftDate(zoomLevel, dateForward, offset, 1);\n      isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, dateForward, baseDate);\n      isDateForwardInRange = inRange(dateForward, minDate, maxDate) && isDateForwardInNeighborView;\n    }\n    if (this._view.isDateDisabled(baseDate) || this._view.isDateDisabled(currentDate)) {\n      const direction = offset > 0 ? 1 : -1;\n      const isViewDisabled = 1 === direction ? this._isNextViewDisabled() : this._isPrevViewDisabled();\n      if (!isViewDisabled) {\n        this._waitRenderView(direction);\n      } else {\n        this._moveToClosestAvailableDate(currentDate);\n      }\n    } else {\n      this._skipNavigate = true;\n      this.option(\"currentDate\", currentDate);\n    }\n  }\n  _isNextViewDisabled() {\n    return this._navigator._nextButton.option(\"disabled\");\n  }\n  _isPrevViewDisabled() {\n    return this._navigator._prevButton.option(\"disabled\");\n  }\n  _areDatesInSameView(zoomLevel, date1, date2) {\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.MONTH:\n        return date1.getMonth() === date2.getMonth();\n      case ZOOM_LEVEL.YEAR:\n        return date1.getYear() === date2.getYear();\n      case ZOOM_LEVEL.DECADE:\n        return parseInt(date1.getYear() / 10) === parseInt(date2.getYear() / 10);\n      case ZOOM_LEVEL.CENTURY:\n        return parseInt(date1.getYear() / 100) === parseInt(date2.getYear() / 100);\n    }\n  }\n  _areDatesInNeighborView(zoomLevel, date1, date2) {\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.MONTH:\n        return ((a, b) => {\n          const abs = Math.abs(a - b);\n          return Math.min(abs, 12 - abs);\n        })(date1.getMonth(), date2.getMonth()) <= 1;\n      case ZOOM_LEVEL.YEAR:\n        return Math.abs(date1.getYear() - date2.getYear()) <= 1;\n      case ZOOM_LEVEL.DECADE:\n        return Math.abs(date1.getYear() - date2.getYear()) <= 10;\n      case ZOOM_LEVEL.CENTURY:\n        return Math.abs(date1.getYear() - date2.getYear()) <= 100;\n    }\n  }\n  _moveToClosestAvailableDate() {\n    let baseDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.option(\"currentDate\");\n    let currentDate = new Date(baseDate);\n    const zoomLevel = this.option(\"zoomLevel\");\n    const isCurrentDateAvailable = !this._isDateNotAvailable(currentDate);\n    let isDateForwardAvailable = isCurrentDateAvailable;\n    let isDateBackwardAvailable = isCurrentDateAvailable;\n    let isDateForwardInStartView;\n    let isDateBackwardInStartView;\n    const dateForward = new Date(currentDate);\n    const dateBackward = new Date(currentDate);\n    do {\n      if (isDateForwardAvailable) {\n        currentDate = dateForward;\n        break;\n      }\n      if (isDateBackwardAvailable) {\n        currentDate = dateBackward;\n        break;\n      }\n      this._shiftDate(zoomLevel, dateForward, 1, 1);\n      this._shiftDate(zoomLevel, dateBackward, 1, -1);\n      isDateForwardInStartView = this._areDatesInSameView(zoomLevel, dateForward, baseDate);\n      isDateBackwardInStartView = this._areDatesInSameView(zoomLevel, dateBackward, baseDate);\n      isDateForwardAvailable = isDateForwardInStartView && !this._isDateNotAvailable(dateForward);\n      isDateBackwardAvailable = isDateBackwardInStartView && !this._isDateNotAvailable(dateBackward);\n    } while (isDateForwardInStartView || isDateBackwardInStartView);\n    this.option(\"currentDate\", currentDate);\n  }\n  _isDateNotAvailable(date) {\n    const maxDate = this._getMaxDate();\n    const minDate = this._getMinDate();\n    return !inRange(date, minDate, maxDate) || this._view.isDateDisabled(date);\n  }\n  _init() {\n    super._init();\n    this._activeStateUnit = \".dx-calendar-cell\";\n    this._initSelectionStrategy();\n    this._correctZoomLevel();\n    this._initCurrentDate();\n    this._initActions();\n  }\n  _initSelectionStrategy() {\n    const strategyName = this._getSelectionStrategyName();\n    const strategy = SELECTION_STRATEGIES[strategyName];\n    if (!this._selectionStrategy || this._selectionStrategy.NAME !== strategyName) {\n      this._selectionStrategy = new strategy(this);\n    }\n  }\n  _refreshSelectionStrategy() {\n    this._initSelectionStrategy();\n    this._selectionStrategy.restoreValue();\n    this._refresh();\n  }\n  _getSelectionStrategyName() {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    switch (selectionMode) {\n      case \"multiple\":\n        return \"MultipleSelection\";\n      case \"range\":\n        return \"RangeSelection\";\n      default:\n        return \"SingleSelection\";\n    }\n  }\n  _correctZoomLevel() {\n    const {\n      minZoomLevel: minZoomLevel,\n      maxZoomLevel: maxZoomLevel,\n      zoomLevel: zoomLevel\n    } = this.option();\n    if (LEVEL_COMPARE_MAP[maxZoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\n      return;\n    }\n    if (LEVEL_COMPARE_MAP[zoomLevel] > LEVEL_COMPARE_MAP[maxZoomLevel]) {\n      this.option(\"zoomLevel\", maxZoomLevel);\n    } else if (LEVEL_COMPARE_MAP[zoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\n      this.option(\"zoomLevel\", minZoomLevel);\n    }\n  }\n  _initCurrentDate() {\n    const currentDate = this._getNormalizedDate(this._selectionStrategy.getDefaultCurrentDate()) ?? this._getNormalizedDate(this.option(\"currentDate\"));\n    this.option(\"currentDate\", currentDate);\n  }\n  _getNormalizedDate(date) {\n    date = dateUtils.normalizeDate(date, this._getMinDate(), this._getMaxDate());\n    return isDefined(date) ? this._getDate(date) : date;\n  }\n  _initActions() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n    this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\n  }\n  _initTemplates() {\n    this._templateManager.addDefaultTemplates({\n      cell: new FunctionTemplate(options => {\n        const data = options.model;\n        $(options.container).append($(\"<span>\").text(data && data.text || String(data)));\n      })\n    });\n    super._initTemplates();\n  }\n  _updateCurrentDate(date) {\n    if (fx.isAnimating(this._$viewsWrapper)) {\n      fx.stop(this._$viewsWrapper, true);\n    }\n    const min = this._getMinDate();\n    const max = this._getMaxDate();\n    if (min > max) {\n      this.option(\"currentDate\", new Date());\n      return;\n    }\n    const normalizedDate = this._getNormalizedDate(date);\n    if (date.getTime() !== normalizedDate.getTime()) {\n      this.option(\"currentDate\", new Date(normalizedDate));\n      return;\n    }\n    let offset = this._getViewsOffset(this._view.option(\"date\"), normalizedDate);\n    if (0 !== offset && !this._isMaxZoomLevel() && this._isOtherViewCellClicked) {\n      offset = 0;\n    }\n    if (this._view && 0 !== offset && !this._suppressNavigation) {\n      if (this._additionalView) {\n        if (offset > 2 || offset < -1) {\n          this._refreshViews();\n          this._setViewContoured(normalizedDate);\n          this._updateAriaId(normalizedDate);\n          this._renderNavigator();\n        } else if (1 === offset && this._skipNavigate) {\n          this._setViewContoured(normalizedDate);\n          this._updateAriaId(normalizedDate);\n        } else {\n          this._navigate(offset, normalizedDate);\n        }\n      } else {\n        this._navigate(offset, normalizedDate);\n      }\n    } else {\n      this._renderNavigator();\n      this._setViewContoured(normalizedDate);\n      this._updateAriaId(normalizedDate);\n    }\n    this._skipNavigate = false;\n  }\n  _isAdditionalViewDate(date) {\n    if (!this._additionalView) {\n      return false;\n    }\n    return date >= this._additionalView._getFirstAvailableDate();\n  }\n  _getActiveView(date) {\n    return this._isAdditionalViewDate(date) ? this._additionalView : this._view;\n  }\n  _setViewContoured(date) {\n    if (this.option(\"skipFocusCheck\") || $(this._$viewsWrapper).is(\":focus\")) {\n      var _this$_additionalView;\n      this._view.option(\"contouredDate\", null);\n      null === (_this$_additionalView = this._additionalView) || void 0 === _this$_additionalView || _this$_additionalView.option(\"contouredDate\", null);\n      const view = this._isAdditionalViewDate(date) ? this._additionalView : this._view;\n      view.option(\"contouredDate\", date);\n    }\n  }\n  _getMinDate() {\n    const _rangeMin = this.option(\"_rangeMin\");\n    if (_rangeMin) {\n      return _rangeMin;\n    }\n    if (this.min) {\n      return this.min;\n    }\n    this.min = this._dateOption(\"min\") || new Date(1e3, 0);\n    return this.min;\n  }\n  _getMaxDate() {\n    const _rangeMax = this.option(\"_rangeMax\");\n    if (_rangeMax) {\n      return _rangeMax;\n    }\n    if (this.max) {\n      return this.max;\n    }\n    this.max = this._dateOption(\"max\") || new Date(3e3, 0);\n    return this.max;\n  }\n  _getViewsOffset(startDate, endDate) {\n    const {\n      zoomLevel: zoomLevel\n    } = this.option();\n    if (zoomLevel === ZOOM_LEVEL.MONTH) {\n      return this._getMonthsOffset(startDate, endDate);\n    }\n    let zoomCorrection;\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.CENTURY:\n        zoomCorrection = 100;\n        break;\n      case ZOOM_LEVEL.DECADE:\n        zoomCorrection = 10;\n        break;\n      default:\n        zoomCorrection = 1;\n    }\n    return parseInt(endDate.getFullYear() / zoomCorrection) - parseInt(startDate.getFullYear() / zoomCorrection);\n  }\n  _getMonthsOffset(startDate, endDate) {\n    const yearOffset = endDate.getFullYear() - startDate.getFullYear();\n    const monthOffset = endDate.getMonth() - startDate.getMonth();\n    return 12 * yearOffset + monthOffset;\n  }\n  _waitRenderView(offset) {\n    if (this._alreadyViewRender) {\n      return;\n    }\n    this._alreadyViewRender = true;\n    const date = this._getDateByOffset(offset * this._getRtlCorrection());\n    this._moveToClosestAvailableDate(date);\n    this._waitRenderViewTimeout = setTimeout(() => {\n      this._alreadyViewRender = false;\n    });\n  }\n  _getRtlCorrection() {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  }\n  _getDateByOffset(offset, date) {\n    date = this._getDate(date ?? this.option(\"currentDate\"));\n    const currentDay = date.getDate();\n    const difference = dateUtils.getDifferenceInMonth(this.option(\"zoomLevel\")) * offset;\n    date.setDate(1);\n    date.setMonth(date.getMonth() + difference);\n    const lastDay = dateUtils.getLastMonthDate(date).getDate();\n    date.setDate(currentDay > lastDay ? lastDay : currentDay);\n    return date;\n  }\n  _focusTarget() {\n    return this._$viewsWrapper;\n  }\n  _focusEventTarget() {\n    return this.$element();\n  }\n  _initMarkup() {\n    this._renderSubmitElement();\n    const $element = this.$element();\n    $element.addClass(\"dx-calendar\");\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    $element.toggleClass(\"dx-calendar-range\", \"range\" === selectionMode);\n    this._renderBody();\n    $element.append(this.$body);\n    this._renderViews();\n    this._renderNavigator();\n    super._initMarkup();\n    this._renderEvents();\n    $element.prepend(this._navigator.$element());\n    this._renderSwipeable();\n    this._renderFooter();\n    this._selectionStrategy.updateAriaSelected();\n    this._updateAriaId();\n    this._updateNavigatorLabels();\n    this.setAria(\"role\", \"application\");\n    this._updateAriaLabelAndRole();\n    this._moveToClosestAvailableDate();\n  }\n  _render() {\n    super._render();\n    this._setViewContoured(this.option(\"currentDate\"));\n  }\n  _renderBody() {\n    if (!this._$viewsWrapper) {\n      this.$body = $(\"<div>\").addClass(\"dx-calendar-body\");\n      this._$viewsWrapper = $(\"<div>\").addClass(\"dx-calendar-views-wrapper\");\n      this.$body.append(this._$viewsWrapper);\n    }\n  }\n  _updateAriaLabelAndRole() {\n    const readOnly = this.option(\"readOnly\");\n    const $element = this.$element();\n    const aria = {\n      role: readOnly ? \"group\" : void 0,\n      label: readOnly ? messageLocalization.format(\"dxCalendar-readOnlyLabel\") : void 0\n    };\n    this.setAria(aria, $element);\n  }\n  _setAriaReadonly() {}\n  _getKeyboardListeners() {\n    return super._getKeyboardListeners().concat([this._view]);\n  }\n  _renderViews() {\n    const {\n      zoomLevel: zoomLevel\n    } = this.option();\n    this.$element().addClass(`dx-calendar-view-${zoomLevel}`);\n    const {\n      currentDate: currentDate,\n      viewsCount: viewsCount\n    } = this.option();\n    this.$element().toggleClass(\"dx-calendar-multiview\", viewsCount > 1);\n    this._view = this._renderSpecificView(currentDate);\n    if (hasWindow()) {\n      const beforeDate = this._getDateByOffset(-1, currentDate);\n      this._beforeView = this._isViewAvailable(beforeDate) ? this._renderSpecificView(beforeDate) : null;\n      const afterDate = this._getDateByOffset(viewsCount, currentDate);\n      afterDate.setDate(1);\n      this._afterView = this._isViewAvailable(afterDate) ? this._renderSpecificView(afterDate) : null;\n    }\n    if (viewsCount > 1) {\n      this._additionalView = this._renderSpecificView(this._getDateByOffset(1, currentDate));\n    }\n    this._translateViews();\n  }\n  _renderSpecificView(date) {\n    const {\n      zoomLevel: zoomLevel\n    } = this.option();\n    const specificView = Views[zoomLevel];\n    const $view = $(\"<div>\").appendTo(this._$viewsWrapper);\n    const config = this._viewConfig(date);\n    const view = this._createComponent($view, specificView, config);\n    return view;\n  }\n  _viewConfig(date) {\n    let disabledDates = this.option(\"disabledDates\");\n    disabledDates = isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this)) : disabledDates;\n    return _extends({}, this._selectionStrategy.getViewOptions(), {\n      date: date,\n      min: this._getMinDate(),\n      max: this._getMaxDate(),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\") ?? dateLocalization.firstDayOfWeekIndex(),\n      showWeekNumbers: this.option(\"showWeekNumbers\"),\n      selectWeekOnClick: this.option(\"selectWeekOnClick\"),\n      weekNumberRule: this.option(\"weekNumberRule\"),\n      zoomLevel: this.option(\"zoomLevel\"),\n      tabIndex: void 0,\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      disabledDates: disabledDates,\n      onCellClick: this._cellClickHandler.bind(this),\n      cellTemplate: this._getTemplateByOption(\"cellTemplate\"),\n      allowValueSelection: this._isMaxZoomLevel(),\n      _todayDate: this.option(\"_todayDate\")\n    });\n  }\n  _renderEvents() {\n    eventsEngine.off(this._$viewsWrapper, CALENDAR_DXHOVEREND_EVENT_NAME);\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    if (\"range\" === selectionMode) {\n      eventsEngine.on(this._$viewsWrapper, CALENDAR_DXHOVEREND_EVENT_NAME, null, () => {\n        this._updateViewsOption(\"hoveredRange\", []);\n      });\n    }\n  }\n  _injectComponent(func) {\n    const that = this;\n    return function (params) {\n      extend(params, {\n        component: that\n      });\n      return func(params);\n    };\n  }\n  _isViewAvailable(date) {\n    const zoomLevel = this.option(\"zoomLevel\");\n    const min = dateUtils.getViewMinBoundaryDate(zoomLevel, this._getMinDate());\n    const max = dateUtils.getViewMaxBoundaryDate(zoomLevel, this._getMaxDate());\n    return dateUtils.dateInRange(date, min, max);\n  }\n  _translateViews() {\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    move(this._view.$element(), {\n      left: 0,\n      top: 0\n    });\n    this._moveViewElement(this._beforeView, -1);\n    this._moveViewElement(this._afterView, viewsCount);\n    this._moveViewElement(this._additionalView, 1);\n  }\n  _moveViewElement(view, coefficient) {\n    view && move(view.$element(), {\n      left: this._getViewPosition(coefficient),\n      top: 0\n    });\n  }\n  _getViewPosition(coefficient) {\n    const rtlCorrection = this.option(\"rtlEnabled\") ? -1 : 1;\n    return 100 * coefficient * rtlCorrection + \"%\";\n  }\n  _cellClickHandler(e) {\n    const zoomLevel = this.option(\"zoomLevel\");\n    const nextView = dateUtils.getViewDown(zoomLevel);\n    const isMaxZoomLevel = this._isMaxZoomLevel();\n    if (nextView && !isMaxZoomLevel) {\n      this._navigateDown(e.event.currentTarget);\n    } else {\n      var _this$_cellClickActio;\n      const newValue = this._updateTimeComponent(e.value);\n      this._selectionStrategy.selectValue(newValue, e.event);\n      null === (_this$_cellClickActio = this._cellClickAction) || void 0 === _this$_cellClickActio || _this$_cellClickActio.call(this, e);\n    }\n  }\n  _updateTimeComponent(date) {\n    const result = new Date(date);\n    const currentValue = this._dateOption(\"value\");\n    if (currentValue && this._isSingleMode()) {\n      result.setHours(currentValue.getHours());\n      result.setMinutes(currentValue.getMinutes());\n      result.setSeconds(currentValue.getSeconds());\n      result.setMilliseconds(currentValue.getMilliseconds());\n    }\n    return result;\n  }\n  _isMaxZoomLevel() {\n    return this.option(\"zoomLevel\") === this.option(\"maxZoomLevel\");\n  }\n  _navigateDown(cell) {\n    const zoomLevel = this.option(\"zoomLevel\");\n    if (this._isMaxZoomLevel()) {\n      return;\n    }\n    const nextView = dateUtils.getViewDown(zoomLevel);\n    if (!nextView) {\n      return;\n    }\n    let newCurrentDate = this._view.option(\"contouredDate\") || this._view.option(\"date\");\n    if (cell) {\n      newCurrentDate = $(cell).data(\"dxDateValueKey\");\n    }\n    this._isOtherViewCellClicked = true;\n    this.option(\"currentDate\", newCurrentDate);\n    this.option(\"zoomLevel\", nextView);\n    this._isOtherViewCellClicked = false;\n    this._renderNavigator();\n    this._animateShowView();\n    this._moveToClosestAvailableDate();\n    this._setViewContoured(this._getNormalizedDate(this.option(\"currentDate\")));\n  }\n  _renderNavigator() {\n    if (!this._navigator) {\n      this._navigator = new Navigator($(\"<div>\"), this._navigatorConfig());\n    }\n    this._navigator.option(\"text\", this._getViewsCaption(this._view, this._additionalView));\n    this._updateButtonsVisibility();\n  }\n  _navigatorConfig() {\n    const {\n      focusStateEnabled: focusStateEnabled,\n      rtlEnabled: rtlEnabled\n    } = this.option();\n    return {\n      text: this._getViewsCaption(this._view, this._additionalView),\n      onClick: this._navigatorClickHandler.bind(this),\n      onCaptionClick: this._navigateUp.bind(this),\n      focusStateEnabled: focusStateEnabled,\n      rtlEnabled: rtlEnabled,\n      tabIndex: void 0\n    };\n  }\n  _navigatorClickHandler(e) {\n    const {\n      currentDate: currentDate,\n      viewsCount: viewsCount\n    } = this.option();\n    let offset = e.direction;\n    if (viewsCount > 1) {\n      const additionalViewActive = this._isAdditionalViewDate(currentDate);\n      const shouldDoubleOffset = additionalViewActive && offset < 0 || !additionalViewActive && offset > 0;\n      if (shouldDoubleOffset) {\n        offset *= 2;\n      }\n    }\n    const newCurrentDate = this._getDateByOffset(offset, currentDate);\n    this._moveToClosestAvailableDate(newCurrentDate);\n  }\n  _navigateUp() {\n    const zoomLevel = this.option(\"zoomLevel\");\n    const nextView = dateUtils.getViewUp(zoomLevel);\n    if (!nextView || this._isMinZoomLevel(zoomLevel)) {\n      return;\n    }\n    this.option(\"zoomLevel\", nextView);\n    this._renderNavigator();\n    this._animateShowView();\n    this._moveToClosestAvailableDate();\n    this._setViewContoured(this._getNormalizedDate(this.option(\"currentDate\")));\n  }\n  _isMinZoomLevel(zoomLevel) {\n    const min = this._getMinDate();\n    const max = this._getMaxDate();\n    return dateUtils.sameView(zoomLevel, min, max) || this.option(\"minZoomLevel\") === zoomLevel;\n  }\n  _updateButtonsVisibility() {\n    this._navigator.toggleButton(\"next\", !isDefined(this._afterView));\n    this._navigator.toggleButton(\"prev\", !isDefined(this._beforeView));\n  }\n  _renderSwipeable() {\n    if (!this._swipeable) {\n      this._swipeable = this._createComponent(this.$element(), Swipeable, {\n        onStart: this._swipeStartHandler.bind(this),\n        onUpdated: this._swipeUpdateHandler.bind(this),\n        onEnd: this._swipeEndHandler.bind(this),\n        itemSizeFunc: this._viewWidth.bind(this)\n      });\n    }\n  }\n  _swipeStartHandler(e) {\n    fx.stop(this._$viewsWrapper, true);\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    this._toggleGestureCoverCursor(\"grabbing\");\n    e.event.maxLeftOffset = this._getRequiredView(\"next\") ? 1 / viewsCount : 0;\n    e.event.maxRightOffset = this._getRequiredView(\"prev\") ? 1 / viewsCount : 0;\n  }\n  _toggleGestureCoverCursor(cursor) {\n    $(\".dx-gesture-cover\").css(\"cursor\", cursor);\n  }\n  _getRequiredView(name) {\n    let view;\n    const isRtl = this.option(\"rtlEnabled\");\n    if (\"next\" === name) {\n      view = isRtl ? this._beforeView : this._afterView;\n    } else if (\"prev\" === name) {\n      view = isRtl ? this._afterView : this._beforeView;\n    }\n    return view;\n  }\n  _swipeUpdateHandler(e) {\n    const {\n      offset: offset\n    } = e.event;\n    move(this._$viewsWrapper, {\n      left: offset * this._viewWidth(),\n      top: 0\n    });\n    this._updateNavigatorCaption(offset);\n  }\n  _swipeEndHandler(e) {\n    this._toggleGestureCoverCursor(\"auto\");\n    const {\n      currentDate: currentDate,\n      rtlEnabled: rtlEnabled\n    } = this.option();\n    const {\n      targetOffset: targetOffset\n    } = e.event;\n    const moveOffset = !targetOffset ? 0 : targetOffset / Math.abs(targetOffset);\n    const isAdditionalViewActive = this._isAdditionalViewDate(currentDate);\n    const shouldDoubleOffset = isAdditionalViewActive && (rtlEnabled ? -1 === moveOffset : 1 === moveOffset);\n    if (0 === moveOffset) {\n      this._animateWrapper(0, 250);\n      return;\n    }\n    const offset = -moveOffset * this._getRtlCorrection() * (shouldDoubleOffset ? 2 : 1);\n    let date = this._getDateByOffset(offset);\n    if (this._isDateInInvalidRange(date)) {\n      if (moveOffset >= 0) {\n        date = new Date(this._getMinDate());\n      } else {\n        date = new Date(this._getMaxDate());\n      }\n    }\n    this.option(\"currentDate\", date);\n  }\n  _viewWidth() {\n    if (!this._viewWidthValue) {\n      const {\n        viewsCount: viewsCount\n      } = this.option();\n      this._viewWidthValue = getWidth(this.$element()) / viewsCount;\n    }\n    return this._viewWidthValue;\n  }\n  _updateNavigatorCaption(offset) {\n    offset *= this._getRtlCorrection();\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    const isMultiView = viewsCount > 1;\n    let view;\n    let additionalView;\n    if (offset > .5 && this._beforeView) {\n      view = this._beforeView;\n      additionalView = isMultiView && this._view;\n    } else if (offset < -.5 && this._afterView) {\n      view = isMultiView ? this._additionalView : this._afterView;\n      additionalView = isMultiView ? this._afterView : null;\n    } else {\n      view = this._view;\n      additionalView = isMultiView ? this._additionalView : null;\n    }\n    this._navigator.option(\"text\", this._getViewsCaption(view, additionalView));\n  }\n  _getViewsCaption(view, additionalView) {\n    let caption = view.getNavigatorCaption();\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    if (viewsCount > 1 && additionalView) {\n      const additionalViewCaption = additionalView.getNavigatorCaption();\n      caption = `${caption} - ${additionalViewCaption}`;\n    }\n    return caption;\n  }\n  _isDateInInvalidRange(date) {\n    if (this._view.isBoundary(date)) {\n      return;\n    }\n    const min = this._getMinDate();\n    const max = this._getMaxDate();\n    const normalizedDate = dateUtils.normalizeDate(date, min, max);\n    return normalizedDate === min || normalizedDate === max;\n  }\n  _renderFooter() {\n    const showTodayButton = this.option(\"showTodayButton\");\n    if (showTodayButton) {\n      const $todayButton = this._createComponent($(\"<div>\"), Button, {\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        text: messageLocalization.format(\"dxCalendar-todayButtonText\"),\n        onClick: args => {\n          this._toTodayView(args);\n        },\n        type: isFluent() ? \"normal\" : \"default\",\n        stylingMode: isFluent() ? \"outlined\" : \"text\",\n        integrationOptions: {}\n      }).$element().addClass(\"dx-calendar-today-button\");\n      this._$footer = $(\"<div>\").addClass(\"dx-calendar-footer\").append($todayButton);\n      this.$element().append(this._$footer);\n    }\n    this.$element().toggleClass(\"dx-calendar-with-footer\", showTodayButton);\n  }\n  _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    this._setSubmitValue(this.option(\"value\"));\n  }\n  _setSubmitValue(value) {\n    const dateValue = this._convertToDate(value);\n    this._getSubmitElement().val(dateSerialization.serializeDate(dateValue, \"yyyy-MM-dd\"));\n  }\n  _getSubmitElement() {\n    return this._$submitElement;\n  }\n  _animateShowView() {\n    fx.stop(this._view.$element(), true);\n    this._popAnimationView(this._view, .6, 1, 250);\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    if (viewsCount > 1) {\n      fx.stop(this._additionalView.$element(), true);\n      this._popAnimationView(this._additionalView, .6, 1, 250);\n    }\n  }\n  _popAnimationView(view, from, to, duration) {\n    return fx.animate(view.$element(), {\n      type: \"pop\",\n      from: {\n        scale: from,\n        opacity: from\n      },\n      to: {\n        scale: to,\n        opacity: to\n      },\n      duration: duration\n    });\n  }\n  _navigate(offset, value) {\n    if (0 !== offset && 1 !== Math.abs(offset) && this._isViewAvailable(value)) {\n      const newView = this._renderSpecificView(value);\n      if (offset > 0) {\n        this._afterView && this._afterView.$element().remove();\n        this._afterView = newView;\n      } else {\n        this._beforeView && this._beforeView.$element().remove();\n        this._beforeView = newView;\n      }\n      this._translateViews();\n    }\n    const rtlCorrection = this._getRtlCorrection();\n    const offsetSign = offset > 0 ? 1 : offset < 0 ? -1 : 0;\n    const endPosition = -rtlCorrection * offsetSign * this._viewWidth();\n    const viewsWrapperPosition = this._$viewsWrapper.position().left;\n    if (viewsWrapperPosition !== endPosition) {\n      if (this._preventViewChangeAnimation) {\n        this._wrapperAnimationEndHandler(offset, value);\n      } else {\n        this._animateWrapper(endPosition, 250).done(this._wrapperAnimationEndHandler.bind(this, offset, value));\n      }\n    }\n  }\n  _animateWrapper(to, duration) {\n    return fx.animate(this._$viewsWrapper, {\n      type: \"slide\",\n      from: {\n        left: this._$viewsWrapper.position().left\n      },\n      to: {\n        left: to\n      },\n      duration: duration\n    });\n  }\n  _getDate(value) {\n    return new Date(value);\n  }\n  _toTodayView(args) {\n    const today = new Date();\n    if (this._isMaxZoomLevel()) {\n      this._selectionStrategy.selectValue(today, args.event);\n      return;\n    }\n    this._preventViewChangeAnimation = true;\n    this.option(\"zoomLevel\", this.option(\"maxZoomLevel\"));\n    this._selectionStrategy.selectValue(today, args.event);\n    this._animateShowView();\n    this._preventViewChangeAnimation = false;\n  }\n  _wrapperAnimationEndHandler(offset, newDate) {\n    this._rearrangeViews(offset);\n    this._translateViews();\n    this._resetLocation();\n    this._renderNavigator();\n    this._setViewContoured(newDate);\n    this._updateAriaId(newDate);\n    this._selectionStrategy.updateAriaSelected();\n  }\n  _rearrangeViews(offset) {\n    var _this$viewToRemoveKey;\n    if (0 === offset) {\n      return;\n    }\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    let viewOffset;\n    let viewToCreateKey;\n    let viewToRemoveKey;\n    let viewBeforeCreateKey;\n    let viewAfterRemoveKey;\n    if (offset < 0) {\n      viewOffset = 1;\n      viewToCreateKey = \"_beforeView\";\n      viewToRemoveKey = \"_afterView\";\n      viewBeforeCreateKey = \"_view\";\n      viewAfterRemoveKey = 1 === viewsCount ? \"_view\" : \"_additionalView\";\n    } else {\n      viewOffset = -1;\n      viewToCreateKey = \"_afterView\";\n      viewToRemoveKey = \"_beforeView\";\n      viewBeforeCreateKey = 1 === viewsCount ? \"_view\" : \"_additionalView\";\n      viewAfterRemoveKey = \"_view\";\n    }\n    if (!this[viewToCreateKey]) {\n      return;\n    }\n    const destinationDate = this[viewToCreateKey].option(\"date\");\n    null === (_this$viewToRemoveKey = this[viewToRemoveKey]) || void 0 === _this$viewToRemoveKey || _this$viewToRemoveKey.$element().remove();\n    this[viewToRemoveKey] = this._renderSpecificView(this._getDateByOffset(viewOffset * viewsCount, destinationDate));\n    this[viewAfterRemoveKey].$element().remove();\n    if (1 === viewsCount) {\n      this[viewAfterRemoveKey] = this[viewToCreateKey];\n    } else {\n      this[viewAfterRemoveKey] = this[viewBeforeCreateKey];\n      this[viewBeforeCreateKey] = this[viewToCreateKey];\n    }\n    const dateByOffset = this._getDateByOffset(-viewOffset, destinationDate);\n    this[viewToCreateKey] = this._isViewAvailable(dateByOffset) ? this._renderSpecificView(dateByOffset) : null;\n  }\n  _resetLocation() {\n    move(this._$viewsWrapper, {\n      left: 0,\n      top: 0\n    });\n  }\n  _clean() {\n    super._clean();\n    this._clearViewWidthCache();\n    delete this._$viewsWrapper;\n    delete this._navigator;\n    delete this._$footer;\n  }\n  _clearViewWidthCache() {\n    delete this._viewWidthValue;\n  }\n  _disposeViews() {\n    var _this$_beforeView, _this$_additionalView2, _this$_afterView;\n    this._view.$element().remove();\n    null === (_this$_beforeView = this._beforeView) || void 0 === _this$_beforeView || _this$_beforeView.$element().remove();\n    null === (_this$_additionalView2 = this._additionalView) || void 0 === _this$_additionalView2 || _this$_additionalView2.$element().remove();\n    null === (_this$_afterView = this._afterView) || void 0 === _this$_afterView || _this$_afterView.$element().remove();\n    delete this._view;\n    delete this._additionalView;\n    delete this._beforeView;\n    delete this._afterView;\n    delete this._skipNavigate;\n  }\n  _dispose() {\n    clearTimeout(this._waitRenderViewTimeout);\n    super._dispose();\n  }\n  _refreshViews() {\n    this._resetActiveState();\n    this._disposeViews();\n    this._renderViews();\n  }\n  _visibilityChanged() {\n    this._translateViews();\n  }\n  _shouldSkipFocusEvent(event) {\n    const {\n      target: target,\n      relatedTarget: relatedTarget\n    } = event;\n    return $(target).parents(\".dx-calendar\").length && $(relatedTarget).parents(\".dx-calendar\").length;\n  }\n  _focusInHandler(event) {\n    if ($(event.target).is(this._$viewsWrapper)) {\n      this._setViewContoured(this.option(\"currentDate\"));\n    }\n    if (this._shouldSkipFocusEvent(event)) {\n      return;\n    }\n    super._focusInHandler.apply(this, arguments);\n    this._toggleFocusClass(true, this.$element());\n  }\n  _focusOutHandler(event) {\n    if ($(event.target).is(this._$viewsWrapper)) {\n      var _this$_additionalView3;\n      this._view.option(\"contouredDate\", null);\n      null === (_this$_additionalView3 = this._additionalView) || void 0 === _this$_additionalView3 || _this$_additionalView3.option(\"contouredDate\", null);\n    }\n    if (this._shouldSkipFocusEvent(event)) {\n      return;\n    }\n    super._focusOutHandler.apply(this, arguments);\n    this._toggleFocusClass(false, this.$element());\n  }\n  _updateViewsOption(optionName, newValue) {\n    var _this$_additionalView4, _this$_beforeView2, _this$_afterView2;\n    this._view.option(optionName, newValue);\n    null === (_this$_additionalView4 = this._additionalView) || void 0 === _this$_additionalView4 || _this$_additionalView4.option(optionName, newValue);\n    null === (_this$_beforeView2 = this._beforeView) || void 0 === _this$_beforeView2 || _this$_beforeView2.option(optionName, newValue);\n    null === (_this$_afterView2 = this._afterView) || void 0 === _this$_afterView2 || _this$_afterView2.option(optionName, newValue);\n  }\n  _setViewsMinOption(min) {\n    this._restoreViewsMinMaxOptions();\n    this.option(\"_rangeMin\", this._convertToDate(min));\n    this._updateViewsOption(\"min\", this._getMinDate());\n  }\n  _setViewsMaxOption(max) {\n    this._restoreViewsMinMaxOptions();\n    this.option(\"_rangeMax\", this._convertToDate(max));\n    this._updateViewsOption(\"max\", this._getMaxDate());\n  }\n  _restoreViewsMinMaxOptions() {\n    this._resetActiveState();\n    this.option({\n      _rangeMin: null,\n      _rangeMax: null\n    });\n    this._updateViewsOption(\"min\", this._getMinDate());\n    this._updateViewsOption(\"max\", this._getMaxDate());\n  }\n  _updateNavigatorLabels() {\n    let {\n      zoomLevel: zoomLevel\n    } = this.option();\n    zoomLevel = zoomLevel.charAt(0).toUpperCase() + zoomLevel.slice(1);\n    const captionButtonText = this._navigator._caption.option(\"text\");\n    const localizedPrevButtonLabel = messageLocalization.format(`dxCalendar-previous${zoomLevel}ButtonLabel`);\n    const localizedCaptionLabel = messageLocalization.format(`dxCalendar-caption${zoomLevel}Label`);\n    const localizedNextButtonLabel = messageLocalization.format(`dxCalendar-next${zoomLevel}ButtonLabel`);\n    this.setAria(\"label\", localizedPrevButtonLabel, this._navigator._prevButton.$element());\n    this.setAria(\"label\", `${captionButtonText}. ${localizedCaptionLabel}`, this._navigator._caption.$element());\n    this.setAria(\"label\", localizedNextButtonLabel, this._navigator._nextButton.$element());\n  }\n  _updateAriaSelected(value, previousValue) {\n    previousValue.forEach(item => {\n      this.setAria(\"selected\", false, this._view._getCellByDate(item));\n    });\n    value.forEach(item => {\n      this.setAria(\"selected\", true, this._view._getCellByDate(item));\n    });\n    const {\n      viewsCount: viewsCount\n    } = this.option();\n    if (viewsCount > 1) {\n      previousValue.forEach(item => {\n        this.setAria(\"selected\", false, this._additionalView._getCellByDate(item));\n      });\n      value.forEach(item => {\n        this.setAria(\"selected\", true, this._additionalView._getCellByDate(item));\n      });\n    }\n  }\n  _updateAriaId(value) {\n    var _this$_onContouredCha;\n    value = value ?? this.option(\"currentDate\");\n    const ariaId = `dx-${new Guid()}`;\n    const view = this._getActiveView(value);\n    const $newCell = view._getCellByDate(value);\n    this.setAria(\"id\", ariaId, $newCell);\n    this.setAria(\"activedescendant\", ariaId);\n    null === (_this$_onContouredCha = this._onContouredChanged) || void 0 === _this$_onContouredCha || _this$_onContouredCha.call(this, ariaId);\n  }\n  _suppressingNavigation(callback, args) {\n    this._suppressNavigation = true;\n    callback.apply(this, args);\n    delete this._suppressNavigation;\n  }\n  _optionChanged(args) {\n    const {\n      value: value,\n      previousValue: previousValue\n    } = args;\n    switch (args.name) {\n      case \"width\":\n        super._optionChanged(args);\n        this._clearViewWidthCache();\n        break;\n      case \"min\":\n      case \"max\":\n        this.min = void 0;\n        this.max = void 0;\n        this._suppressingNavigation(this._updateCurrentDate, [this.option(\"currentDate\")]);\n        this._refreshViews();\n        this._renderNavigator();\n        break;\n      case \"selectionMode\":\n        this._refreshSelectionStrategy();\n        this._initCurrentDate();\n        break;\n      case \"selectWeekOnClick\":\n      case \"_todayDate\":\n      case \"showWeekNumbers\":\n      case \"weekNumberRule\":\n        this._refreshViews();\n        break;\n      case \"firstDayOfWeek\":\n        this._refreshViews();\n        this._updateButtonsVisibility();\n        break;\n      case \"focusStateEnabled\":\n      case \"disabledDates\":\n      case \"dateSerializationFormat\":\n      case \"cellTemplate\":\n      case \"showTodayButton\":\n        this._invalidate();\n        break;\n      case \"currentDate\":\n        this.setAria(\"id\", void 0, this._view._getCellByDate(previousValue));\n        this._updateCurrentDate(value);\n        break;\n      case \"zoomLevel\":\n        this.$element().removeClass(`dx-calendar-view-${previousValue}`);\n        this._correctZoomLevel();\n        this._refreshViews();\n        this._renderNavigator();\n        this._updateAriaId();\n        this._updateNavigatorLabels();\n        break;\n      case \"minZoomLevel\":\n      case \"maxZoomLevel\":\n        this._correctZoomLevel();\n        this._updateButtonsVisibility();\n        break;\n      case \"value\":\n        {\n          const isSameValue = dateUtils.sameDatesArrays(value, previousValue);\n          if (!isSameValue) {\n            this._selectionStrategy.processValueChanged(value, previousValue);\n          }\n          this._setSubmitValue(value);\n          super._optionChanged(args);\n          break;\n        }\n      case \"viewsCount\":\n        this._refreshViews();\n        this._renderNavigator();\n        break;\n      case \"onCellClick\":\n        this._view.option(\"onCellClick\", value);\n        break;\n      case \"onContouredChanged\":\n        this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\n        break;\n      case \"readOnly\":\n        super._optionChanged(args);\n        this._updateAriaLabelAndRole();\n        break;\n      case \"skipFocusCheck\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  getContouredDate() {\n    const {\n      contouredDate: contouredDate\n    } = this._view.option();\n    return contouredDate;\n  }\n}\nregisterComponent(\"dxCalendar\", Calendar);\nexport default Calendar;","map":{"version":3,"names":["_extends","fx","move","eventsEngine","Swipeable","end","hoverEndEventName","addNamespace","isCommandKeyPressed","dateLocalization","messageLocalization","registerComponent","devices","Guid","$","FunctionTemplate","dateUtils","dateSerialization","extend","inRange","getWidth","isDefined","isFunction","isNumeric","isString","hasWindow","Button","isFluent","Editor","CalendarMultipleSelectionStrategy","Navigator","CalendarRangeSelectionStrategy","CalendarSingleSelectionStrategy","Views","CALENDAR_CLASS","CALENDAR_BODY_CLASS","CALENDAR_CELL_CLASS","CALENDAR_FOOTER_CLASS","CALENDAR_TODAY_BUTTON_CLASS","CALENDAR_HAS_FOOTER_CLASS","CALENDAR_VIEWS_WRAPPER_CLASS","CALENDAR_VIEW_CLASS","CALENDAR_MULTIVIEW_CLASS","CALENDAR_RANGE_CLASS","GESTURE_COVER_CLASS","ANIMATION_DURATION_SHOW_VIEW","POP_ANIMATION_FROM","POP_ANIMATION_TO","CALENDAR_INPUT_STANDARD_PATTERN","CALENDAR_DATE_VALUE_KEY","CALENDAR_DXHOVEREND_EVENT_NAME","LEVEL_COMPARE_MAP","month","year","decade","century","ZOOM_LEVEL","MONTH","YEAR","DECADE","CENTURY","SELECTION_STRATEGIES","SingleSelection","MultipleSelection","RangeSelection","Calendar","_getDefaultOptions","hoverStateEnabled","activeStateEnabled","currentDate","Date","value","min","max","viewsCount","zoomLevel","maxZoomLevel","minZoomLevel","selectionMode","selectWeekOnClick","showTodayButton","showWeekNumbers","weekNumberRule","cellTemplate","disabledDates","onCellClick","onContouredChanged","skipFocusCheck","_todayDate","_defaultOptionsRules","concat","device","real","deviceType","isSimulator","options","focusStateEnabled","_supportedKeys","rightArrow","e","preventDefault","_waitRenderView","_moveCurrentDateByOffset","_getRtlCorrection","leftArrow","upArrow","_navigateUp","isAnimating","_view","$element","option","downArrow","_navigateDown","home","_dateOption","isDateDisabled","date","sameView","getViewFirstCellDate","_moveToClosestAvailableDate","getViewLastCellDate","pageUp","pageDown","tab","enter","_enterKeyHandler","_isMaxZoomLevel","_updateTimeComponent","_selectionStrategy","selectValue","_getSerializationFormat","optionName","getDateSerializationFormat","_convertToDate","deserializeDate","_dateValue","event","type","cellElement","_getContouredCell","get","target","_saveValueChangeEvent","optionValue","isArray","_isSingleMode","arguments","length","map","serializationFormat","serializedValue","serializeDate","_shiftDate","offset","reverse","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","baseDate","maxDate","_getMaxDate","minDate","_getMinDate","isDateForwardInNeighborView","_areDatesInNeighborView","isDateForwardInRange","dateForward","direction","isViewDisabled","_isNextViewDisabled","_isPrevViewDisabled","_skipNavigate","_navigator","_nextButton","_prevButton","_areDatesInSameView","date1","date2","getYear","parseInt","a","b","abs","Math","isCurrentDateAvailable","_isDateNotAvailable","isDateForwardAvailable","isDateBackwardAvailable","isDateForwardInStartView","isDateBackwardInStartView","dateBackward","_init","_activeStateUnit","_initSelectionStrategy","_correctZoomLevel","_initCurrentDate","_initActions","strategyName","_getSelectionStrategyName","strategy","NAME","_refreshSelectionStrategy","restoreValue","_refresh","_getNormalizedDate","getDefaultCurrentDate","normalizeDate","_getDate","_cellClickAction","_createActionByOption","_onContouredChanged","_initTemplates","_templateManager","addDefaultTemplates","cell","data","model","container","append","text","String","_updateCurrentDate","_$viewsWrapper","stop","normalizedDate","getTime","_getViewsOffset","_isOtherViewCellClicked","_suppressNavigation","_additionalView","_refreshViews","_setViewContoured","_updateAriaId","_renderNavigator","_navigate","_isAdditionalViewDate","_getFirstAvailableDate","_getActiveView","is","_this$_additionalView","view","_rangeMin","_rangeMax","startDate","endDate","_getMonthsOffset","zoomCorrection","yearOffset","monthOffset","_alreadyViewRender","_getDateByOffset","_waitRenderViewTimeout","setTimeout","currentDay","difference","getDifferenceInMonth","lastDay","getLastMonthDate","_focusTarget","_focusEventTarget","_initMarkup","_renderSubmitElement","addClass","toggleClass","_renderBody","$body","_renderViews","_renderEvents","prepend","_renderSwipeable","_renderFooter","updateAriaSelected","_updateNavigatorLabels","setAria","_updateAriaLabelAndRole","_render","readOnly","aria","role","label","format","_setAriaReadonly","_getKeyboardListeners","_renderSpecificView","beforeDate","_beforeView","_isViewAvailable","afterDate","_afterView","_translateViews","specificView","$view","appendTo","config","_viewConfig","_createComponent","_injectComponent","bind","getViewOptions","firstDayOfWeek","firstDayOfWeekIndex","tabIndex","_cellClickHandler","_getTemplateByOption","allowValueSelection","off","on","_updateViewsOption","func","that","params","component","getViewMinBoundaryDate","getViewMaxBoundaryDate","dateInRange","left","top","_moveViewElement","coefficient","_getViewPosition","rtlCorrection","nextView","getViewDown","isMaxZoomLevel","currentTarget","_this$_cellClickActio","newValue","call","result","currentValue","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","newCurrentDate","_animateShowView","_navigatorConfig","_getViewsCaption","_updateButtonsVisibility","rtlEnabled","onClick","_navigatorClickHandler","onCaptionClick","additionalViewActive","shouldDoubleOffset","getViewUp","_isMinZoomLevel","toggleButton","_swipeable","onStart","_swipeStartHandler","onUpdated","_swipeUpdateHandler","onEnd","_swipeEndHandler","itemSizeFunc","_viewWidth","_toggleGestureCoverCursor","maxLeftOffset","_getRequiredView","maxRightOffset","cursor","css","name","isRtl","_updateNavigatorCaption","targetOffset","moveOffset","isAdditionalViewActive","_animateWrapper","_isDateInInvalidRange","_viewWidthValue","isMultiView","additionalView","caption","getNavigatorCaption","additionalViewCaption","isBoundary","$todayButton","args","_toTodayView","stylingMode","integrationOptions","_$footer","_$submitElement","attr","_setSubmitValue","dateValue","_getSubmitElement","val","_popAnimationView","from","to","duration","animate","scale","opacity","newView","remove","offsetSign","endPosition","viewsWrapperPosition","position","_preventViewChangeAnimation","_wrapperAnimationEndHandler","done","today","newDate","_rearrangeViews","_resetLocation","_this$viewToRemoveKey","viewOffset","viewToCreateKey","viewToRemoveKey","viewBeforeCreateKey","viewAfterRemoveKey","destinationDate","dateByOffset","_clean","_clearViewWidthCache","_disposeViews","_this$_beforeView","_this$_additionalView2","_this$_afterView","_dispose","clearTimeout","_resetActiveState","_visibilityChanged","_shouldSkipFocusEvent","relatedTarget","parents","_focusInHandler","apply","_toggleFocusClass","_focusOutHandler","_this$_additionalView3","_this$_additionalView4","_this$_beforeView2","_this$_afterView2","_setViewsMinOption","_restoreViewsMinMaxOptions","_setViewsMaxOption","charAt","toUpperCase","slice","captionButtonText","_caption","localizedPrevButtonLabel","localizedCaptionLabel","localizedNextButtonLabel","_updateAriaSelected","previousValue","forEach","item","_getCellByDate","_this$_onContouredCha","ariaId","$newCell","_suppressingNavigation","callback","_optionChanged","_invalidate","removeClass","isSameValue","sameDatesArrays","processValueChanged","getContouredDate","contouredDate"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/calendar/m_calendar.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/calendar/m_calendar.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    fx\r\n} from \"../../../common/core/animation\";\r\nimport {\r\n    move\r\n} from \"../../../common/core/animation/translator\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport Swipeable from \"../../../common/core/events/gesture/swipeable\";\r\nimport {\r\n    end as hoverEndEventName\r\n} from \"../../../common/core/events/hover\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../../common/core/events/utils/index\";\r\nimport dateLocalization from \"../../../common/core/localization/date\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport devices from \"../../../core/devices\";\r\nimport Guid from \"../../../core/guid\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    FunctionTemplate\r\n} from \"../../../core/templates/function_template\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport dateSerialization from \"../../../core/utils/date_serialization\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    inRange\r\n} from \"../../../core/utils/math\";\r\nimport {\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isNumeric,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport Button from \"../../../ui/button\";\r\nimport {\r\n    isFluent\r\n} from \"../../../ui/themes\";\r\nimport Editor from \"../../ui/editor/editor\";\r\nimport CalendarMultipleSelectionStrategy from \"./m_calendar.multiple.selection.strategy\";\r\nimport Navigator from \"./m_calendar.navigator\";\r\nimport CalendarRangeSelectionStrategy from \"./m_calendar.range.selection.strategy\";\r\nimport CalendarSingleSelectionStrategy from \"./m_calendar.single.selection.strategy\";\r\nimport Views from \"./m_calendar.views\";\r\nconst CALENDAR_CLASS = \"dx-calendar\";\r\nconst CALENDAR_BODY_CLASS = \"dx-calendar-body\";\r\nconst CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\r\nconst CALENDAR_FOOTER_CLASS = \"dx-calendar-footer\";\r\nconst CALENDAR_TODAY_BUTTON_CLASS = \"dx-calendar-today-button\";\r\nconst CALENDAR_HAS_FOOTER_CLASS = \"dx-calendar-with-footer\";\r\nconst CALENDAR_VIEWS_WRAPPER_CLASS = \"dx-calendar-views-wrapper\";\r\nconst CALENDAR_VIEW_CLASS = \"dx-calendar-view\";\r\nconst CALENDAR_MULTIVIEW_CLASS = \"dx-calendar-multiview\";\r\nconst CALENDAR_RANGE_CLASS = \"dx-calendar-range\";\r\nconst GESTURE_COVER_CLASS = \"dx-gesture-cover\";\r\nconst ANIMATION_DURATION_SHOW_VIEW = 250;\r\nconst POP_ANIMATION_FROM = .6;\r\nconst POP_ANIMATION_TO = 1;\r\nconst CALENDAR_INPUT_STANDARD_PATTERN = \"yyyy-MM-dd\";\r\nconst CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\r\nconst CALENDAR_DXHOVEREND_EVENT_NAME = addNamespace(hoverEndEventName, \"dxCalendar\");\r\nconst LEVEL_COMPARE_MAP = {\r\n    month: 3,\r\n    year: 2,\r\n    decade: 1,\r\n    century: 0\r\n};\r\nconst ZOOM_LEVEL = {\r\n    MONTH: \"month\",\r\n    YEAR: \"year\",\r\n    DECADE: \"decade\",\r\n    CENTURY: \"century\"\r\n};\r\nconst SELECTION_STRATEGIES = {\r\n    SingleSelection: CalendarSingleSelectionStrategy,\r\n    MultipleSelection: CalendarMultipleSelectionStrategy,\r\n    RangeSelection: CalendarRangeSelectionStrategy\r\n};\r\nclass Calendar extends Editor {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            hoverStateEnabled: true,\r\n            activeStateEnabled: true,\r\n            currentDate: new Date,\r\n            value: null,\r\n            min: new Date(1e3, 0),\r\n            max: new Date(3e3, 0),\r\n            viewsCount: 1,\r\n            zoomLevel: ZOOM_LEVEL.MONTH,\r\n            maxZoomLevel: ZOOM_LEVEL.MONTH,\r\n            minZoomLevel: ZOOM_LEVEL.CENTURY,\r\n            selectionMode: \"single\",\r\n            selectWeekOnClick: true,\r\n            showTodayButton: false,\r\n            showWeekNumbers: false,\r\n            weekNumberRule: \"auto\",\r\n            cellTemplate: \"cell\",\r\n            disabledDates: null,\r\n            onCellClick: null,\r\n            onContouredChanged: null,\r\n            skipFocusCheck: false,\r\n            _todayDate: () => new Date\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }])\r\n    }\r\n    _supportedKeys() {\r\n        return _extends({}, super._supportedKeys(), {\r\n            rightArrow(e) {\r\n                e.preventDefault();\r\n                if (isCommandKeyPressed(e)) {\r\n                    this._waitRenderView(1)\r\n                } else {\r\n                    this._moveCurrentDateByOffset(1 * this._getRtlCorrection())\r\n                }\r\n            },\r\n            leftArrow(e) {\r\n                e.preventDefault();\r\n                if (isCommandKeyPressed(e)) {\r\n                    this._waitRenderView(-1)\r\n                } else {\r\n                    this._moveCurrentDateByOffset(-1 * this._getRtlCorrection())\r\n                }\r\n            },\r\n            upArrow(e) {\r\n                e.preventDefault();\r\n                if (isCommandKeyPressed(e)) {\r\n                    this._navigateUp()\r\n                } else {\r\n                    if (fx.isAnimating(this._view.$element())) {\r\n                        return\r\n                    }\r\n                    this._moveCurrentDateByOffset(-1 * this._view.option(\"colCount\"))\r\n                }\r\n            },\r\n            downArrow(e) {\r\n                e.preventDefault();\r\n                if (isCommandKeyPressed(e)) {\r\n                    this._navigateDown()\r\n                } else {\r\n                    if (fx.isAnimating(this._view.$element())) {\r\n                        return\r\n                    }\r\n                    this._moveCurrentDateByOffset(1 * this._view.option(\"colCount\"))\r\n                }\r\n            },\r\n            home(e) {\r\n                e.preventDefault();\r\n                const zoomLevel = this.option(\"zoomLevel\");\r\n                const currentDate = this.option(\"currentDate\");\r\n                const min = this._dateOption(\"min\");\r\n                if (this._view.isDateDisabled(currentDate)) {\r\n                    return\r\n                }\r\n                const date = dateUtils.sameView(zoomLevel, currentDate, min) ? min : dateUtils.getViewFirstCellDate(zoomLevel, currentDate);\r\n                this._moveToClosestAvailableDate(date)\r\n            },\r\n            end(e) {\r\n                e.preventDefault();\r\n                const zoomLevel = this.option(\"zoomLevel\");\r\n                const currentDate = this.option(\"currentDate\");\r\n                const max = this._dateOption(\"max\");\r\n                if (this._view.isDateDisabled(currentDate)) {\r\n                    return\r\n                }\r\n                const date = dateUtils.sameView(zoomLevel, currentDate, max) ? max : dateUtils.getViewLastCellDate(zoomLevel, currentDate);\r\n                this._moveToClosestAvailableDate(date)\r\n            },\r\n            pageUp(e) {\r\n                e.preventDefault();\r\n                this._waitRenderView(-1 * this._getRtlCorrection())\r\n            },\r\n            pageDown(e) {\r\n                e.preventDefault();\r\n                this._waitRenderView(1 * this._getRtlCorrection())\r\n            },\r\n            tab() {},\r\n            enter: this._enterKeyHandler\r\n        })\r\n    }\r\n    _enterKeyHandler(e) {\r\n        if (!this._isMaxZoomLevel()) {\r\n            this._navigateDown()\r\n        } else if (!this._view.isDateDisabled(this.option(\"currentDate\"))) {\r\n            const value = this._updateTimeComponent(this.option(\"currentDate\"));\r\n            this._selectionStrategy.selectValue(value, e)\r\n        }\r\n    }\r\n    _getSerializationFormat(optionName) {\r\n        const value = this.option(optionName || \"value\");\r\n        if (this.option(\"dateSerializationFormat\")) {\r\n            return this.option(\"dateSerializationFormat\")\r\n        }\r\n        if (isNumeric(value)) {\r\n            return \"number\"\r\n        }\r\n        if (!isString(value)) {\r\n            return\r\n        }\r\n        return dateSerialization.getDateSerializationFormat(value)\r\n    }\r\n    _convertToDate(value) {\r\n        return dateSerialization.deserializeDate(value)\r\n    }\r\n    _dateValue(value, event) {\r\n        if (event) {\r\n            if (\"keydown\" === event.type) {\r\n                const cellElement = this._view._getContouredCell().get(0);\r\n                event.target = cellElement\r\n            }\r\n            this._saveValueChangeEvent(event)\r\n        }\r\n        this._dateOption(\"value\", value)\r\n    }\r\n    _dateOption(optionName, optionValue) {\r\n        const isArray = \"value\" === optionName && !this._isSingleMode();\r\n        const value = this.option(\"value\");\r\n        if (1 === arguments.length) {\r\n            return isArray ? (value ?? []).map((value => this._convertToDate(value))) : this._convertToDate(this.option(optionName))\r\n        }\r\n        const serializationFormat = this._getSerializationFormat(optionName);\r\n        const serializedValue = isArray ? (null === optionValue || void 0 === optionValue ? void 0 : optionValue.map((value => dateSerialization.serializeDate(value, serializationFormat)))) || [] : dateSerialization.serializeDate(optionValue, serializationFormat);\r\n        this.option(optionName, serializedValue)\r\n    }\r\n    _isSingleMode() {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        return \"single\" === selectionMode\r\n    }\r\n    _shiftDate(zoomLevel, date, offset, reverse) {\r\n        switch (zoomLevel) {\r\n            case ZOOM_LEVEL.MONTH:\r\n                date.setDate(date.getDate() + offset * reverse);\r\n                break;\r\n            case ZOOM_LEVEL.YEAR:\r\n                date.setMonth(date.getMonth() + offset * reverse);\r\n                break;\r\n            case ZOOM_LEVEL.DECADE:\r\n                date.setFullYear(date.getFullYear() + offset * reverse);\r\n                break;\r\n            case ZOOM_LEVEL.CENTURY:\r\n                date.setFullYear(date.getFullYear() + 10 * offset * reverse)\r\n        }\r\n    }\r\n    _moveCurrentDateByOffset(offset) {\r\n        const baseDate = this.option(\"currentDate\");\r\n        let currentDate = new Date(baseDate);\r\n        const zoomLevel = this.option(\"zoomLevel\");\r\n        this._shiftDate(zoomLevel, currentDate, offset, 1);\r\n        const maxDate = this._getMaxDate();\r\n        const minDate = this._getMinDate();\r\n        let isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, currentDate, baseDate);\r\n        let isDateForwardInRange = inRange(currentDate, minDate, maxDate) && isDateForwardInNeighborView;\r\n        const dateForward = new Date(currentDate);\r\n        while (isDateForwardInRange) {\r\n            if (!this._view.isDateDisabled(dateForward)) {\r\n                currentDate = dateForward;\r\n                break\r\n            }\r\n            this._shiftDate(zoomLevel, dateForward, offset, 1);\r\n            isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, dateForward, baseDate);\r\n            isDateForwardInRange = inRange(dateForward, minDate, maxDate) && isDateForwardInNeighborView\r\n        }\r\n        if (this._view.isDateDisabled(baseDate) || this._view.isDateDisabled(currentDate)) {\r\n            const direction = offset > 0 ? 1 : -1;\r\n            const isViewDisabled = 1 === direction ? this._isNextViewDisabled() : this._isPrevViewDisabled();\r\n            if (!isViewDisabled) {\r\n                this._waitRenderView(direction)\r\n            } else {\r\n                this._moveToClosestAvailableDate(currentDate)\r\n            }\r\n        } else {\r\n            this._skipNavigate = true;\r\n            this.option(\"currentDate\", currentDate)\r\n        }\r\n    }\r\n    _isNextViewDisabled() {\r\n        return this._navigator._nextButton.option(\"disabled\")\r\n    }\r\n    _isPrevViewDisabled() {\r\n        return this._navigator._prevButton.option(\"disabled\")\r\n    }\r\n    _areDatesInSameView(zoomLevel, date1, date2) {\r\n        switch (zoomLevel) {\r\n            case ZOOM_LEVEL.MONTH:\r\n                return date1.getMonth() === date2.getMonth();\r\n            case ZOOM_LEVEL.YEAR:\r\n                return date1.getYear() === date2.getYear();\r\n            case ZOOM_LEVEL.DECADE:\r\n                return parseInt(date1.getYear() / 10) === parseInt(date2.getYear() / 10);\r\n            case ZOOM_LEVEL.CENTURY:\r\n                return parseInt(date1.getYear() / 100) === parseInt(date2.getYear() / 100)\r\n        }\r\n    }\r\n    _areDatesInNeighborView(zoomLevel, date1, date2) {\r\n        switch (zoomLevel) {\r\n            case ZOOM_LEVEL.MONTH:\r\n                return ((a, b) => {\r\n                    const abs = Math.abs(a - b);\r\n                    return Math.min(abs, 12 - abs)\r\n                })(date1.getMonth(), date2.getMonth()) <= 1;\r\n            case ZOOM_LEVEL.YEAR:\r\n                return Math.abs(date1.getYear() - date2.getYear()) <= 1;\r\n            case ZOOM_LEVEL.DECADE:\r\n                return Math.abs(date1.getYear() - date2.getYear()) <= 10;\r\n            case ZOOM_LEVEL.CENTURY:\r\n                return Math.abs(date1.getYear() - date2.getYear()) <= 100\r\n        }\r\n    }\r\n    _moveToClosestAvailableDate() {\r\n        let baseDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.option(\"currentDate\");\r\n        let currentDate = new Date(baseDate);\r\n        const zoomLevel = this.option(\"zoomLevel\");\r\n        const isCurrentDateAvailable = !this._isDateNotAvailable(currentDate);\r\n        let isDateForwardAvailable = isCurrentDateAvailable;\r\n        let isDateBackwardAvailable = isCurrentDateAvailable;\r\n        let isDateForwardInStartView;\r\n        let isDateBackwardInStartView;\r\n        const dateForward = new Date(currentDate);\r\n        const dateBackward = new Date(currentDate);\r\n        do {\r\n            if (isDateForwardAvailable) {\r\n                currentDate = dateForward;\r\n                break\r\n            }\r\n            if (isDateBackwardAvailable) {\r\n                currentDate = dateBackward;\r\n                break\r\n            }\r\n            this._shiftDate(zoomLevel, dateForward, 1, 1);\r\n            this._shiftDate(zoomLevel, dateBackward, 1, -1);\r\n            isDateForwardInStartView = this._areDatesInSameView(zoomLevel, dateForward, baseDate);\r\n            isDateBackwardInStartView = this._areDatesInSameView(zoomLevel, dateBackward, baseDate);\r\n            isDateForwardAvailable = isDateForwardInStartView && !this._isDateNotAvailable(dateForward);\r\n            isDateBackwardAvailable = isDateBackwardInStartView && !this._isDateNotAvailable(dateBackward)\r\n        } while (isDateForwardInStartView || isDateBackwardInStartView);\r\n        this.option(\"currentDate\", currentDate)\r\n    }\r\n    _isDateNotAvailable(date) {\r\n        const maxDate = this._getMaxDate();\r\n        const minDate = this._getMinDate();\r\n        return !inRange(date, minDate, maxDate) || this._view.isDateDisabled(date)\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._activeStateUnit = \".dx-calendar-cell\";\r\n        this._initSelectionStrategy();\r\n        this._correctZoomLevel();\r\n        this._initCurrentDate();\r\n        this._initActions()\r\n    }\r\n    _initSelectionStrategy() {\r\n        const strategyName = this._getSelectionStrategyName();\r\n        const strategy = SELECTION_STRATEGIES[strategyName];\r\n        if (!this._selectionStrategy || this._selectionStrategy.NAME !== strategyName) {\r\n            this._selectionStrategy = new strategy(this)\r\n        }\r\n    }\r\n    _refreshSelectionStrategy() {\r\n        this._initSelectionStrategy();\r\n        this._selectionStrategy.restoreValue();\r\n        this._refresh()\r\n    }\r\n    _getSelectionStrategyName() {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        switch (selectionMode) {\r\n            case \"multiple\":\r\n                return \"MultipleSelection\";\r\n            case \"range\":\r\n                return \"RangeSelection\";\r\n            default:\r\n                return \"SingleSelection\"\r\n        }\r\n    }\r\n    _correctZoomLevel() {\r\n        const {\r\n            minZoomLevel: minZoomLevel,\r\n            maxZoomLevel: maxZoomLevel,\r\n            zoomLevel: zoomLevel\r\n        } = this.option();\r\n        if (LEVEL_COMPARE_MAP[maxZoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\r\n            return\r\n        }\r\n        if (LEVEL_COMPARE_MAP[zoomLevel] > LEVEL_COMPARE_MAP[maxZoomLevel]) {\r\n            this.option(\"zoomLevel\", maxZoomLevel)\r\n        } else if (LEVEL_COMPARE_MAP[zoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\r\n            this.option(\"zoomLevel\", minZoomLevel)\r\n        }\r\n    }\r\n    _initCurrentDate() {\r\n        const currentDate = this._getNormalizedDate(this._selectionStrategy.getDefaultCurrentDate()) ?? this._getNormalizedDate(this.option(\"currentDate\"));\r\n        this.option(\"currentDate\", currentDate)\r\n    }\r\n    _getNormalizedDate(date) {\r\n        date = dateUtils.normalizeDate(date, this._getMinDate(), this._getMaxDate());\r\n        return isDefined(date) ? this._getDate(date) : date\r\n    }\r\n    _initActions() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\");\r\n        this._onContouredChanged = this._createActionByOption(\"onContouredChanged\")\r\n    }\r\n    _initTemplates() {\r\n        this._templateManager.addDefaultTemplates({\r\n            cell: new FunctionTemplate((options => {\r\n                const data = options.model;\r\n                $(options.container).append($(\"<span>\").text(data && data.text || String(data)))\r\n            }))\r\n        });\r\n        super._initTemplates()\r\n    }\r\n    _updateCurrentDate(date) {\r\n        if (fx.isAnimating(this._$viewsWrapper)) {\r\n            fx.stop(this._$viewsWrapper, true)\r\n        }\r\n        const min = this._getMinDate();\r\n        const max = this._getMaxDate();\r\n        if (min > max) {\r\n            this.option(\"currentDate\", new Date);\r\n            return\r\n        }\r\n        const normalizedDate = this._getNormalizedDate(date);\r\n        if (date.getTime() !== normalizedDate.getTime()) {\r\n            this.option(\"currentDate\", new Date(normalizedDate));\r\n            return\r\n        }\r\n        let offset = this._getViewsOffset(this._view.option(\"date\"), normalizedDate);\r\n        if (0 !== offset && !this._isMaxZoomLevel() && this._isOtherViewCellClicked) {\r\n            offset = 0\r\n        }\r\n        if (this._view && 0 !== offset && !this._suppressNavigation) {\r\n            if (this._additionalView) {\r\n                if (offset > 2 || offset < -1) {\r\n                    this._refreshViews();\r\n                    this._setViewContoured(normalizedDate);\r\n                    this._updateAriaId(normalizedDate);\r\n                    this._renderNavigator()\r\n                } else if (1 === offset && this._skipNavigate) {\r\n                    this._setViewContoured(normalizedDate);\r\n                    this._updateAriaId(normalizedDate)\r\n                } else {\r\n                    this._navigate(offset, normalizedDate)\r\n                }\r\n            } else {\r\n                this._navigate(offset, normalizedDate)\r\n            }\r\n        } else {\r\n            this._renderNavigator();\r\n            this._setViewContoured(normalizedDate);\r\n            this._updateAriaId(normalizedDate)\r\n        }\r\n        this._skipNavigate = false\r\n    }\r\n    _isAdditionalViewDate(date) {\r\n        if (!this._additionalView) {\r\n            return false\r\n        }\r\n        return date >= this._additionalView._getFirstAvailableDate()\r\n    }\r\n    _getActiveView(date) {\r\n        return this._isAdditionalViewDate(date) ? this._additionalView : this._view\r\n    }\r\n    _setViewContoured(date) {\r\n        if (this.option(\"skipFocusCheck\") || $(this._$viewsWrapper).is(\":focus\")) {\r\n            var _this$_additionalView;\r\n            this._view.option(\"contouredDate\", null);\r\n            null === (_this$_additionalView = this._additionalView) || void 0 === _this$_additionalView || _this$_additionalView.option(\"contouredDate\", null);\r\n            const view = this._isAdditionalViewDate(date) ? this._additionalView : this._view;\r\n            view.option(\"contouredDate\", date)\r\n        }\r\n    }\r\n    _getMinDate() {\r\n        const _rangeMin = this.option(\"_rangeMin\");\r\n        if (_rangeMin) {\r\n            return _rangeMin\r\n        }\r\n        if (this.min) {\r\n            return this.min\r\n        }\r\n        this.min = this._dateOption(\"min\") || new Date(1e3, 0);\r\n        return this.min\r\n    }\r\n    _getMaxDate() {\r\n        const _rangeMax = this.option(\"_rangeMax\");\r\n        if (_rangeMax) {\r\n            return _rangeMax\r\n        }\r\n        if (this.max) {\r\n            return this.max\r\n        }\r\n        this.max = this._dateOption(\"max\") || new Date(3e3, 0);\r\n        return this.max\r\n    }\r\n    _getViewsOffset(startDate, endDate) {\r\n        const {\r\n            zoomLevel: zoomLevel\r\n        } = this.option();\r\n        if (zoomLevel === ZOOM_LEVEL.MONTH) {\r\n            return this._getMonthsOffset(startDate, endDate)\r\n        }\r\n        let zoomCorrection;\r\n        switch (zoomLevel) {\r\n            case ZOOM_LEVEL.CENTURY:\r\n                zoomCorrection = 100;\r\n                break;\r\n            case ZOOM_LEVEL.DECADE:\r\n                zoomCorrection = 10;\r\n                break;\r\n            default:\r\n                zoomCorrection = 1\r\n        }\r\n        return parseInt(endDate.getFullYear() / zoomCorrection) - parseInt(startDate.getFullYear() / zoomCorrection)\r\n    }\r\n    _getMonthsOffset(startDate, endDate) {\r\n        const yearOffset = endDate.getFullYear() - startDate.getFullYear();\r\n        const monthOffset = endDate.getMonth() - startDate.getMonth();\r\n        return 12 * yearOffset + monthOffset\r\n    }\r\n    _waitRenderView(offset) {\r\n        if (this._alreadyViewRender) {\r\n            return\r\n        }\r\n        this._alreadyViewRender = true;\r\n        const date = this._getDateByOffset(offset * this._getRtlCorrection());\r\n        this._moveToClosestAvailableDate(date);\r\n        this._waitRenderViewTimeout = setTimeout((() => {\r\n            this._alreadyViewRender = false\r\n        }))\r\n    }\r\n    _getRtlCorrection() {\r\n        return this.option(\"rtlEnabled\") ? -1 : 1\r\n    }\r\n    _getDateByOffset(offset, date) {\r\n        date = this._getDate(date ?? this.option(\"currentDate\"));\r\n        const currentDay = date.getDate();\r\n        const difference = dateUtils.getDifferenceInMonth(this.option(\"zoomLevel\")) * offset;\r\n        date.setDate(1);\r\n        date.setMonth(date.getMonth() + difference);\r\n        const lastDay = dateUtils.getLastMonthDate(date).getDate();\r\n        date.setDate(currentDay > lastDay ? lastDay : currentDay);\r\n        return date\r\n    }\r\n    _focusTarget() {\r\n        return this._$viewsWrapper\r\n    }\r\n    _focusEventTarget() {\r\n        return this.$element()\r\n    }\r\n    _initMarkup() {\r\n        this._renderSubmitElement();\r\n        const $element = this.$element();\r\n        $element.addClass(\"dx-calendar\");\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        $element.toggleClass(\"dx-calendar-range\", \"range\" === selectionMode);\r\n        this._renderBody();\r\n        $element.append(this.$body);\r\n        this._renderViews();\r\n        this._renderNavigator();\r\n        super._initMarkup();\r\n        this._renderEvents();\r\n        $element.prepend(this._navigator.$element());\r\n        this._renderSwipeable();\r\n        this._renderFooter();\r\n        this._selectionStrategy.updateAriaSelected();\r\n        this._updateAriaId();\r\n        this._updateNavigatorLabels();\r\n        this.setAria(\"role\", \"application\");\r\n        this._updateAriaLabelAndRole();\r\n        this._moveToClosestAvailableDate()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._setViewContoured(this.option(\"currentDate\"))\r\n    }\r\n    _renderBody() {\r\n        if (!this._$viewsWrapper) {\r\n            this.$body = $(\"<div>\").addClass(\"dx-calendar-body\");\r\n            this._$viewsWrapper = $(\"<div>\").addClass(\"dx-calendar-views-wrapper\");\r\n            this.$body.append(this._$viewsWrapper)\r\n        }\r\n    }\r\n    _updateAriaLabelAndRole() {\r\n        const readOnly = this.option(\"readOnly\");\r\n        const $element = this.$element();\r\n        const aria = {\r\n            role: readOnly ? \"group\" : void 0,\r\n            label: readOnly ? messageLocalization.format(\"dxCalendar-readOnlyLabel\") : void 0\r\n        };\r\n        this.setAria(aria, $element)\r\n    }\r\n    _setAriaReadonly() {}\r\n    _getKeyboardListeners() {\r\n        return super._getKeyboardListeners().concat([this._view])\r\n    }\r\n    _renderViews() {\r\n        const {\r\n            zoomLevel: zoomLevel\r\n        } = this.option();\r\n        this.$element().addClass(`dx-calendar-view-${zoomLevel}`);\r\n        const {\r\n            currentDate: currentDate,\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        this.$element().toggleClass(\"dx-calendar-multiview\", viewsCount > 1);\r\n        this._view = this._renderSpecificView(currentDate);\r\n        if (hasWindow()) {\r\n            const beforeDate = this._getDateByOffset(-1, currentDate);\r\n            this._beforeView = this._isViewAvailable(beforeDate) ? this._renderSpecificView(beforeDate) : null;\r\n            const afterDate = this._getDateByOffset(viewsCount, currentDate);\r\n            afterDate.setDate(1);\r\n            this._afterView = this._isViewAvailable(afterDate) ? this._renderSpecificView(afterDate) : null\r\n        }\r\n        if (viewsCount > 1) {\r\n            this._additionalView = this._renderSpecificView(this._getDateByOffset(1, currentDate))\r\n        }\r\n        this._translateViews()\r\n    }\r\n    _renderSpecificView(date) {\r\n        const {\r\n            zoomLevel: zoomLevel\r\n        } = this.option();\r\n        const specificView = Views[zoomLevel];\r\n        const $view = $(\"<div>\").appendTo(this._$viewsWrapper);\r\n        const config = this._viewConfig(date);\r\n        const view = this._createComponent($view, specificView, config);\r\n        return view\r\n    }\r\n    _viewConfig(date) {\r\n        let disabledDates = this.option(\"disabledDates\");\r\n        disabledDates = isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this)) : disabledDates;\r\n        return _extends({}, this._selectionStrategy.getViewOptions(), {\r\n            date: date,\r\n            min: this._getMinDate(),\r\n            max: this._getMaxDate(),\r\n            firstDayOfWeek: this.option(\"firstDayOfWeek\") ?? dateLocalization.firstDayOfWeekIndex(),\r\n            showWeekNumbers: this.option(\"showWeekNumbers\"),\r\n            selectWeekOnClick: this.option(\"selectWeekOnClick\"),\r\n            weekNumberRule: this.option(\"weekNumberRule\"),\r\n            zoomLevel: this.option(\"zoomLevel\"),\r\n            tabIndex: void 0,\r\n            focusStateEnabled: this.option(\"focusStateEnabled\"),\r\n            hoverStateEnabled: this.option(\"hoverStateEnabled\"),\r\n            disabledDates: disabledDates,\r\n            onCellClick: this._cellClickHandler.bind(this),\r\n            cellTemplate: this._getTemplateByOption(\"cellTemplate\"),\r\n            allowValueSelection: this._isMaxZoomLevel(),\r\n            _todayDate: this.option(\"_todayDate\")\r\n        })\r\n    }\r\n    _renderEvents() {\r\n        eventsEngine.off(this._$viewsWrapper, CALENDAR_DXHOVEREND_EVENT_NAME);\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        if (\"range\" === selectionMode) {\r\n            eventsEngine.on(this._$viewsWrapper, CALENDAR_DXHOVEREND_EVENT_NAME, null, (() => {\r\n                this._updateViewsOption(\"hoveredRange\", [])\r\n            }))\r\n        }\r\n    }\r\n    _injectComponent(func) {\r\n        const that = this;\r\n        return function(params) {\r\n            extend(params, {\r\n                component: that\r\n            });\r\n            return func(params)\r\n        }\r\n    }\r\n    _isViewAvailable(date) {\r\n        const zoomLevel = this.option(\"zoomLevel\");\r\n        const min = dateUtils.getViewMinBoundaryDate(zoomLevel, this._getMinDate());\r\n        const max = dateUtils.getViewMaxBoundaryDate(zoomLevel, this._getMaxDate());\r\n        return dateUtils.dateInRange(date, min, max)\r\n    }\r\n    _translateViews() {\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        move(this._view.$element(), {\r\n            left: 0,\r\n            top: 0\r\n        });\r\n        this._moveViewElement(this._beforeView, -1);\r\n        this._moveViewElement(this._afterView, viewsCount);\r\n        this._moveViewElement(this._additionalView, 1)\r\n    }\r\n    _moveViewElement(view, coefficient) {\r\n        view && move(view.$element(), {\r\n            left: this._getViewPosition(coefficient),\r\n            top: 0\r\n        })\r\n    }\r\n    _getViewPosition(coefficient) {\r\n        const rtlCorrection = this.option(\"rtlEnabled\") ? -1 : 1;\r\n        return 100 * coefficient * rtlCorrection + \"%\"\r\n    }\r\n    _cellClickHandler(e) {\r\n        const zoomLevel = this.option(\"zoomLevel\");\r\n        const nextView = dateUtils.getViewDown(zoomLevel);\r\n        const isMaxZoomLevel = this._isMaxZoomLevel();\r\n        if (nextView && !isMaxZoomLevel) {\r\n            this._navigateDown(e.event.currentTarget)\r\n        } else {\r\n            var _this$_cellClickActio;\r\n            const newValue = this._updateTimeComponent(e.value);\r\n            this._selectionStrategy.selectValue(newValue, e.event);\r\n            null === (_this$_cellClickActio = this._cellClickAction) || void 0 === _this$_cellClickActio || _this$_cellClickActio.call(this, e)\r\n        }\r\n    }\r\n    _updateTimeComponent(date) {\r\n        const result = new Date(date);\r\n        const currentValue = this._dateOption(\"value\");\r\n        if (currentValue && this._isSingleMode()) {\r\n            result.setHours(currentValue.getHours());\r\n            result.setMinutes(currentValue.getMinutes());\r\n            result.setSeconds(currentValue.getSeconds());\r\n            result.setMilliseconds(currentValue.getMilliseconds())\r\n        }\r\n        return result\r\n    }\r\n    _isMaxZoomLevel() {\r\n        return this.option(\"zoomLevel\") === this.option(\"maxZoomLevel\")\r\n    }\r\n    _navigateDown(cell) {\r\n        const zoomLevel = this.option(\"zoomLevel\");\r\n        if (this._isMaxZoomLevel()) {\r\n            return\r\n        }\r\n        const nextView = dateUtils.getViewDown(zoomLevel);\r\n        if (!nextView) {\r\n            return\r\n        }\r\n        let newCurrentDate = this._view.option(\"contouredDate\") || this._view.option(\"date\");\r\n        if (cell) {\r\n            newCurrentDate = $(cell).data(\"dxDateValueKey\")\r\n        }\r\n        this._isOtherViewCellClicked = true;\r\n        this.option(\"currentDate\", newCurrentDate);\r\n        this.option(\"zoomLevel\", nextView);\r\n        this._isOtherViewCellClicked = false;\r\n        this._renderNavigator();\r\n        this._animateShowView();\r\n        this._moveToClosestAvailableDate();\r\n        this._setViewContoured(this._getNormalizedDate(this.option(\"currentDate\")))\r\n    }\r\n    _renderNavigator() {\r\n        if (!this._navigator) {\r\n            this._navigator = new Navigator($(\"<div>\"), this._navigatorConfig())\r\n        }\r\n        this._navigator.option(\"text\", this._getViewsCaption(this._view, this._additionalView));\r\n        this._updateButtonsVisibility()\r\n    }\r\n    _navigatorConfig() {\r\n        const {\r\n            focusStateEnabled: focusStateEnabled,\r\n            rtlEnabled: rtlEnabled\r\n        } = this.option();\r\n        return {\r\n            text: this._getViewsCaption(this._view, this._additionalView),\r\n            onClick: this._navigatorClickHandler.bind(this),\r\n            onCaptionClick: this._navigateUp.bind(this),\r\n            focusStateEnabled: focusStateEnabled,\r\n            rtlEnabled: rtlEnabled,\r\n            tabIndex: void 0\r\n        }\r\n    }\r\n    _navigatorClickHandler(e) {\r\n        const {\r\n            currentDate: currentDate,\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        let offset = e.direction;\r\n        if (viewsCount > 1) {\r\n            const additionalViewActive = this._isAdditionalViewDate(currentDate);\r\n            const shouldDoubleOffset = additionalViewActive && offset < 0 || !additionalViewActive && offset > 0;\r\n            if (shouldDoubleOffset) {\r\n                offset *= 2\r\n            }\r\n        }\r\n        const newCurrentDate = this._getDateByOffset(offset, currentDate);\r\n        this._moveToClosestAvailableDate(newCurrentDate)\r\n    }\r\n    _navigateUp() {\r\n        const zoomLevel = this.option(\"zoomLevel\");\r\n        const nextView = dateUtils.getViewUp(zoomLevel);\r\n        if (!nextView || this._isMinZoomLevel(zoomLevel)) {\r\n            return\r\n        }\r\n        this.option(\"zoomLevel\", nextView);\r\n        this._renderNavigator();\r\n        this._animateShowView();\r\n        this._moveToClosestAvailableDate();\r\n        this._setViewContoured(this._getNormalizedDate(this.option(\"currentDate\")))\r\n    }\r\n    _isMinZoomLevel(zoomLevel) {\r\n        const min = this._getMinDate();\r\n        const max = this._getMaxDate();\r\n        return dateUtils.sameView(zoomLevel, min, max) || this.option(\"minZoomLevel\") === zoomLevel\r\n    }\r\n    _updateButtonsVisibility() {\r\n        this._navigator.toggleButton(\"next\", !isDefined(this._afterView));\r\n        this._navigator.toggleButton(\"prev\", !isDefined(this._beforeView))\r\n    }\r\n    _renderSwipeable() {\r\n        if (!this._swipeable) {\r\n            this._swipeable = this._createComponent(this.$element(), Swipeable, {\r\n                onStart: this._swipeStartHandler.bind(this),\r\n                onUpdated: this._swipeUpdateHandler.bind(this),\r\n                onEnd: this._swipeEndHandler.bind(this),\r\n                itemSizeFunc: this._viewWidth.bind(this)\r\n            })\r\n        }\r\n    }\r\n    _swipeStartHandler(e) {\r\n        fx.stop(this._$viewsWrapper, true);\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        this._toggleGestureCoverCursor(\"grabbing\");\r\n        e.event.maxLeftOffset = this._getRequiredView(\"next\") ? 1 / viewsCount : 0;\r\n        e.event.maxRightOffset = this._getRequiredView(\"prev\") ? 1 / viewsCount : 0\r\n    }\r\n    _toggleGestureCoverCursor(cursor) {\r\n        $(\".dx-gesture-cover\").css(\"cursor\", cursor)\r\n    }\r\n    _getRequiredView(name) {\r\n        let view;\r\n        const isRtl = this.option(\"rtlEnabled\");\r\n        if (\"next\" === name) {\r\n            view = isRtl ? this._beforeView : this._afterView\r\n        } else if (\"prev\" === name) {\r\n            view = isRtl ? this._afterView : this._beforeView\r\n        }\r\n        return view\r\n    }\r\n    _swipeUpdateHandler(e) {\r\n        const {\r\n            offset: offset\r\n        } = e.event;\r\n        move(this._$viewsWrapper, {\r\n            left: offset * this._viewWidth(),\r\n            top: 0\r\n        });\r\n        this._updateNavigatorCaption(offset)\r\n    }\r\n    _swipeEndHandler(e) {\r\n        this._toggleGestureCoverCursor(\"auto\");\r\n        const {\r\n            currentDate: currentDate,\r\n            rtlEnabled: rtlEnabled\r\n        } = this.option();\r\n        const {\r\n            targetOffset: targetOffset\r\n        } = e.event;\r\n        const moveOffset = !targetOffset ? 0 : targetOffset / Math.abs(targetOffset);\r\n        const isAdditionalViewActive = this._isAdditionalViewDate(currentDate);\r\n        const shouldDoubleOffset = isAdditionalViewActive && (rtlEnabled ? -1 === moveOffset : 1 === moveOffset);\r\n        if (0 === moveOffset) {\r\n            this._animateWrapper(0, 250);\r\n            return\r\n        }\r\n        const offset = -moveOffset * this._getRtlCorrection() * (shouldDoubleOffset ? 2 : 1);\r\n        let date = this._getDateByOffset(offset);\r\n        if (this._isDateInInvalidRange(date)) {\r\n            if (moveOffset >= 0) {\r\n                date = new Date(this._getMinDate())\r\n            } else {\r\n                date = new Date(this._getMaxDate())\r\n            }\r\n        }\r\n        this.option(\"currentDate\", date)\r\n    }\r\n    _viewWidth() {\r\n        if (!this._viewWidthValue) {\r\n            const {\r\n                viewsCount: viewsCount\r\n            } = this.option();\r\n            this._viewWidthValue = getWidth(this.$element()) / viewsCount\r\n        }\r\n        return this._viewWidthValue\r\n    }\r\n    _updateNavigatorCaption(offset) {\r\n        offset *= this._getRtlCorrection();\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        const isMultiView = viewsCount > 1;\r\n        let view;\r\n        let additionalView;\r\n        if (offset > .5 && this._beforeView) {\r\n            view = this._beforeView;\r\n            additionalView = isMultiView && this._view\r\n        } else if (offset < -.5 && this._afterView) {\r\n            view = isMultiView ? this._additionalView : this._afterView;\r\n            additionalView = isMultiView ? this._afterView : null\r\n        } else {\r\n            view = this._view;\r\n            additionalView = isMultiView ? this._additionalView : null\r\n        }\r\n        this._navigator.option(\"text\", this._getViewsCaption(view, additionalView))\r\n    }\r\n    _getViewsCaption(view, additionalView) {\r\n        let caption = view.getNavigatorCaption();\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        if (viewsCount > 1 && additionalView) {\r\n            const additionalViewCaption = additionalView.getNavigatorCaption();\r\n            caption = `${caption} - ${additionalViewCaption}`\r\n        }\r\n        return caption\r\n    }\r\n    _isDateInInvalidRange(date) {\r\n        if (this._view.isBoundary(date)) {\r\n            return\r\n        }\r\n        const min = this._getMinDate();\r\n        const max = this._getMaxDate();\r\n        const normalizedDate = dateUtils.normalizeDate(date, min, max);\r\n        return normalizedDate === min || normalizedDate === max\r\n    }\r\n    _renderFooter() {\r\n        const showTodayButton = this.option(\"showTodayButton\");\r\n        if (showTodayButton) {\r\n            const $todayButton = this._createComponent($(\"<div>\"), Button, {\r\n                focusStateEnabled: this.option(\"focusStateEnabled\"),\r\n                text: messageLocalization.format(\"dxCalendar-todayButtonText\"),\r\n                onClick: args => {\r\n                    this._toTodayView(args)\r\n                },\r\n                type: isFluent() ? \"normal\" : \"default\",\r\n                stylingMode: isFluent() ? \"outlined\" : \"text\",\r\n                integrationOptions: {}\r\n            }).$element().addClass(\"dx-calendar-today-button\");\r\n            this._$footer = $(\"<div>\").addClass(\"dx-calendar-footer\").append($todayButton);\r\n            this.$element().append(this._$footer)\r\n        }\r\n        this.$element().toggleClass(\"dx-calendar-with-footer\", showTodayButton)\r\n    }\r\n    _renderSubmitElement() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    }\r\n    _setSubmitValue(value) {\r\n        const dateValue = this._convertToDate(value);\r\n        this._getSubmitElement().val(dateSerialization.serializeDate(dateValue, \"yyyy-MM-dd\"))\r\n    }\r\n    _getSubmitElement() {\r\n        return this._$submitElement\r\n    }\r\n    _animateShowView() {\r\n        fx.stop(this._view.$element(), true);\r\n        this._popAnimationView(this._view, .6, 1, 250);\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        if (viewsCount > 1) {\r\n            fx.stop(this._additionalView.$element(), true);\r\n            this._popAnimationView(this._additionalView, .6, 1, 250)\r\n        }\r\n    }\r\n    _popAnimationView(view, from, to, duration) {\r\n        return fx.animate(view.$element(), {\r\n            type: \"pop\",\r\n            from: {\r\n                scale: from,\r\n                opacity: from\r\n            },\r\n            to: {\r\n                scale: to,\r\n                opacity: to\r\n            },\r\n            duration: duration\r\n        })\r\n    }\r\n    _navigate(offset, value) {\r\n        if (0 !== offset && 1 !== Math.abs(offset) && this._isViewAvailable(value)) {\r\n            const newView = this._renderSpecificView(value);\r\n            if (offset > 0) {\r\n                this._afterView && this._afterView.$element().remove();\r\n                this._afterView = newView\r\n            } else {\r\n                this._beforeView && this._beforeView.$element().remove();\r\n                this._beforeView = newView\r\n            }\r\n            this._translateViews()\r\n        }\r\n        const rtlCorrection = this._getRtlCorrection();\r\n        const offsetSign = offset > 0 ? 1 : offset < 0 ? -1 : 0;\r\n        const endPosition = -rtlCorrection * offsetSign * this._viewWidth();\r\n        const viewsWrapperPosition = this._$viewsWrapper.position().left;\r\n        if (viewsWrapperPosition !== endPosition) {\r\n            if (this._preventViewChangeAnimation) {\r\n                this._wrapperAnimationEndHandler(offset, value)\r\n            } else {\r\n                this._animateWrapper(endPosition, 250).done(this._wrapperAnimationEndHandler.bind(this, offset, value))\r\n            }\r\n        }\r\n    }\r\n    _animateWrapper(to, duration) {\r\n        return fx.animate(this._$viewsWrapper, {\r\n            type: \"slide\",\r\n            from: {\r\n                left: this._$viewsWrapper.position().left\r\n            },\r\n            to: {\r\n                left: to\r\n            },\r\n            duration: duration\r\n        })\r\n    }\r\n    _getDate(value) {\r\n        return new Date(value)\r\n    }\r\n    _toTodayView(args) {\r\n        const today = new Date;\r\n        if (this._isMaxZoomLevel()) {\r\n            this._selectionStrategy.selectValue(today, args.event);\r\n            return\r\n        }\r\n        this._preventViewChangeAnimation = true;\r\n        this.option(\"zoomLevel\", this.option(\"maxZoomLevel\"));\r\n        this._selectionStrategy.selectValue(today, args.event);\r\n        this._animateShowView();\r\n        this._preventViewChangeAnimation = false\r\n    }\r\n    _wrapperAnimationEndHandler(offset, newDate) {\r\n        this._rearrangeViews(offset);\r\n        this._translateViews();\r\n        this._resetLocation();\r\n        this._renderNavigator();\r\n        this._setViewContoured(newDate);\r\n        this._updateAriaId(newDate);\r\n        this._selectionStrategy.updateAriaSelected()\r\n    }\r\n    _rearrangeViews(offset) {\r\n        var _this$viewToRemoveKey;\r\n        if (0 === offset) {\r\n            return\r\n        }\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        let viewOffset;\r\n        let viewToCreateKey;\r\n        let viewToRemoveKey;\r\n        let viewBeforeCreateKey;\r\n        let viewAfterRemoveKey;\r\n        if (offset < 0) {\r\n            viewOffset = 1;\r\n            viewToCreateKey = \"_beforeView\";\r\n            viewToRemoveKey = \"_afterView\";\r\n            viewBeforeCreateKey = \"_view\";\r\n            viewAfterRemoveKey = 1 === viewsCount ? \"_view\" : \"_additionalView\"\r\n        } else {\r\n            viewOffset = -1;\r\n            viewToCreateKey = \"_afterView\";\r\n            viewToRemoveKey = \"_beforeView\";\r\n            viewBeforeCreateKey = 1 === viewsCount ? \"_view\" : \"_additionalView\";\r\n            viewAfterRemoveKey = \"_view\"\r\n        }\r\n        if (!this[viewToCreateKey]) {\r\n            return\r\n        }\r\n        const destinationDate = this[viewToCreateKey].option(\"date\");\r\n        null === (_this$viewToRemoveKey = this[viewToRemoveKey]) || void 0 === _this$viewToRemoveKey || _this$viewToRemoveKey.$element().remove();\r\n        this[viewToRemoveKey] = this._renderSpecificView(this._getDateByOffset(viewOffset * viewsCount, destinationDate));\r\n        this[viewAfterRemoveKey].$element().remove();\r\n        if (1 === viewsCount) {\r\n            this[viewAfterRemoveKey] = this[viewToCreateKey]\r\n        } else {\r\n            this[viewAfterRemoveKey] = this[viewBeforeCreateKey];\r\n            this[viewBeforeCreateKey] = this[viewToCreateKey]\r\n        }\r\n        const dateByOffset = this._getDateByOffset(-viewOffset, destinationDate);\r\n        this[viewToCreateKey] = this._isViewAvailable(dateByOffset) ? this._renderSpecificView(dateByOffset) : null\r\n    }\r\n    _resetLocation() {\r\n        move(this._$viewsWrapper, {\r\n            left: 0,\r\n            top: 0\r\n        })\r\n    }\r\n    _clean() {\r\n        super._clean();\r\n        this._clearViewWidthCache();\r\n        delete this._$viewsWrapper;\r\n        delete this._navigator;\r\n        delete this._$footer\r\n    }\r\n    _clearViewWidthCache() {\r\n        delete this._viewWidthValue\r\n    }\r\n    _disposeViews() {\r\n        var _this$_beforeView, _this$_additionalView2, _this$_afterView;\r\n        this._view.$element().remove();\r\n        null === (_this$_beforeView = this._beforeView) || void 0 === _this$_beforeView || _this$_beforeView.$element().remove();\r\n        null === (_this$_additionalView2 = this._additionalView) || void 0 === _this$_additionalView2 || _this$_additionalView2.$element().remove();\r\n        null === (_this$_afterView = this._afterView) || void 0 === _this$_afterView || _this$_afterView.$element().remove();\r\n        delete this._view;\r\n        delete this._additionalView;\r\n        delete this._beforeView;\r\n        delete this._afterView;\r\n        delete this._skipNavigate\r\n    }\r\n    _dispose() {\r\n        clearTimeout(this._waitRenderViewTimeout);\r\n        super._dispose()\r\n    }\r\n    _refreshViews() {\r\n        this._resetActiveState();\r\n        this._disposeViews();\r\n        this._renderViews()\r\n    }\r\n    _visibilityChanged() {\r\n        this._translateViews()\r\n    }\r\n    _shouldSkipFocusEvent(event) {\r\n        const {\r\n            target: target,\r\n            relatedTarget: relatedTarget\r\n        } = event;\r\n        return $(target).parents(\".dx-calendar\").length && $(relatedTarget).parents(\".dx-calendar\").length\r\n    }\r\n    _focusInHandler(event) {\r\n        if ($(event.target).is(this._$viewsWrapper)) {\r\n            this._setViewContoured(this.option(\"currentDate\"))\r\n        }\r\n        if (this._shouldSkipFocusEvent(event)) {\r\n            return\r\n        }\r\n        super._focusInHandler.apply(this, arguments);\r\n        this._toggleFocusClass(true, this.$element())\r\n    }\r\n    _focusOutHandler(event) {\r\n        if ($(event.target).is(this._$viewsWrapper)) {\r\n            var _this$_additionalView3;\r\n            this._view.option(\"contouredDate\", null);\r\n            null === (_this$_additionalView3 = this._additionalView) || void 0 === _this$_additionalView3 || _this$_additionalView3.option(\"contouredDate\", null)\r\n        }\r\n        if (this._shouldSkipFocusEvent(event)) {\r\n            return\r\n        }\r\n        super._focusOutHandler.apply(this, arguments);\r\n        this._toggleFocusClass(false, this.$element())\r\n    }\r\n    _updateViewsOption(optionName, newValue) {\r\n        var _this$_additionalView4, _this$_beforeView2, _this$_afterView2;\r\n        this._view.option(optionName, newValue);\r\n        null === (_this$_additionalView4 = this._additionalView) || void 0 === _this$_additionalView4 || _this$_additionalView4.option(optionName, newValue);\r\n        null === (_this$_beforeView2 = this._beforeView) || void 0 === _this$_beforeView2 || _this$_beforeView2.option(optionName, newValue);\r\n        null === (_this$_afterView2 = this._afterView) || void 0 === _this$_afterView2 || _this$_afterView2.option(optionName, newValue)\r\n    }\r\n    _setViewsMinOption(min) {\r\n        this._restoreViewsMinMaxOptions();\r\n        this.option(\"_rangeMin\", this._convertToDate(min));\r\n        this._updateViewsOption(\"min\", this._getMinDate())\r\n    }\r\n    _setViewsMaxOption(max) {\r\n        this._restoreViewsMinMaxOptions();\r\n        this.option(\"_rangeMax\", this._convertToDate(max));\r\n        this._updateViewsOption(\"max\", this._getMaxDate())\r\n    }\r\n    _restoreViewsMinMaxOptions() {\r\n        this._resetActiveState();\r\n        this.option({\r\n            _rangeMin: null,\r\n            _rangeMax: null\r\n        });\r\n        this._updateViewsOption(\"min\", this._getMinDate());\r\n        this._updateViewsOption(\"max\", this._getMaxDate())\r\n    }\r\n    _updateNavigatorLabels() {\r\n        let {\r\n            zoomLevel: zoomLevel\r\n        } = this.option();\r\n        zoomLevel = zoomLevel.charAt(0).toUpperCase() + zoomLevel.slice(1);\r\n        const captionButtonText = this._navigator._caption.option(\"text\");\r\n        const localizedPrevButtonLabel = messageLocalization.format(`dxCalendar-previous${zoomLevel}ButtonLabel`);\r\n        const localizedCaptionLabel = messageLocalization.format(`dxCalendar-caption${zoomLevel}Label`);\r\n        const localizedNextButtonLabel = messageLocalization.format(`dxCalendar-next${zoomLevel}ButtonLabel`);\r\n        this.setAria(\"label\", localizedPrevButtonLabel, this._navigator._prevButton.$element());\r\n        this.setAria(\"label\", `${captionButtonText}. ${localizedCaptionLabel}`, this._navigator._caption.$element());\r\n        this.setAria(\"label\", localizedNextButtonLabel, this._navigator._nextButton.$element())\r\n    }\r\n    _updateAriaSelected(value, previousValue) {\r\n        previousValue.forEach((item => {\r\n            this.setAria(\"selected\", false, this._view._getCellByDate(item))\r\n        }));\r\n        value.forEach((item => {\r\n            this.setAria(\"selected\", true, this._view._getCellByDate(item))\r\n        }));\r\n        const {\r\n            viewsCount: viewsCount\r\n        } = this.option();\r\n        if (viewsCount > 1) {\r\n            previousValue.forEach((item => {\r\n                this.setAria(\"selected\", false, this._additionalView._getCellByDate(item))\r\n            }));\r\n            value.forEach((item => {\r\n                this.setAria(\"selected\", true, this._additionalView._getCellByDate(item))\r\n            }))\r\n        }\r\n    }\r\n    _updateAriaId(value) {\r\n        var _this$_onContouredCha;\r\n        value = value ?? this.option(\"currentDate\");\r\n        const ariaId = `dx-${new Guid}`;\r\n        const view = this._getActiveView(value);\r\n        const $newCell = view._getCellByDate(value);\r\n        this.setAria(\"id\", ariaId, $newCell);\r\n        this.setAria(\"activedescendant\", ariaId);\r\n        null === (_this$_onContouredCha = this._onContouredChanged) || void 0 === _this$_onContouredCha || _this$_onContouredCha.call(this, ariaId)\r\n    }\r\n    _suppressingNavigation(callback, args) {\r\n        this._suppressNavigation = true;\r\n        callback.apply(this, args);\r\n        delete this._suppressNavigation\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            value: value,\r\n            previousValue: previousValue\r\n        } = args;\r\n        switch (args.name) {\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._clearViewWidthCache();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this.min = void 0;\r\n                this.max = void 0;\r\n                this._suppressingNavigation(this._updateCurrentDate, [this.option(\"currentDate\")]);\r\n                this._refreshViews();\r\n                this._renderNavigator();\r\n                break;\r\n            case \"selectionMode\":\r\n                this._refreshSelectionStrategy();\r\n                this._initCurrentDate();\r\n                break;\r\n            case \"selectWeekOnClick\":\r\n            case \"_todayDate\":\r\n            case \"showWeekNumbers\":\r\n            case \"weekNumberRule\":\r\n                this._refreshViews();\r\n                break;\r\n            case \"firstDayOfWeek\":\r\n                this._refreshViews();\r\n                this._updateButtonsVisibility();\r\n                break;\r\n            case \"focusStateEnabled\":\r\n            case \"disabledDates\":\r\n            case \"dateSerializationFormat\":\r\n            case \"cellTemplate\":\r\n            case \"showTodayButton\":\r\n                this._invalidate();\r\n                break;\r\n            case \"currentDate\":\r\n                this.setAria(\"id\", void 0, this._view._getCellByDate(previousValue));\r\n                this._updateCurrentDate(value);\r\n                break;\r\n            case \"zoomLevel\":\r\n                this.$element().removeClass(`dx-calendar-view-${previousValue}`);\r\n                this._correctZoomLevel();\r\n                this._refreshViews();\r\n                this._renderNavigator();\r\n                this._updateAriaId();\r\n                this._updateNavigatorLabels();\r\n                break;\r\n            case \"minZoomLevel\":\r\n            case \"maxZoomLevel\":\r\n                this._correctZoomLevel();\r\n                this._updateButtonsVisibility();\r\n                break;\r\n            case \"value\": {\r\n                const isSameValue = dateUtils.sameDatesArrays(value, previousValue);\r\n                if (!isSameValue) {\r\n                    this._selectionStrategy.processValueChanged(value, previousValue)\r\n                }\r\n                this._setSubmitValue(value);\r\n                super._optionChanged(args);\r\n                break\r\n            }\r\n            case \"viewsCount\":\r\n                this._refreshViews();\r\n                this._renderNavigator();\r\n                break;\r\n            case \"onCellClick\":\r\n                this._view.option(\"onCellClick\", value);\r\n                break;\r\n            case \"onContouredChanged\":\r\n                this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\r\n                break;\r\n            case \"readOnly\":\r\n                super._optionChanged(args);\r\n                this._updateAriaLabelAndRole();\r\n                break;\r\n            case \"skipFocusCheck\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    getContouredDate() {\r\n        const {\r\n            contouredDate: contouredDate\r\n        } = this._view.option();\r\n        return contouredDate\r\n    }\r\n}\r\nregisterComponent(\"dxCalendar\", Calendar);\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}