{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.strategy.native.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport devices from \"../../../core/devices\";\nimport dateSerialization from \"../../../core/utils/date_serialization\";\nimport { inputType } from \"../../../core/utils/support\";\nimport DateBoxStrategy from \"./m_date_box.strategy\";\nimport dateUtils from \"./m_date_utils\";\nclass NativeStrategy extends DateBoxStrategy {\n  ctor(dateBox) {\n    super.ctor(dateBox);\n    this.NAME = \"Native\";\n  }\n  popupConfig(popupConfig) {\n    return _extends({}, popupConfig, {\n      width: \"auto\"\n    });\n  }\n  getParsedText(text) {\n    if (!text) {\n      return null;\n    }\n    if (\"datetime\" === this.dateBox.option(\"type\")) {\n      return new Date(text.replace(/-/g, \"/\").replace(\"T\", \" \").split(\".\")[0]);\n    }\n    return dateUtils.fromStandardDateFormat(text);\n  }\n  renderPopupContent() {}\n  _getWidgetName() {}\n  _getWidgetOptions() {}\n  _getDateBoxType() {\n    let {\n      type: type\n    } = this.dateBox.option();\n    if (!dateUtils.SUPPORTED_FORMATS.includes(type)) {\n      type = \"date\";\n    } else if (\"datetime\" === type && !inputType(type)) {\n      type = \"datetime-local\";\n    }\n    return type;\n  }\n  customizeButtons() {\n    const dropDownButton = this.dateBox.getButton(\"dropDown\");\n    if (devices.real().android && dropDownButton) {\n      dropDownButton.on(\"click\", () => {\n        this.dateBox._input().get(0).click();\n      });\n    }\n  }\n  getDefaultOptions() {\n    return {\n      mode: this._getDateBoxType()\n    };\n  }\n  getDisplayFormat(displayFormat) {\n    const type = this._getDateBoxType();\n    return displayFormat || dateUtils.FORMATS_MAP[type];\n  }\n  renderInputMinMax($input) {\n    const type = this.dateBox.option(\"type\");\n    const format = {\n      datetime: \"yyyy-MM-ddTHH:mm:ss\",\n      date: \"yyyy-MM-dd\",\n      time: \"HH:mm:ss\"\n    }[type] ?? \"yyyy-MM-dd\";\n    $input.attr({\n      min: dateSerialization.serializeDate(this.dateBox.dateOption(\"min\"), format),\n      max: dateSerialization.serializeDate(this.dateBox.dateOption(\"max\"), format)\n    });\n  }\n}\nexport default NativeStrategy;","map":{"version":3,"names":["_extends","devices","dateSerialization","inputType","DateBoxStrategy","dateUtils","NativeStrategy","ctor","dateBox","NAME","popupConfig","width","getParsedText","text","option","Date","replace","split","fromStandardDateFormat","renderPopupContent","_getWidgetName","_getWidgetOptions","_getDateBoxType","type","SUPPORTED_FORMATS","includes","customizeButtons","dropDownButton","getButton","real","android","on","_input","get","click","getDefaultOptions","mode","getDisplayFormat","displayFormat","FORMATS_MAP","renderInputMinMax","$input","format","datetime","date","time","attr","min","serializeDate","dateOption","max"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/date_box/m_date_box.strategy.native.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.strategy.native.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport devices from \"../../../core/devices\";\r\nimport dateSerialization from \"../../../core/utils/date_serialization\";\r\nimport {\r\n    inputType\r\n} from \"../../../core/utils/support\";\r\nimport DateBoxStrategy from \"./m_date_box.strategy\";\r\nimport dateUtils from \"./m_date_utils\";\r\nclass NativeStrategy extends DateBoxStrategy {\r\n    ctor(dateBox) {\r\n        super.ctor(dateBox);\r\n        this.NAME = \"Native\"\r\n    }\r\n    popupConfig(popupConfig) {\r\n        return _extends({}, popupConfig, {\r\n            width: \"auto\"\r\n        })\r\n    }\r\n    getParsedText(text) {\r\n        if (!text) {\r\n            return null\r\n        }\r\n        if (\"datetime\" === this.dateBox.option(\"type\")) {\r\n            return new Date(text.replace(/-/g, \"/\").replace(\"T\", \" \").split(\".\")[0])\r\n        }\r\n        return dateUtils.fromStandardDateFormat(text)\r\n    }\r\n    renderPopupContent() {}\r\n    _getWidgetName() {}\r\n    _getWidgetOptions() {}\r\n    _getDateBoxType() {\r\n        let {\r\n            type: type\r\n        } = this.dateBox.option();\r\n        if (!dateUtils.SUPPORTED_FORMATS.includes(type)) {\r\n            type = \"date\"\r\n        } else if (\"datetime\" === type && !inputType(type)) {\r\n            type = \"datetime-local\"\r\n        }\r\n        return type\r\n    }\r\n    customizeButtons() {\r\n        const dropDownButton = this.dateBox.getButton(\"dropDown\");\r\n        if (devices.real().android && dropDownButton) {\r\n            dropDownButton.on(\"click\", (() => {\r\n                this.dateBox._input().get(0).click()\r\n            }))\r\n        }\r\n    }\r\n    getDefaultOptions() {\r\n        return {\r\n            mode: this._getDateBoxType()\r\n        }\r\n    }\r\n    getDisplayFormat(displayFormat) {\r\n        const type = this._getDateBoxType();\r\n        return displayFormat || dateUtils.FORMATS_MAP[type]\r\n    }\r\n    renderInputMinMax($input) {\r\n        const type = this.dateBox.option(\"type\");\r\n        const format = {\r\n            datetime: \"yyyy-MM-ddTHH:mm:ss\",\r\n            date: \"yyyy-MM-dd\",\r\n            time: \"HH:mm:ss\"\r\n        } [type] ?? \"yyyy-MM-dd\";\r\n        $input.attr({\r\n            min: dateSerialization.serializeDate(this.dateBox.dateOption(\"min\"), format),\r\n            max: dateSerialization.serializeDate(this.dateBox.dateOption(\"max\"), format)\r\n        })\r\n    }\r\n}\r\nexport default NativeStrategy;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}