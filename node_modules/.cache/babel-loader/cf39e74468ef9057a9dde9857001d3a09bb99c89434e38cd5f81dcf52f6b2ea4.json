{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 24.2.7\n * Build date: Mon Apr 28 2025\n *\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n/* eslint-disable no-restricted-globals */\nimport { getChanges } from './configuration/comparer';\nimport { buildConfig, findValue, ValueType } from './configuration/tree';\nimport { mergeNameParts, shallowEquals } from './configuration/utils';\nimport { capitalizeFirstLetter } from './helpers';\nconst optionsManagers = new Set();\nlet guardTimeoutHandler = -1;\nlet innerGuardTimeoutHandler = -1;\nexport function unscheduleGuards() {\n  clearTimeout(guardTimeoutHandler);\n  clearTimeout(innerGuardTimeoutHandler);\n}\nexport function scheduleGuards() {\n  unscheduleGuards();\n  guardTimeoutHandler = window.setTimeout(() => {\n    innerGuardTimeoutHandler = window.setTimeout(() => {\n      optionsManagers.forEach(optionManager => optionManager.execGuards());\n    });\n  });\n}\nclass OptionsManager {\n  constructor() {\n    this.guards = {};\n    this.isUpdating = false;\n    this.onOptionChanged = this.onOptionChanged.bind(this);\n    this.wrapOptionValue = this.wrapOptionValue.bind(this);\n  }\n  setInstance(instance, config, subscribableOptions, independentEvents) {\n    this.instance = instance;\n    this.currentConfig = config;\n    this.subscribableOptions = new Set(subscribableOptions);\n    this.independentEvents = new Set(independentEvents);\n    optionsManagers.add(this);\n  }\n  getInitialOptions(rootNode) {\n    const config = buildConfig(rootNode, false);\n    const options = {};\n    Object.keys(config.options).forEach(key => {\n      options[key] = this.wrapOptionValue(key, config.options[key]);\n    });\n    return options;\n  }\n  getTemplateOptions(rootNode) {\n    const config = buildConfig(rootNode, false);\n    return config.templates;\n  }\n  update(config, dxtemplates) {\n    const changedOptions = [];\n    const optionChangedHandler = ({\n      value,\n      fullName\n    }) => {\n      changedOptions.push([fullName, value]);\n    };\n    this.instance.on('optionChanged', optionChangedHandler);\n    const changes = getChanges(config, this.currentConfig);\n    if (!changes.options && !changes.templates && !changes.removedOptions.length) {\n      return;\n    }\n    this.instance.beginUpdate();\n    this.isUpdating = true;\n    changes.removedOptions.forEach(optionName => {\n      this.resetOption(optionName);\n    });\n    if (Object.keys(dxtemplates).length > 0) {\n      this.setValue('integrationOptions', {\n        templates: dxtemplates\n      });\n    }\n    Object.keys(changes.options).forEach(key => {\n      this.setValue(key, changes.options[key]);\n    });\n    this.isUpdating = false;\n    this.instance.off('optionChanged', optionChangedHandler);\n    this.currentConfig = config;\n    changedOptions.forEach(([name, value]) => {\n      const currentPropValue = config.options[name];\n      if (Object.prototype.hasOwnProperty.call(config.options, name) && currentPropValue !== value) {\n        this.setValue(name, currentPropValue);\n      }\n    });\n    this.instance.endUpdate();\n  }\n  onOptionChanged(e) {\n    if (this.isUpdating) {\n      return;\n    }\n    let valueDescriptor = findValue(this.currentConfig, e.fullName.split('.'));\n    if (!valueDescriptor || valueDescriptor.value !== e.value) {\n      this.callOptionChangeHandler(e.fullName, e.value);\n    }\n    valueDescriptor = findValue(this.currentConfig, e.fullName.split('.'));\n    if (!valueDescriptor) {\n      return;\n    }\n    const {\n      value,\n      type\n    } = valueDescriptor;\n    if (value instanceof Array && type === ValueType.Array) {\n      for (let i = 0; i < value.length; i += 1) {\n        if (value[i] !== e.value?.[i]) {\n          this.addGuard(e.fullName, value);\n          return;\n        }\n      }\n    } else if (type === ValueType.Complex && value instanceof Object) {\n      Object.keys(value).forEach(key => {\n        if (value[key] === e.value?.[key]) {\n          return;\n        }\n        this.addGuard(mergeNameParts(e.fullName, key), value[key]);\n      });\n    } else {\n      const valuesAreEqual = value === e.value;\n      const valuesAreEqualObjects = !valuesAreEqual && value instanceof Object && e.value instanceof Object && shallowEquals(value, e.value);\n      if (valuesAreEqual || valuesAreEqualObjects || this.instance.skipOptionsRollBack) {\n        return;\n      }\n      this.addGuard(e.fullName, value);\n    }\n  }\n  get isInstanceSet() {\n    return !!this.instance;\n  }\n  dispose() {\n    optionsManagers.delete(this);\n    Object.keys(this.guards).forEach(optionName => {\n      delete this.guards[optionName];\n    });\n    this.instance = null;\n  }\n  isOptionSubscribable(optionName) {\n    return this.subscribableOptions.has(optionName);\n  }\n  isIndependentEvent(optionName) {\n    return this.independentEvents.has(optionName);\n  }\n  callOptionChangeHandler(optionName, optionValue) {\n    if (!this.isOptionSubscribable(optionName)) {\n      return;\n    }\n    const parts = optionName.split('.');\n    const propName = parts[parts.length - 1];\n    if (propName.startsWith('on')) {\n      return;\n    }\n    const eventName = `on${capitalizeFirstLetter(propName)}Change`;\n    parts[parts.length - 1] = eventName;\n    const changeEvent = findValue(this.currentConfig, parts);\n    if (!changeEvent) {\n      return;\n    }\n    if (typeof changeEvent.value !== 'function') {\n      throw new Error(`Invalid value for the ${eventName} property.\n                ${eventName} must be a function.`);\n    }\n    changeEvent.value(optionValue);\n  }\n  wrapOptionValue(name, value) {\n    if (name.substr(0, 2) === 'on' && typeof value === 'function') {\n      return (...args) => {\n        if (!this.isUpdating || this.isIndependentEvent(name)) {\n          value(...args);\n        }\n      };\n    }\n    return value;\n  }\n  addGuard(optionName, optionValue) {\n    if (this.guards[optionName] !== undefined) {\n      return;\n    }\n    const handler = () => {\n      this.setValue(optionName, optionValue);\n      delete this.guards[optionName];\n    };\n    this.guards[optionName] = handler;\n    scheduleGuards();\n  }\n  execGuards() {\n    Object.values(this.guards).forEach(handler => handler());\n  }\n  resetOption(name) {\n    this.instance.resetOption(name);\n  }\n  setValue(name, value) {\n    if (this.guards[name]) {\n      delete this.guards[name];\n    }\n    this.instance.option(name, this.wrapOptionValue(name, value));\n  }\n}\nexport { OptionsManager };","map":{"version":3,"names":["getChanges","buildConfig","findValue","ValueType","mergeNameParts","shallowEquals","capitalizeFirstLetter","optionsManagers","Set","guardTimeoutHandler","innerGuardTimeoutHandler","unscheduleGuards","clearTimeout","scheduleGuards","window","setTimeout","forEach","optionManager","execGuards","OptionsManager","constructor","guards","isUpdating","onOptionChanged","bind","wrapOptionValue","setInstance","instance","config","subscribableOptions","independentEvents","currentConfig","add","getInitialOptions","rootNode","options","Object","keys","key","getTemplateOptions","templates","update","dxtemplates","changedOptions","optionChangedHandler","value","fullName","push","on","changes","removedOptions","length","beginUpdate","optionName","resetOption","setValue","off","name","currentPropValue","prototype","hasOwnProperty","call","endUpdate","e","valueDescriptor","split","callOptionChangeHandler","type","Array","i","addGuard","Complex","valuesAreEqual","valuesAreEqualObjects","skipOptionsRollBack","isInstanceSet","dispose","delete","isOptionSubscribable","has","isIndependentEvent","optionValue","parts","propName","startsWith","eventName","changeEvent","Error","substr","args","undefined","handler","values","option"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme-react/esm/core/options-manager.js"],"sourcesContent":["/*!\n * devextreme-react\n * Version: 24.2.7\n * Build date: Mon Apr 28 2025\n *\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n/* eslint-disable no-restricted-globals */\nimport { getChanges } from './configuration/comparer';\nimport { buildConfig, findValue, ValueType } from './configuration/tree';\nimport { mergeNameParts, shallowEquals } from './configuration/utils';\nimport { capitalizeFirstLetter } from './helpers';\nconst optionsManagers = new Set();\nlet guardTimeoutHandler = -1;\nlet innerGuardTimeoutHandler = -1;\nexport function unscheduleGuards() {\n    clearTimeout(guardTimeoutHandler);\n    clearTimeout(innerGuardTimeoutHandler);\n}\nexport function scheduleGuards() {\n    unscheduleGuards();\n    guardTimeoutHandler = window.setTimeout(() => {\n        innerGuardTimeoutHandler = window.setTimeout(() => {\n            optionsManagers.forEach((optionManager) => optionManager.execGuards());\n        });\n    });\n}\nclass OptionsManager {\n    constructor() {\n        this.guards = {};\n        this.isUpdating = false;\n        this.onOptionChanged = this.onOptionChanged.bind(this);\n        this.wrapOptionValue = this.wrapOptionValue.bind(this);\n    }\n    setInstance(instance, config, subscribableOptions, independentEvents) {\n        this.instance = instance;\n        this.currentConfig = config;\n        this.subscribableOptions = new Set(subscribableOptions);\n        this.independentEvents = new Set(independentEvents);\n        optionsManagers.add(this);\n    }\n    getInitialOptions(rootNode) {\n        const config = buildConfig(rootNode, false);\n        const options = {};\n        Object.keys(config.options).forEach((key) => {\n            options[key] = this.wrapOptionValue(key, config.options[key]);\n        });\n        return options;\n    }\n    getTemplateOptions(rootNode) {\n        const config = buildConfig(rootNode, false);\n        return config.templates;\n    }\n    update(config, dxtemplates) {\n        const changedOptions = [];\n        const optionChangedHandler = ({ value, fullName }) => {\n            changedOptions.push([fullName, value]);\n        };\n        this.instance.on('optionChanged', optionChangedHandler);\n        const changes = getChanges(config, this.currentConfig);\n        if (!changes.options && !changes.templates && !changes.removedOptions.length) {\n            return;\n        }\n        this.instance.beginUpdate();\n        this.isUpdating = true;\n        changes.removedOptions.forEach((optionName) => {\n            this.resetOption(optionName);\n        });\n        if (Object.keys(dxtemplates).length > 0) {\n            this.setValue('integrationOptions', {\n                templates: dxtemplates,\n            });\n        }\n        Object.keys(changes.options).forEach((key) => {\n            this.setValue(key, changes.options[key]);\n        });\n        this.isUpdating = false;\n        this.instance.off('optionChanged', optionChangedHandler);\n        this.currentConfig = config;\n        changedOptions.forEach(([name, value]) => {\n            const currentPropValue = config.options[name];\n            if (Object.prototype.hasOwnProperty.call(config.options, name)\n                && currentPropValue !== value) {\n                this.setValue(name, currentPropValue);\n            }\n        });\n        this.instance.endUpdate();\n    }\n    onOptionChanged(e) {\n        if (this.isUpdating) {\n            return;\n        }\n        let valueDescriptor = findValue(this.currentConfig, e.fullName.split('.'));\n        if (!valueDescriptor || valueDescriptor.value !== e.value) {\n            this.callOptionChangeHandler(e.fullName, e.value);\n        }\n        valueDescriptor = findValue(this.currentConfig, e.fullName.split('.'));\n        if (!valueDescriptor) {\n            return;\n        }\n        const { value, type } = valueDescriptor;\n        if (value instanceof Array && type === ValueType.Array) {\n            for (let i = 0; i < value.length; i += 1) {\n                if (value[i] !== e.value?.[i]) {\n                    this.addGuard(e.fullName, value);\n                    return;\n                }\n            }\n        }\n        else if (type === ValueType.Complex && value instanceof Object) {\n            Object.keys(value).forEach((key) => {\n                if (value[key] === e.value?.[key]) {\n                    return;\n                }\n                this.addGuard(mergeNameParts(e.fullName, key), value[key]);\n            });\n        }\n        else {\n            const valuesAreEqual = value === e.value;\n            const valuesAreEqualObjects = !valuesAreEqual\n                && value instanceof Object\n                && e.value instanceof Object\n                && shallowEquals(value, e.value);\n            if (valuesAreEqual || valuesAreEqualObjects || this.instance.skipOptionsRollBack) {\n                return;\n            }\n            this.addGuard(e.fullName, value);\n        }\n    }\n    get isInstanceSet() {\n        return !!this.instance;\n    }\n    dispose() {\n        optionsManagers.delete(this);\n        Object.keys(this.guards).forEach((optionName) => {\n            delete this.guards[optionName];\n        });\n        this.instance = null;\n    }\n    isOptionSubscribable(optionName) {\n        return this.subscribableOptions.has(optionName);\n    }\n    isIndependentEvent(optionName) {\n        return this.independentEvents.has(optionName);\n    }\n    callOptionChangeHandler(optionName, optionValue) {\n        if (!this.isOptionSubscribable(optionName)) {\n            return;\n        }\n        const parts = optionName.split('.');\n        const propName = parts[parts.length - 1];\n        if (propName.startsWith('on')) {\n            return;\n        }\n        const eventName = `on${capitalizeFirstLetter(propName)}Change`;\n        parts[parts.length - 1] = eventName;\n        const changeEvent = findValue(this.currentConfig, parts);\n        if (!changeEvent) {\n            return;\n        }\n        if (typeof changeEvent.value !== 'function') {\n            throw new Error(`Invalid value for the ${eventName} property.\r\n                ${eventName} must be a function.`);\n        }\n        changeEvent.value(optionValue);\n    }\n    wrapOptionValue(name, value) {\n        if (name.substr(0, 2) === 'on' && typeof value === 'function') {\n            return (...args) => {\n                if (!this.isUpdating || this.isIndependentEvent(name)) {\n                    value(...args);\n                }\n            };\n        }\n        return value;\n    }\n    addGuard(optionName, optionValue) {\n        if (this.guards[optionName] !== undefined) {\n            return;\n        }\n        const handler = () => {\n            this.setValue(optionName, optionValue);\n            delete this.guards[optionName];\n        };\n        this.guards[optionName] = handler;\n        scheduleGuards();\n    }\n    execGuards() {\n        Object.values(this.guards)\n            .forEach((handler) => handler());\n    }\n    resetOption(name) {\n        this.instance.resetOption(name);\n    }\n    setValue(name, value) {\n        if (this.guards[name]) {\n            delete this.guards[name];\n        }\n        this.instance.option(name, this.wrapOptionValue(name, value));\n    }\n}\nexport { OptionsManager, };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}