{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_math.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isExponential } from \"../../../core/utils/type\";\nconst sign = function (value) {\n  if (0 === value) {\n    return 0;\n  }\n  return value / Math.abs(value);\n};\nconst fitIntoRange = function (value, minValue, maxValue) {\n  const isMinValueUndefined = !minValue && 0 !== minValue;\n  const isMaxValueUndefined = !maxValue && 0 !== maxValue;\n  isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\n  isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\n  return Math.min(Math.max(value, minValue), maxValue);\n};\nconst inRange = function (value, minValue, maxValue) {\n  return value >= minValue && value <= maxValue;\n};\nfunction getExponent(value) {\n  return Math.abs(parseInt(value.toExponential().split(\"e\")[1], 10));\n}\nfunction getExponentialNotation(value) {\n  const parts = value.toExponential().split(\"e\");\n  const mantissa = parseFloat(parts[0]);\n  const exponent = parseInt(parts[1], 10);\n  return {\n    exponent: exponent,\n    mantissa: mantissa\n  };\n}\nfunction multiplyInExponentialForm(value, exponentShift) {\n  const exponentialNotation = getExponentialNotation(value);\n  return parseFloat(`${exponentialNotation.mantissa}e${exponentialNotation.exponent + exponentShift}`);\n}\nfunction isEdgeBug() {\n  return \"0.000300\" !== 3e-4.toPrecision(3);\n}\nfunction adjust(value, interval) {\n  let precision = getPrecision(interval || 0) + 2;\n  const separatedValue = value.toString().split(\".\");\n  const sourceValue = value;\n  const absValue = Math.abs(value);\n  let separatedAdjustedValue;\n  const isExponentValue = isExponential(value);\n  const integerPart = absValue > 1 ? 10 : 0;\n  if (1 === separatedValue.length) {\n    return value;\n  }\n  if (!isExponentValue) {\n    if (isExponential(interval)) {\n      precision = separatedValue[0].length + getExponent(interval);\n    }\n    value = absValue;\n    value = value - Math.floor(value) + integerPart;\n  }\n  precision = isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\n  if (!isExponentValue) {\n    separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\n    if (separatedAdjustedValue[0] === integerPart.toString()) {\n      return parseFloat(`${separatedValue[0]}.${separatedAdjustedValue[1]}`);\n    }\n  }\n  return parseFloat(sourceValue.toPrecision(precision));\n}\nfunction getPrecision(value) {\n  const str = value.toString();\n  if (str.indexOf(\".\") < 0) {\n    return 0;\n  }\n  const mantissa = str.split(\".\");\n  const positionOfDelimiter = mantissa[1].indexOf(\"e\");\n  return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;\n}\nfunction getRoot(x, n) {\n  if (x < 0 && n % 2 !== 1) {\n    return NaN;\n  }\n  const y = Math.abs(x) ** (1 / n);\n  return n % 2 === 1 && x < 0 ? -y : y;\n}\nfunction solveCubicEquation(a, b, c, d) {\n  if (Math.abs(a) < 1e-8) {\n    a = b;\n    b = c;\n    c = d;\n    if (Math.abs(a) < 1e-8) {\n      a = b;\n      b = c;\n      if (Math.abs(a) < 1e-8) {\n        return [];\n      }\n      return [-b / a];\n    }\n    const D2 = b * b - 4 * a * c;\n    if (Math.abs(D2) < 1e-8) {\n      return [-b / (2 * a)];\n    }\n    if (D2 > 0) {\n      return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)];\n    }\n    return [];\n  }\n  const p = (3 * a * c - b * b) / (3 * a * a);\n  const q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\n  let roots;\n  let u;\n  if (Math.abs(p) < 1e-8) {\n    roots = [getRoot(-q, 3)];\n  } else if (Math.abs(q) < 1e-8) {\n    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\n  } else {\n    const D3 = q * q / 4 + p * p * p / 27;\n    if (Math.abs(D3) < 1e-8) {\n      roots = [-1.5 * q / p, 3 * q / p];\n    } else if (D3 > 0) {\n      u = getRoot(-q / 2 - Math.sqrt(D3), 3);\n      roots = [u - p / (3 * u)];\n    } else {\n      u = 2 * Math.sqrt(-p / 3);\n      const t = Math.acos(3 * q / p / u) / 3;\n      const k = 2 * Math.PI / 3;\n      roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];\n    }\n  }\n  for (let i = 0; i < roots.length; i++) {\n    roots[i] -= b / (3 * a);\n  }\n  return roots;\n}\nfunction trunc(value) {\n  return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value);\n}\nfunction getRemainderByDivision(dividend, divider, digitsCount) {\n  if (divider === parseInt(divider, 10)) {\n    return dividend % divider;\n  }\n  const quotient = roundFloatPart(dividend / divider, digitsCount);\n  return (quotient - parseInt(quotient, 10)) * divider;\n}\nfunction getExponentLength(value) {\n  var _valueString$split$;\n  const valueString = value.toString();\n  return (null === (_valueString$split$ = valueString.split(\".\")[1]) || void 0 === _valueString$split$ ? void 0 : _valueString$split$.length) || parseInt(valueString.split(\"e-\")[1], 10) || 0;\n}\nfunction roundFloatPart(value) {\n  let digitsCount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n  return parseFloat(value.toFixed(digitsCount));\n}\nexport { adjust, fitIntoRange, getExponent, getExponentLength, getPrecision, getRemainderByDivision, getRoot, inRange, multiplyInExponentialForm, roundFloatPart, sign, solveCubicEquation, trunc };","map":{"version":3,"names":["isExponential","sign","value","Math","abs","fitIntoRange","minValue","maxValue","isMinValueUndefined","isMaxValueUndefined","min","max","inRange","getExponent","parseInt","toExponential","split","getExponentialNotation","parts","mantissa","parseFloat","exponent","multiplyInExponentialForm","exponentShift","exponentialNotation","isEdgeBug","toPrecision","adjust","interval","precision","getPrecision","separatedValue","toString","sourceValue","absValue","separatedAdjustedValue","isExponentValue","integerPart","length","floor","str","indexOf","positionOfDelimiter","getRoot","x","n","NaN","y","solveCubicEquation","a","b","c","d","D2","sqrt","p","q","roots","u","concat","D3","t","acos","k","PI","cos","i","trunc","ceil","getRemainderByDivision","dividend","divider","digitsCount","quotient","roundFloatPart","getExponentLength","_valueString$split$","valueString","arguments","toFixed"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_math.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_math.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isExponential\r\n} from \"../../../core/utils/type\";\r\nconst sign = function(value) {\r\n    if (0 === value) {\r\n        return 0\r\n    }\r\n    return value / Math.abs(value)\r\n};\r\nconst fitIntoRange = function(value, minValue, maxValue) {\r\n    const isMinValueUndefined = !minValue && 0 !== minValue;\r\n    const isMaxValueUndefined = !maxValue && 0 !== maxValue;\r\n    isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\r\n    isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\r\n    return Math.min(Math.max(value, minValue), maxValue)\r\n};\r\nconst inRange = function(value, minValue, maxValue) {\r\n    return value >= minValue && value <= maxValue\r\n};\r\n\r\nfunction getExponent(value) {\r\n    return Math.abs(parseInt(value.toExponential().split(\"e\")[1], 10))\r\n}\r\n\r\nfunction getExponentialNotation(value) {\r\n    const parts = value.toExponential().split(\"e\");\r\n    const mantissa = parseFloat(parts[0]);\r\n    const exponent = parseInt(parts[1], 10);\r\n    return {\r\n        exponent: exponent,\r\n        mantissa: mantissa\r\n    }\r\n}\r\n\r\nfunction multiplyInExponentialForm(value, exponentShift) {\r\n    const exponentialNotation = getExponentialNotation(value);\r\n    return parseFloat(`${exponentialNotation.mantissa}e${exponentialNotation.exponent+exponentShift}`)\r\n}\r\n\r\nfunction isEdgeBug() {\r\n    return \"0.000300\" !== 3e-4.toPrecision(3)\r\n}\r\n\r\nfunction adjust(value, interval) {\r\n    let precision = getPrecision(interval || 0) + 2;\r\n    const separatedValue = value.toString().split(\".\");\r\n    const sourceValue = value;\r\n    const absValue = Math.abs(value);\r\n    let separatedAdjustedValue;\r\n    const isExponentValue = isExponential(value);\r\n    const integerPart = absValue > 1 ? 10 : 0;\r\n    if (1 === separatedValue.length) {\r\n        return value\r\n    }\r\n    if (!isExponentValue) {\r\n        if (isExponential(interval)) {\r\n            precision = separatedValue[0].length + getExponent(interval)\r\n        }\r\n        value = absValue;\r\n        value = value - Math.floor(value) + integerPart\r\n    }\r\n    precision = isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\r\n    if (!isExponentValue) {\r\n        separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\r\n        if (separatedAdjustedValue[0] === integerPart.toString()) {\r\n            return parseFloat(`${separatedValue[0]}.${separatedAdjustedValue[1]}`)\r\n        }\r\n    }\r\n    return parseFloat(sourceValue.toPrecision(precision))\r\n}\r\n\r\nfunction getPrecision(value) {\r\n    const str = value.toString();\r\n    if (str.indexOf(\".\") < 0) {\r\n        return 0\r\n    }\r\n    const mantissa = str.split(\".\");\r\n    const positionOfDelimiter = mantissa[1].indexOf(\"e\");\r\n    return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length\r\n}\r\n\r\nfunction getRoot(x, n) {\r\n    if (x < 0 && n % 2 !== 1) {\r\n        return NaN\r\n    }\r\n    const y = Math.abs(x) ** (1 / n);\r\n    return n % 2 === 1 && x < 0 ? -y : y\r\n}\r\n\r\nfunction solveCubicEquation(a, b, c, d) {\r\n    if (Math.abs(a) < 1e-8) {\r\n        a = b;\r\n        b = c;\r\n        c = d;\r\n        if (Math.abs(a) < 1e-8) {\r\n            a = b;\r\n            b = c;\r\n            if (Math.abs(a) < 1e-8) {\r\n                return []\r\n            }\r\n            return [-b / a]\r\n        }\r\n        const D2 = b * b - 4 * a * c;\r\n        if (Math.abs(D2) < 1e-8) {\r\n            return [-b / (2 * a)]\r\n        }\r\n        if (D2 > 0) {\r\n            return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)]\r\n        }\r\n        return []\r\n    }\r\n    const p = (3 * a * c - b * b) / (3 * a * a);\r\n    const q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\r\n    let roots;\r\n    let u;\r\n    if (Math.abs(p) < 1e-8) {\r\n        roots = [getRoot(-q, 3)]\r\n    } else if (Math.abs(q) < 1e-8) {\r\n        roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : [])\r\n    } else {\r\n        const D3 = q * q / 4 + p * p * p / 27;\r\n        if (Math.abs(D3) < 1e-8) {\r\n            roots = [-1.5 * q / p, 3 * q / p]\r\n        } else if (D3 > 0) {\r\n            u = getRoot(-q / 2 - Math.sqrt(D3), 3);\r\n            roots = [u - p / (3 * u)]\r\n        } else {\r\n            u = 2 * Math.sqrt(-p / 3);\r\n            const t = Math.acos(3 * q / p / u) / 3;\r\n            const k = 2 * Math.PI / 3;\r\n            roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)]\r\n        }\r\n    }\r\n    for (let i = 0; i < roots.length; i++) {\r\n        roots[i] -= b / (3 * a)\r\n    }\r\n    return roots\r\n}\r\n\r\nfunction trunc(value) {\r\n    return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value)\r\n}\r\n\r\nfunction getRemainderByDivision(dividend, divider, digitsCount) {\r\n    if (divider === parseInt(divider, 10)) {\r\n        return dividend % divider\r\n    }\r\n    const quotient = roundFloatPart(dividend / divider, digitsCount);\r\n    return (quotient - parseInt(quotient, 10)) * divider\r\n}\r\n\r\nfunction getExponentLength(value) {\r\n    var _valueString$split$;\r\n    const valueString = value.toString();\r\n    return (null === (_valueString$split$ = valueString.split(\".\")[1]) || void 0 === _valueString$split$ ? void 0 : _valueString$split$.length) || parseInt(valueString.split(\"e-\")[1], 10) || 0\r\n}\r\n\r\nfunction roundFloatPart(value) {\r\n    let digitsCount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n    return parseFloat(value.toFixed(digitsCount))\r\n}\r\nexport {\r\n    adjust,\r\n    fitIntoRange,\r\n    getExponent,\r\n    getExponentLength,\r\n    getPrecision,\r\n    getRemainderByDivision,\r\n    getRoot,\r\n    inRange,\r\n    multiplyInExponentialForm,\r\n    roundFloatPart,\r\n    sign,\r\n    solveCubicEquation,\r\n    trunc\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}