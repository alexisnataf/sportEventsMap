{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/toolbar/m_toolbar.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { fx } from \"../../../common/core/animation\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport $ from \"../../../core/renderer\";\nimport { BindableTemplate } from \"../../../core/templates/bindable_template\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { getHeight, getOuterWidth, getWidth } from \"../../../core/utils/size\";\nimport { isDefined, isPlainObject } from \"../../../core/utils/type\";\nimport { isMaterial, isMaterialBased, waitWebFont } from \"../../../ui/themes\";\nimport CollectionWidgetAsync from \"../../ui/collection/m_collection_widget.async\";\nimport { TOOLBAR_CLASS } from \"./m_constants\";\nconst TOOLBAR_BEFORE_CLASS = \"dx-toolbar-before\";\nconst TOOLBAR_CENTER_CLASS = \"dx-toolbar-center\";\nconst TOOLBAR_AFTER_CLASS = \"dx-toolbar-after\";\nconst TOOLBAR_MINI_CLASS = \"dx-toolbar-mini\";\nconst TOOLBAR_ITEM_CLASS = \"dx-toolbar-item\";\nconst TOOLBAR_LABEL_CLASS = \"dx-toolbar-label\";\nconst TOOLBAR_BUTTON_CLASS = \"dx-toolbar-button\";\nconst TOOLBAR_ITEMS_CONTAINER_CLASS = \"dx-toolbar-items-container\";\nconst TOOLBAR_GROUP_CLASS = \"dx-toolbar-group\";\nconst TOOLBAR_COMPACT_CLASS = \"dx-toolbar-compact\";\nconst TEXT_BUTTON_MODE = \"text\";\nconst DEFAULT_BUTTON_TYPE = \"default\";\nconst DEFAULT_DROPDOWNBUTTON_STYLING_MODE = \"contained\";\nconst TOOLBAR_ITEM_DATA_KEY = \"dxToolbarItemDataKey\";\nconst ANIMATION_TIMEOUT = 15;\nclass ToolbarBase extends CollectionWidgetAsync {\n  _getSynchronizableOptionsForCreateComponent() {\n    return super._getSynchronizableOptionsForCreateComponent().filter(item => \"disabled\" !== item);\n  }\n  _initTemplates() {\n    super._initTemplates();\n    const template = new BindableTemplate(($container, data, rawModel) => {\n      if (isPlainObject(data)) {\n        const {\n          text: text,\n          html: html,\n          widget: widget\n        } = data;\n        if (text) {\n          $container.text(text).wrapInner(\"<div>\");\n        }\n        if (html) {\n          $container.html(html);\n        }\n        if (\"dxDropDownButton\" === widget) {\n          data.options = data.options ?? {};\n          if (!isDefined(data.options.stylingMode)) {\n            data.options.stylingMode = this.option(\"useFlatButtons\") ? \"text\" : \"contained\";\n          }\n        }\n        if (\"dxButton\" === widget) {\n          if (this.option(\"useFlatButtons\")) {\n            data.options = data.options ?? {};\n            data.options.stylingMode = data.options.stylingMode ?? \"text\";\n          }\n          if (this.option(\"useDefaultButtons\")) {\n            data.options = data.options ?? {};\n            data.options.type = data.options.type ?? \"default\";\n          }\n        }\n      } else {\n        $container.text(String(data));\n      }\n      this._getTemplate(\"dx-polymorph-widget\").render({\n        container: $container,\n        model: rawModel,\n        parent: this\n      });\n    }, [\"text\", \"html\", \"widget\", \"options\"], this.option(\"integrationOptions.watchMethod\"));\n    this._templateManager.addDefaultTemplates({\n      item: template,\n      menuItem: template\n    });\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      renderAs: \"topToolbar\",\n      grouped: false,\n      useFlatButtons: false,\n      useDefaultButtons: false\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => isMaterialBased(),\n      options: {\n        useFlatButtons: true\n      }\n    }]);\n  }\n  _itemContainer() {\n    return this._$toolbarItemsContainer.find([\".dx-toolbar-before\", \".dx-toolbar-center\", \".dx-toolbar-after\"].join(\",\"));\n  }\n  _itemClass() {\n    return \"dx-toolbar-item\";\n  }\n  _itemDataKey() {\n    return TOOLBAR_ITEM_DATA_KEY;\n  }\n  _dimensionChanged(dimension) {\n    if (this._disposed) {\n      return;\n    }\n    this._arrangeItems();\n    this._applyCompactMode();\n  }\n  _initMarkup() {\n    this._renderToolbar();\n    this._renderSections();\n    super._initMarkup();\n  }\n  _render() {\n    super._render();\n    this._updateDimensionsInMaterial();\n  }\n  _postProcessRenderItems() {\n    this._arrangeItems();\n  }\n  _renderToolbar() {\n    this.$element().addClass(TOOLBAR_CLASS);\n    this._$toolbarItemsContainer = $(\"<div>\").addClass(\"dx-toolbar-items-container\").appendTo(this.$element());\n    this.setAria(\"role\", \"toolbar\");\n  }\n  _renderSections() {\n    const $container = this._$toolbarItemsContainer;\n    each([\"before\", \"center\", \"after\"], (_, section) => {\n      const sectionClass = `dx-toolbar-${section}`;\n      const $section = $container.find(`.${sectionClass}`);\n      if (!$section.length) {\n        this[`_$${section}Section`] = $(\"<div>\").addClass(sectionClass).attr(\"role\", \"presentation\").appendTo($container);\n      }\n    });\n  }\n  _arrangeItems(width) {\n    var _this$_$beforeSection, _this$_$afterSection;\n    const elementWidth = width ?? getWidth(this.$element());\n    this._$centerSection.css({\n      margin: \"0 auto\",\n      float: \"none\"\n    });\n    const beforeRect = getBoundingRect(null === (_this$_$beforeSection = this._$beforeSection) || void 0 === _this$_$beforeSection ? void 0 : _this$_$beforeSection.get(0));\n    const afterRect = getBoundingRect(null === (_this$_$afterSection = this._$afterSection) || void 0 === _this$_$afterSection ? void 0 : _this$_$afterSection.get(0));\n    this._alignCenterSection(beforeRect, afterRect, elementWidth);\n    const $label = this._$toolbarItemsContainer.find(\".dx-toolbar-label\").eq(0);\n    const $section = $label.parent();\n    if (!$label.length) {\n      return;\n    }\n    const labelOffset = beforeRect.width ? beforeRect.width : $label.position().left;\n    const widthBeforeSection = $section.hasClass(\"dx-toolbar-before\") ? 0 : labelOffset;\n    const widthAfterSection = $section.hasClass(\"dx-toolbar-after\") ? 0 : afterRect.width;\n    let elemsAtSectionWidth = 0;\n    $section.children().not(\".dx-toolbar-label\").each((index, element) => {\n      elemsAtSectionWidth += getOuterWidth(element);\n    });\n    const freeSpace = elementWidth - elemsAtSectionWidth;\n    const sectionMaxWidth = Math.max(freeSpace - widthBeforeSection - widthAfterSection, 0);\n    if ($section.hasClass(\"dx-toolbar-before\")) {\n      this._alignSection(this._$beforeSection, sectionMaxWidth);\n    } else {\n      const labelPaddings = getOuterWidth($label) - getWidth($label);\n      $label.css(\"maxWidth\", sectionMaxWidth - labelPaddings);\n    }\n  }\n  _alignCenterSection(beforeRect, afterRect, elementWidth) {\n    var _this$_$centerSection;\n    this._alignSection(this._$centerSection, elementWidth - beforeRect.width - afterRect.width);\n    const isRTL = this.option(\"rtlEnabled\");\n    const leftRect = isRTL ? afterRect : beforeRect;\n    const rightRect = isRTL ? beforeRect : afterRect;\n    const centerRect = getBoundingRect(null === (_this$_$centerSection = this._$centerSection) || void 0 === _this$_$centerSection ? void 0 : _this$_$centerSection.get(0));\n    if (leftRect.right > centerRect.left || centerRect.right > rightRect.left) {\n      this._$centerSection.css({\n        marginLeft: leftRect.width,\n        marginRight: rightRect.width,\n        float: leftRect.width > rightRect.width ? \"none\" : \"right\"\n      });\n    }\n  }\n  _alignSection($section, maxWidth) {\n    const $labels = $section.find(\".dx-toolbar-label\");\n    let labels = $labels.toArray();\n    maxWidth -= this._getCurrentLabelsPaddings(labels);\n    const currentWidth = this._getCurrentLabelsWidth(labels);\n    const difference = Math.abs(currentWidth - maxWidth);\n    if (maxWidth < currentWidth) {\n      labels = labels.reverse();\n      this._alignSectionLabels(labels, difference, false);\n    } else {\n      this._alignSectionLabels(labels, difference, true);\n    }\n  }\n  _alignSectionLabels(labels, difference, expanding) {\n    const getRealLabelWidth = function (label) {\n      return getBoundingRect(label).width;\n    };\n    for (let i = 0; i < labels.length; i++) {\n      const $label = $(labels[i]);\n      const currentLabelWidth = Math.ceil(getRealLabelWidth(labels[i]));\n      let labelMaxWidth;\n      if (expanding) {\n        $label.css(\"maxWidth\", \"inherit\");\n      }\n      const possibleLabelWidth = Math.ceil(expanding ? getRealLabelWidth(labels[i]) : currentLabelWidth);\n      if (possibleLabelWidth < difference) {\n        labelMaxWidth = expanding ? possibleLabelWidth : 0;\n        difference -= possibleLabelWidth;\n      } else {\n        labelMaxWidth = expanding ? currentLabelWidth + difference : currentLabelWidth - difference;\n        $label.css(\"maxWidth\", labelMaxWidth);\n        break;\n      }\n      $label.css(\"maxWidth\", labelMaxWidth);\n    }\n  }\n  _applyCompactMode() {\n    const $element = $(this.element());\n    $element.removeClass(\"dx-toolbar-compact\");\n    if (this.option(\"compactMode\") && this._getSummaryItemsSize(\"width\", this._itemElements(), true) > getWidth($element)) {\n      $element.addClass(\"dx-toolbar-compact\");\n    }\n  }\n  _getCurrentLabelsWidth(labels) {\n    let width = 0;\n    labels.forEach(label => {\n      width += getOuterWidth(label);\n    });\n    return width;\n  }\n  _getCurrentLabelsPaddings(labels) {\n    let padding = 0;\n    labels.forEach(label => {\n      padding += getOuterWidth(label) - getWidth(label);\n    });\n    return padding;\n  }\n  _renderItem(index, item, itemContainer, $after) {\n    const location = item.location ?? \"center\";\n    const container = itemContainer ?? this[`_$${location}Section`];\n    const itemHasText = !!(item.text ?? item.html);\n    const itemElement = super._renderItem(index, item, container, $after);\n    itemElement.toggleClass(\"dx-toolbar-button\", !itemHasText).toggleClass(\"dx-toolbar-label\", itemHasText).addClass(item.cssClass);\n    return itemElement;\n  }\n  _renderGroupedItems() {\n    each(this.option(\"items\"), (groupIndex, group) => {\n      const groupItems = group.items;\n      const $container = $(\"<div>\").addClass(\"dx-toolbar-group\");\n      const location = group.location ?? \"center\";\n      if (!groupItems || !groupItems.length) {\n        return;\n      }\n      each(groupItems, (itemIndex, item) => {\n        this._renderItem(itemIndex, item, $container, null);\n      });\n      this._$toolbarItemsContainer.find(`.dx-toolbar-${location}`).append($container);\n    });\n  }\n  _renderItems(items) {\n    const grouped = this.option(\"grouped\") && items.length && items[0].items;\n    grouped ? this._renderGroupedItems() : super._renderItems(items);\n  }\n  _getToolbarItems() {\n    return this.option(\"items\") ?? [];\n  }\n  _renderContentImpl() {\n    const items = this._getToolbarItems();\n    this.$element().toggleClass(\"dx-toolbar-mini\", 0 === items.length);\n    if (this._renderedItemsCount) {\n      this._renderItems(items.slice(this._renderedItemsCount));\n    } else {\n      this._renderItems(items);\n    }\n    this._applyCompactMode();\n  }\n  _renderEmptyMessage() {}\n  _clean() {\n    this._$toolbarItemsContainer.children().empty();\n    this.$element().empty();\n    delete this._$beforeSection;\n    delete this._$centerSection;\n    delete this._$afterSection;\n  }\n  _visibilityChanged(visible) {\n    if (visible) {\n      this._arrangeItems();\n    }\n  }\n  _isVisible() {\n    return getWidth(this.$element()) > 0 && getHeight(this.$element()) > 0;\n  }\n  _getIndexByItem(item) {\n    return this._getToolbarItems().indexOf(item);\n  }\n  _itemOptionChanged(item, property, value, prevValue) {\n    super._itemOptionChanged(item, property, value, prevValue);\n    this._arrangeItems();\n  }\n  _optionChanged(args) {\n    const {\n      name: name\n    } = args;\n    switch (name) {\n      case \"width\":\n        super._optionChanged(args);\n        this._dimensionChanged();\n        break;\n      case \"renderAs\":\n      case \"useFlatButtons\":\n      case \"useDefaultButtons\":\n        this._invalidate();\n        break;\n      case \"compactMode\":\n        this._applyCompactMode();\n        break;\n      case \"grouped\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _dispose() {\n    super._dispose();\n    clearTimeout(this._waitParentAnimationTimeout);\n  }\n  _updateDimensionsInMaterial() {\n    if (isMaterial()) {\n      const _waitParentAnimationFinished = () => new Promise(resolve => {\n        const check = () => {\n          let readyToResolve = true;\n          this.$element().parents().each((_, parent) => {\n            if (fx.isAnimating($(parent))) {\n              readyToResolve = false;\n              return false;\n            }\n          });\n          if (readyToResolve) {\n            resolve();\n          }\n          return readyToResolve;\n        };\n        const runCheck = () => {\n          clearTimeout(this._waitParentAnimationTimeout);\n          this._waitParentAnimationTimeout = setTimeout(() => check() || runCheck(), 15);\n        };\n        runCheck();\n      });\n      const _checkWebFontForLabelsLoaded = () => {\n        const $labels = this.$element().find(\".dx-toolbar-label\");\n        const promises = [];\n        $labels.each((_, label) => {\n          const text = $(label).text();\n          const fontWeight = $(label).css(\"fontWeight\");\n          promises.push(waitWebFont(text, fontWeight));\n        });\n        return Promise.all(promises);\n      };\n      Promise.all([_waitParentAnimationFinished(), _checkWebFontForLabelsLoaded()]).then(() => {\n        this._dimensionChanged();\n      });\n    }\n  }\n}\nregisterComponent(\"dxToolbarBase\", ToolbarBase);\nexport default ToolbarBase;","map":{"version":3,"names":["_extends","fx","registerComponent","$","BindableTemplate","each","getBoundingRect","getHeight","getOuterWidth","getWidth","isDefined","isPlainObject","isMaterial","isMaterialBased","waitWebFont","CollectionWidgetAsync","TOOLBAR_CLASS","TOOLBAR_BEFORE_CLASS","TOOLBAR_CENTER_CLASS","TOOLBAR_AFTER_CLASS","TOOLBAR_MINI_CLASS","TOOLBAR_ITEM_CLASS","TOOLBAR_LABEL_CLASS","TOOLBAR_BUTTON_CLASS","TOOLBAR_ITEMS_CONTAINER_CLASS","TOOLBAR_GROUP_CLASS","TOOLBAR_COMPACT_CLASS","TEXT_BUTTON_MODE","DEFAULT_BUTTON_TYPE","DEFAULT_DROPDOWNBUTTON_STYLING_MODE","TOOLBAR_ITEM_DATA_KEY","ANIMATION_TIMEOUT","ToolbarBase","_getSynchronizableOptionsForCreateComponent","filter","item","_initTemplates","template","$container","data","rawModel","text","html","widget","wrapInner","options","stylingMode","option","type","String","_getTemplate","render","container","model","parent","_templateManager","addDefaultTemplates","menuItem","_getDefaultOptions","renderAs","grouped","useFlatButtons","useDefaultButtons","_defaultOptionsRules","concat","device","_itemContainer","_$toolbarItemsContainer","find","join","_itemClass","_itemDataKey","_dimensionChanged","dimension","_disposed","_arrangeItems","_applyCompactMode","_initMarkup","_renderToolbar","_renderSections","_render","_updateDimensionsInMaterial","_postProcessRenderItems","$element","addClass","appendTo","setAria","_","section","sectionClass","$section","length","attr","width","_this$_$beforeSection","_this$_$afterSection","elementWidth","_$centerSection","css","margin","float","beforeRect","_$beforeSection","get","afterRect","_$afterSection","_alignCenterSection","$label","eq","labelOffset","position","left","widthBeforeSection","hasClass","widthAfterSection","elemsAtSectionWidth","children","not","index","element","freeSpace","sectionMaxWidth","Math","max","_alignSection","labelPaddings","_this$_$centerSection","isRTL","leftRect","rightRect","centerRect","right","marginLeft","marginRight","maxWidth","$labels","labels","toArray","_getCurrentLabelsPaddings","currentWidth","_getCurrentLabelsWidth","difference","abs","reverse","_alignSectionLabels","expanding","getRealLabelWidth","label","i","currentLabelWidth","ceil","labelMaxWidth","possibleLabelWidth","removeClass","_getSummaryItemsSize","_itemElements","forEach","padding","_renderItem","itemContainer","$after","location","itemHasText","itemElement","toggleClass","cssClass","_renderGroupedItems","groupIndex","group","groupItems","items","itemIndex","append","_renderItems","_getToolbarItems","_renderContentImpl","_renderedItemsCount","slice","_renderEmptyMessage","_clean","empty","_visibilityChanged","visible","_isVisible","_getIndexByItem","indexOf","_itemOptionChanged","property","value","prevValue","_optionChanged","args","name","_invalidate","_dispose","clearTimeout","_waitParentAnimationTimeout","_waitParentAnimationFinished","Promise","resolve","check","readyToResolve","parents","isAnimating","runCheck","setTimeout","_checkWebFontForLabelsLoaded","promises","fontWeight","push","all","then"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/toolbar/m_toolbar.base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/toolbar/m_toolbar.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    fx\r\n} from \"../../../common/core/animation\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    BindableTemplate\r\n} from \"../../../core/templates/bindable_template\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    getHeight,\r\n    getOuterWidth,\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    isMaterial,\r\n    isMaterialBased,\r\n    waitWebFont\r\n} from \"../../../ui/themes\";\r\nimport CollectionWidgetAsync from \"../../ui/collection/m_collection_widget.async\";\r\nimport {\r\n    TOOLBAR_CLASS\r\n} from \"./m_constants\";\r\nconst TOOLBAR_BEFORE_CLASS = \"dx-toolbar-before\";\r\nconst TOOLBAR_CENTER_CLASS = \"dx-toolbar-center\";\r\nconst TOOLBAR_AFTER_CLASS = \"dx-toolbar-after\";\r\nconst TOOLBAR_MINI_CLASS = \"dx-toolbar-mini\";\r\nconst TOOLBAR_ITEM_CLASS = \"dx-toolbar-item\";\r\nconst TOOLBAR_LABEL_CLASS = \"dx-toolbar-label\";\r\nconst TOOLBAR_BUTTON_CLASS = \"dx-toolbar-button\";\r\nconst TOOLBAR_ITEMS_CONTAINER_CLASS = \"dx-toolbar-items-container\";\r\nconst TOOLBAR_GROUP_CLASS = \"dx-toolbar-group\";\r\nconst TOOLBAR_COMPACT_CLASS = \"dx-toolbar-compact\";\r\nconst TEXT_BUTTON_MODE = \"text\";\r\nconst DEFAULT_BUTTON_TYPE = \"default\";\r\nconst DEFAULT_DROPDOWNBUTTON_STYLING_MODE = \"contained\";\r\nconst TOOLBAR_ITEM_DATA_KEY = \"dxToolbarItemDataKey\";\r\nconst ANIMATION_TIMEOUT = 15;\r\nclass ToolbarBase extends CollectionWidgetAsync {\r\n    _getSynchronizableOptionsForCreateComponent() {\r\n        return super._getSynchronizableOptionsForCreateComponent().filter((item => \"disabled\" !== item))\r\n    }\r\n    _initTemplates() {\r\n        super._initTemplates();\r\n        const template = new BindableTemplate((($container, data, rawModel) => {\r\n            if (isPlainObject(data)) {\r\n                const {\r\n                    text: text,\r\n                    html: html,\r\n                    widget: widget\r\n                } = data;\r\n                if (text) {\r\n                    $container.text(text).wrapInner(\"<div>\")\r\n                }\r\n                if (html) {\r\n                    $container.html(html)\r\n                }\r\n                if (\"dxDropDownButton\" === widget) {\r\n                    data.options = data.options ?? {};\r\n                    if (!isDefined(data.options.stylingMode)) {\r\n                        data.options.stylingMode = this.option(\"useFlatButtons\") ? \"text\" : \"contained\"\r\n                    }\r\n                }\r\n                if (\"dxButton\" === widget) {\r\n                    if (this.option(\"useFlatButtons\")) {\r\n                        data.options = data.options ?? {};\r\n                        data.options.stylingMode = data.options.stylingMode ?? \"text\"\r\n                    }\r\n                    if (this.option(\"useDefaultButtons\")) {\r\n                        data.options = data.options ?? {};\r\n                        data.options.type = data.options.type ?? \"default\"\r\n                    }\r\n                }\r\n            } else {\r\n                $container.text(String(data))\r\n            }\r\n            this._getTemplate(\"dx-polymorph-widget\").render({\r\n                container: $container,\r\n                model: rawModel,\r\n                parent: this\r\n            })\r\n        }), [\"text\", \"html\", \"widget\", \"options\"], this.option(\"integrationOptions.watchMethod\"));\r\n        this._templateManager.addDefaultTemplates({\r\n            item: template,\r\n            menuItem: template\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            renderAs: \"topToolbar\",\r\n            grouped: false,\r\n            useFlatButtons: false,\r\n            useDefaultButtons: false\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => isMaterialBased(),\r\n            options: {\r\n                useFlatButtons: true\r\n            }\r\n        }])\r\n    }\r\n    _itemContainer() {\r\n        return this._$toolbarItemsContainer.find([\".dx-toolbar-before\", \".dx-toolbar-center\", \".dx-toolbar-after\"].join(\",\"))\r\n    }\r\n    _itemClass() {\r\n        return \"dx-toolbar-item\"\r\n    }\r\n    _itemDataKey() {\r\n        return TOOLBAR_ITEM_DATA_KEY\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (this._disposed) {\r\n            return\r\n        }\r\n        this._arrangeItems();\r\n        this._applyCompactMode()\r\n    }\r\n    _initMarkup() {\r\n        this._renderToolbar();\r\n        this._renderSections();\r\n        super._initMarkup()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._updateDimensionsInMaterial()\r\n    }\r\n    _postProcessRenderItems() {\r\n        this._arrangeItems()\r\n    }\r\n    _renderToolbar() {\r\n        this.$element().addClass(TOOLBAR_CLASS);\r\n        this._$toolbarItemsContainer = $(\"<div>\").addClass(\"dx-toolbar-items-container\").appendTo(this.$element());\r\n        this.setAria(\"role\", \"toolbar\")\r\n    }\r\n    _renderSections() {\r\n        const $container = this._$toolbarItemsContainer;\r\n        each([\"before\", \"center\", \"after\"], ((_, section) => {\r\n            const sectionClass = `dx-toolbar-${section}`;\r\n            const $section = $container.find(`.${sectionClass}`);\r\n            if (!$section.length) {\r\n                this[`_$${section}Section`] = $(\"<div>\").addClass(sectionClass).attr(\"role\", \"presentation\").appendTo($container)\r\n            }\r\n        }))\r\n    }\r\n    _arrangeItems(width) {\r\n        var _this$_$beforeSection, _this$_$afterSection;\r\n        const elementWidth = width ?? getWidth(this.$element());\r\n        this._$centerSection.css({\r\n            margin: \"0 auto\",\r\n            float: \"none\"\r\n        });\r\n        const beforeRect = getBoundingRect(null === (_this$_$beforeSection = this._$beforeSection) || void 0 === _this$_$beforeSection ? void 0 : _this$_$beforeSection.get(0));\r\n        const afterRect = getBoundingRect(null === (_this$_$afterSection = this._$afterSection) || void 0 === _this$_$afterSection ? void 0 : _this$_$afterSection.get(0));\r\n        this._alignCenterSection(beforeRect, afterRect, elementWidth);\r\n        const $label = this._$toolbarItemsContainer.find(\".dx-toolbar-label\").eq(0);\r\n        const $section = $label.parent();\r\n        if (!$label.length) {\r\n            return\r\n        }\r\n        const labelOffset = beforeRect.width ? beforeRect.width : $label.position().left;\r\n        const widthBeforeSection = $section.hasClass(\"dx-toolbar-before\") ? 0 : labelOffset;\r\n        const widthAfterSection = $section.hasClass(\"dx-toolbar-after\") ? 0 : afterRect.width;\r\n        let elemsAtSectionWidth = 0;\r\n        $section.children().not(\".dx-toolbar-label\").each(((index, element) => {\r\n            elemsAtSectionWidth += getOuterWidth(element)\r\n        }));\r\n        const freeSpace = elementWidth - elemsAtSectionWidth;\r\n        const sectionMaxWidth = Math.max(freeSpace - widthBeforeSection - widthAfterSection, 0);\r\n        if ($section.hasClass(\"dx-toolbar-before\")) {\r\n            this._alignSection(this._$beforeSection, sectionMaxWidth)\r\n        } else {\r\n            const labelPaddings = getOuterWidth($label) - getWidth($label);\r\n            $label.css(\"maxWidth\", sectionMaxWidth - labelPaddings)\r\n        }\r\n    }\r\n    _alignCenterSection(beforeRect, afterRect, elementWidth) {\r\n        var _this$_$centerSection;\r\n        this._alignSection(this._$centerSection, elementWidth - beforeRect.width - afterRect.width);\r\n        const isRTL = this.option(\"rtlEnabled\");\r\n        const leftRect = isRTL ? afterRect : beforeRect;\r\n        const rightRect = isRTL ? beforeRect : afterRect;\r\n        const centerRect = getBoundingRect(null === (_this$_$centerSection = this._$centerSection) || void 0 === _this$_$centerSection ? void 0 : _this$_$centerSection.get(0));\r\n        if (leftRect.right > centerRect.left || centerRect.right > rightRect.left) {\r\n            this._$centerSection.css({\r\n                marginLeft: leftRect.width,\r\n                marginRight: rightRect.width,\r\n                float: leftRect.width > rightRect.width ? \"none\" : \"right\"\r\n            })\r\n        }\r\n    }\r\n    _alignSection($section, maxWidth) {\r\n        const $labels = $section.find(\".dx-toolbar-label\");\r\n        let labels = $labels.toArray();\r\n        maxWidth -= this._getCurrentLabelsPaddings(labels);\r\n        const currentWidth = this._getCurrentLabelsWidth(labels);\r\n        const difference = Math.abs(currentWidth - maxWidth);\r\n        if (maxWidth < currentWidth) {\r\n            labels = labels.reverse();\r\n            this._alignSectionLabels(labels, difference, false)\r\n        } else {\r\n            this._alignSectionLabels(labels, difference, true)\r\n        }\r\n    }\r\n    _alignSectionLabels(labels, difference, expanding) {\r\n        const getRealLabelWidth = function(label) {\r\n            return getBoundingRect(label).width\r\n        };\r\n        for (let i = 0; i < labels.length; i++) {\r\n            const $label = $(labels[i]);\r\n            const currentLabelWidth = Math.ceil(getRealLabelWidth(labels[i]));\r\n            let labelMaxWidth;\r\n            if (expanding) {\r\n                $label.css(\"maxWidth\", \"inherit\")\r\n            }\r\n            const possibleLabelWidth = Math.ceil(expanding ? getRealLabelWidth(labels[i]) : currentLabelWidth);\r\n            if (possibleLabelWidth < difference) {\r\n                labelMaxWidth = expanding ? possibleLabelWidth : 0;\r\n                difference -= possibleLabelWidth\r\n            } else {\r\n                labelMaxWidth = expanding ? currentLabelWidth + difference : currentLabelWidth - difference;\r\n                $label.css(\"maxWidth\", labelMaxWidth);\r\n                break\r\n            }\r\n            $label.css(\"maxWidth\", labelMaxWidth)\r\n        }\r\n    }\r\n    _applyCompactMode() {\r\n        const $element = $(this.element());\r\n        $element.removeClass(\"dx-toolbar-compact\");\r\n        if (this.option(\"compactMode\") && this._getSummaryItemsSize(\"width\", this._itemElements(), true) > getWidth($element)) {\r\n            $element.addClass(\"dx-toolbar-compact\")\r\n        }\r\n    }\r\n    _getCurrentLabelsWidth(labels) {\r\n        let width = 0;\r\n        labels.forEach((label => {\r\n            width += getOuterWidth(label)\r\n        }));\r\n        return width\r\n    }\r\n    _getCurrentLabelsPaddings(labels) {\r\n        let padding = 0;\r\n        labels.forEach((label => {\r\n            padding += getOuterWidth(label) - getWidth(label)\r\n        }));\r\n        return padding\r\n    }\r\n    _renderItem(index, item, itemContainer, $after) {\r\n        const location = item.location ?? \"center\";\r\n        const container = itemContainer ?? this[`_$${location}Section`];\r\n        const itemHasText = !!(item.text ?? item.html);\r\n        const itemElement = super._renderItem(index, item, container, $after);\r\n        itemElement.toggleClass(\"dx-toolbar-button\", !itemHasText).toggleClass(\"dx-toolbar-label\", itemHasText).addClass(item.cssClass);\r\n        return itemElement\r\n    }\r\n    _renderGroupedItems() {\r\n        each(this.option(\"items\"), ((groupIndex, group) => {\r\n            const groupItems = group.items;\r\n            const $container = $(\"<div>\").addClass(\"dx-toolbar-group\");\r\n            const location = group.location ?? \"center\";\r\n            if (!groupItems || !groupItems.length) {\r\n                return\r\n            }\r\n            each(groupItems, ((itemIndex, item) => {\r\n                this._renderItem(itemIndex, item, $container, null)\r\n            }));\r\n            this._$toolbarItemsContainer.find(`.dx-toolbar-${location}`).append($container)\r\n        }))\r\n    }\r\n    _renderItems(items) {\r\n        const grouped = this.option(\"grouped\") && items.length && items[0].items;\r\n        grouped ? this._renderGroupedItems() : super._renderItems(items)\r\n    }\r\n    _getToolbarItems() {\r\n        return this.option(\"items\") ?? []\r\n    }\r\n    _renderContentImpl() {\r\n        const items = this._getToolbarItems();\r\n        this.$element().toggleClass(\"dx-toolbar-mini\", 0 === items.length);\r\n        if (this._renderedItemsCount) {\r\n            this._renderItems(items.slice(this._renderedItemsCount))\r\n        } else {\r\n            this._renderItems(items)\r\n        }\r\n        this._applyCompactMode()\r\n    }\r\n    _renderEmptyMessage() {}\r\n    _clean() {\r\n        this._$toolbarItemsContainer.children().empty();\r\n        this.$element().empty();\r\n        delete this._$beforeSection;\r\n        delete this._$centerSection;\r\n        delete this._$afterSection\r\n    }\r\n    _visibilityChanged(visible) {\r\n        if (visible) {\r\n            this._arrangeItems()\r\n        }\r\n    }\r\n    _isVisible() {\r\n        return getWidth(this.$element()) > 0 && getHeight(this.$element()) > 0\r\n    }\r\n    _getIndexByItem(item) {\r\n        return this._getToolbarItems().indexOf(item)\r\n    }\r\n    _itemOptionChanged(item, property, value, prevValue) {\r\n        super._itemOptionChanged(item, property, value, prevValue);\r\n        this._arrangeItems()\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            name: name\r\n        } = args;\r\n        switch (name) {\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"renderAs\":\r\n            case \"useFlatButtons\":\r\n            case \"useDefaultButtons\":\r\n                this._invalidate();\r\n                break;\r\n            case \"compactMode\":\r\n                this._applyCompactMode();\r\n                break;\r\n            case \"grouped\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        clearTimeout(this._waitParentAnimationTimeout)\r\n    }\r\n    _updateDimensionsInMaterial() {\r\n        if (isMaterial()) {\r\n            const _waitParentAnimationFinished = () => new Promise((resolve => {\r\n                const check = () => {\r\n                    let readyToResolve = true;\r\n                    this.$element().parents().each(((_, parent) => {\r\n                        if (fx.isAnimating($(parent))) {\r\n                            readyToResolve = false;\r\n                            return false\r\n                        }\r\n                    }));\r\n                    if (readyToResolve) {\r\n                        resolve()\r\n                    }\r\n                    return readyToResolve\r\n                };\r\n                const runCheck = () => {\r\n                    clearTimeout(this._waitParentAnimationTimeout);\r\n                    this._waitParentAnimationTimeout = setTimeout((() => check() || runCheck()), 15)\r\n                };\r\n                runCheck()\r\n            }));\r\n            const _checkWebFontForLabelsLoaded = () => {\r\n                const $labels = this.$element().find(\".dx-toolbar-label\");\r\n                const promises = [];\r\n                $labels.each(((_, label) => {\r\n                    const text = $(label).text();\r\n                    const fontWeight = $(label).css(\"fontWeight\");\r\n                    promises.push(waitWebFont(text, fontWeight))\r\n                }));\r\n                return Promise.all(promises)\r\n            };\r\n            Promise.all([_waitParentAnimationFinished(), _checkWebFontForLabelsLoaded()]).then((() => {\r\n                this._dimensionChanged()\r\n            }))\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxToolbarBase\", ToolbarBase);\r\nexport default ToolbarBase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}