{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/text_box/m_text_editor.mask.strategy.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport EventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { addNamespace } from \"../../../common/core/events/utils/index\";\nimport browser from \"../../../core/utils/browser\";\nimport { clipboardText as getClipboardText } from \"../../../core/utils/dom\";\nconst MASK_EVENT_NAMESPACE = \"dxMask\";\nconst BLUR_EVENT = \"blur beforedeactivate\";\nconst EMPTY_CHAR = \" \";\nconst DELETE_INPUT_TYPES = [\"deleteContentBackward\", \"deleteSoftLineBackward\", \"deleteContent\", \"deleteHardLineBackward\"];\nconst HISTORY_INPUT_TYPES = [\"historyUndo\", \"historyRedo\"];\nconst EVENT_NAMES = [\"focusIn\", \"focusOut\", \"input\", \"paste\", \"cut\", \"drop\", \"beforeInput\"];\nfunction getEmptyString(length) {\n  return \" \".repeat(length);\n}\nexport default class MaskStrategy {\n  constructor(editor) {\n    this.editor = editor;\n  }\n  _editorOption() {\n    return this.editor.option(...arguments);\n  }\n  _editorInput() {\n    return this.editor._input();\n  }\n  _editorCaret(newCaret) {\n    if (!newCaret) {\n      return this.editor._caret();\n    }\n    this.editor._caret(newCaret);\n  }\n  _attachChangeEventHandler() {\n    if (!this._editorOption(\"valueChangeEvent\").split(\" \").includes(\"change\")) {\n      return;\n    }\n    const $input = this._editorInput();\n    const namespace = addNamespace(BLUR_EVENT, \"dxMask\");\n    EventsEngine.on($input, namespace, e => {\n      this.editor._changeHandler(e);\n    });\n  }\n  _beforeInputHandler() {\n    this._previousText = this._editorOption(\"text\");\n    this._prevCaret = this._editorCaret();\n  }\n  _inputHandler(event) {\n    const {\n      originalEvent: originalEvent\n    } = event;\n    if (!originalEvent) {\n      return;\n    }\n    const {\n      inputType: inputType\n    } = originalEvent;\n    if (HISTORY_INPUT_TYPES.includes(inputType)) {\n      this._handleHistoryInputEvent();\n    } else if (DELETE_INPUT_TYPES.includes(inputType)) {\n      this._handleBackwardDeleteInputEvent();\n    } else {\n      const currentCaret = this._editorCaret();\n      if (!currentCaret.end) {\n        return;\n      }\n      this._clearSelectedText();\n      this._autoFillHandler(originalEvent);\n      this._editorCaret(currentCaret);\n      this._handleInsertTextInputEvent(originalEvent.data);\n    }\n    if (this._editorOption(\"text\") === this._previousText) {\n      event.stopImmediatePropagation();\n    }\n  }\n  _handleHistoryInputEvent() {\n    const caret = this._editorCaret();\n    this._updateEditorMask({\n      start: caret.start,\n      length: caret.end - caret.start,\n      text: \"\"\n    });\n    this._editorCaret(this._prevCaret);\n  }\n  _handleBackwardDeleteInputEvent() {\n    this._clearSelectedText(true);\n    const caret = this._editorCaret();\n    this.editor.setForwardDirection();\n    this.editor._adjustCaret();\n    const adjustedForwardCaret = this._editorCaret();\n    if (adjustedForwardCaret.start !== caret.start) {\n      this.editor.setBackwardDirection();\n      this.editor._adjustCaret();\n    }\n  }\n  _clearSelectedText(isDeleteInputEvent) {\n    const selectionLength = this._prevCaret && this._prevCaret.end - this._prevCaret.start;\n    const length = selectionLength || Number(isDeleteInputEvent);\n    const caret = this._editorCaret();\n    if (!this._isAutoFill()) {\n      this.editor.setBackwardDirection();\n      this._updateEditorMask({\n        start: caret.start,\n        length: length,\n        text: getEmptyString(length)\n      });\n    }\n  }\n  _handleInsertTextInputEvent(data) {\n    var _this$_prevCaret;\n    const text = data ?? \"\";\n    this.editor.setForwardDirection();\n    const hasValidChars = this._updateEditorMask({\n      start: (null === (_this$_prevCaret = this._prevCaret) || void 0 === _this$_prevCaret ? void 0 : _this$_prevCaret.start) ?? 0,\n      length: text.length || 1,\n      text: text\n    });\n    if (!hasValidChars) {\n      this._editorCaret(this._prevCaret);\n    }\n  }\n  _updateEditorMask(args) {\n    const textLength = args.text.length;\n    const processedCharsCount = this.editor._handleChain(args);\n    this.editor._displayMask();\n    if (this.editor.isForwardDirection()) {\n      const {\n        start: start,\n        end: end\n      } = this._editorCaret();\n      const correction = processedCharsCount - textLength;\n      const hasSkippedStub = processedCharsCount > 1;\n      if (hasSkippedStub && 1 === textLength) {\n        this._editorCaret({\n          start: start + correction,\n          end: end + correction\n        });\n      }\n      this.editor._adjustCaret();\n    }\n    return !!processedCharsCount;\n  }\n  _focusInHandler() {\n    this.editor._showMaskPlaceholder();\n    this.editor.setForwardDirection();\n    if (!this.editor._isValueEmpty() && this._editorOption(\"isValid\")) {\n      this.editor._adjustCaret();\n    } else {\n      const caret = this.editor._maskRulesChain.first();\n      this._caretTimeout = setTimeout(() => {\n        this._editorCaret({\n          start: caret,\n          end: caret\n        });\n      }, 0);\n    }\n  }\n  _focusOutHandler(event) {\n    this.editor._changeHandler(event);\n    if (\"onFocus\" === this._editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\n      this._editorOption(\"text\", \"\");\n      this.editor._renderDisplayText(\"\");\n    }\n  }\n  _delHandler(event) {\n    const {\n      editor: editor\n    } = this;\n    editor._maskKeyHandler(event, () => {\n      if (!editor._hasSelection()) {\n        editor._handleKey(\" \");\n      }\n    });\n  }\n  _cutHandler(event) {\n    const caret = this._editorCaret();\n    const selectedText = this._editorInput().val().substring(caret.start, caret.end);\n    this.editor._maskKeyHandler(event, () => getClipboardText(event, selectedText));\n  }\n  _dropHandler() {\n    this._clearDragTimer();\n    this._dragTimer = setTimeout(() => {\n      const value = this.editor._convertToValue(this._editorInput().val());\n      this._editorOption(\"value\", value);\n    });\n  }\n  _pasteHandler(event) {\n    const {\n      editor: editor\n    } = this;\n    if (this._editorOption(\"disabled\")) {\n      return;\n    }\n    const caret = this._editorCaret();\n    editor._maskKeyHandler(event, () => {\n      const pastedText = getClipboardText(event);\n      const restText = editor._maskRulesChain.text().substring(caret.end);\n      const accepted = editor._handleChain({\n        text: pastedText,\n        start: caret.start,\n        length: pastedText.length\n      });\n      const newCaret = caret.start + accepted;\n      editor._handleChain({\n        text: restText,\n        start: newCaret,\n        length: restText.length\n      });\n      editor._caret({\n        start: newCaret,\n        end: newCaret\n      });\n    });\n  }\n  _autoFillHandler(event) {\n    const {\n      editor: editor\n    } = this;\n    const inputVal = this._editorInput().val();\n    this._inputHandlerTimer = setTimeout(() => {\n      if (this._isAutoFill()) {\n        editor._maskKeyHandler(event, () => {\n          editor._handleChain({\n            text: inputVal,\n            start: 0,\n            length: inputVal.length\n          });\n        });\n        editor._validateMask();\n      }\n    });\n  }\n  _isAutoFill() {\n    const $input = this._editorInput();\n    if (browser.webkit) {\n      const input = $input.get(0);\n      return (null === input || void 0 === input ? void 0 : input.matches(\":-webkit-autofill\")) ?? false;\n    }\n    return false;\n  }\n  _clearDragTimer() {\n    clearTimeout(this._dragTimer);\n  }\n  _clearTimers() {\n    this._clearDragTimer();\n    clearTimeout(this._caretTimeout);\n    clearTimeout(this._inputHandlerTimer);\n  }\n  getHandler(handlerName) {\n    return args => {\n      var _this;\n      null === (_this = this[`_${handlerName}Handler`]) || void 0 === _this || _this.call(this, args);\n    };\n  }\n  attachEvents() {\n    const $input = this._editorInput();\n    EVENT_NAMES.forEach(eventName => {\n      const namespace = addNamespace(eventName.toLowerCase(), \"dxMask\");\n      EventsEngine.on($input, namespace, this.getHandler(eventName));\n    });\n    this._attachChangeEventHandler();\n  }\n  detachEvents() {\n    this._clearTimers();\n    EventsEngine.off(this._editorInput(), \".dxMask\");\n  }\n  clean() {\n    this._clearTimers();\n  }\n}","map":{"version":3,"names":["EventsEngine","addNamespace","browser","clipboardText","getClipboardText","MASK_EVENT_NAMESPACE","BLUR_EVENT","EMPTY_CHAR","DELETE_INPUT_TYPES","HISTORY_INPUT_TYPES","EVENT_NAMES","getEmptyString","length","repeat","MaskStrategy","constructor","editor","_editorOption","option","arguments","_editorInput","_input","_editorCaret","newCaret","_caret","_attachChangeEventHandler","split","includes","$input","namespace","on","e","_changeHandler","_beforeInputHandler","_previousText","_prevCaret","_inputHandler","event","originalEvent","inputType","_handleHistoryInputEvent","_handleBackwardDeleteInputEvent","currentCaret","end","_clearSelectedText","_autoFillHandler","_handleInsertTextInputEvent","data","stopImmediatePropagation","caret","_updateEditorMask","start","text","setForwardDirection","_adjustCaret","adjustedForwardCaret","setBackwardDirection","isDeleteInputEvent","selectionLength","Number","_isAutoFill","_this$_prevCaret","hasValidChars","args","textLength","processedCharsCount","_handleChain","_displayMask","isForwardDirection","correction","hasSkippedStub","_focusInHandler","_showMaskPlaceholder","_isValueEmpty","_maskRulesChain","first","_caretTimeout","setTimeout","_focusOutHandler","_renderDisplayText","_delHandler","_maskKeyHandler","_hasSelection","_handleKey","_cutHandler","selectedText","val","substring","_dropHandler","_clearDragTimer","_dragTimer","value","_convertToValue","_pasteHandler","pastedText","restText","accepted","inputVal","_inputHandlerTimer","_validateMask","webkit","input","get","matches","clearTimeout","_clearTimers","getHandler","handlerName","_this","call","attachEvents","forEach","eventName","toLowerCase","detachEvents","off","clean"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/text_box/m_text_editor.mask.strategy.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/text_box/m_text_editor.mask.strategy.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport EventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../common/core/events/utils/index\";\r\nimport browser from \"../../../core/utils/browser\";\r\nimport {\r\n    clipboardText as getClipboardText\r\n} from \"../../../core/utils/dom\";\r\nconst MASK_EVENT_NAMESPACE = \"dxMask\";\r\nconst BLUR_EVENT = \"blur beforedeactivate\";\r\nconst EMPTY_CHAR = \" \";\r\nconst DELETE_INPUT_TYPES = [\"deleteContentBackward\", \"deleteSoftLineBackward\", \"deleteContent\", \"deleteHardLineBackward\"];\r\nconst HISTORY_INPUT_TYPES = [\"historyUndo\", \"historyRedo\"];\r\nconst EVENT_NAMES = [\"focusIn\", \"focusOut\", \"input\", \"paste\", \"cut\", \"drop\", \"beforeInput\"];\r\n\r\nfunction getEmptyString(length) {\r\n    return \" \".repeat(length)\r\n}\r\nexport default class MaskStrategy {\r\n    constructor(editor) {\r\n        this.editor = editor\r\n    }\r\n    _editorOption() {\r\n        return this.editor.option(...arguments)\r\n    }\r\n    _editorInput() {\r\n        return this.editor._input()\r\n    }\r\n    _editorCaret(newCaret) {\r\n        if (!newCaret) {\r\n            return this.editor._caret()\r\n        }\r\n        this.editor._caret(newCaret)\r\n    }\r\n    _attachChangeEventHandler() {\r\n        if (!this._editorOption(\"valueChangeEvent\").split(\" \").includes(\"change\")) {\r\n            return\r\n        }\r\n        const $input = this._editorInput();\r\n        const namespace = addNamespace(BLUR_EVENT, \"dxMask\");\r\n        EventsEngine.on($input, namespace, (e => {\r\n            this.editor._changeHandler(e)\r\n        }))\r\n    }\r\n    _beforeInputHandler() {\r\n        this._previousText = this._editorOption(\"text\");\r\n        this._prevCaret = this._editorCaret()\r\n    }\r\n    _inputHandler(event) {\r\n        const {\r\n            originalEvent: originalEvent\r\n        } = event;\r\n        if (!originalEvent) {\r\n            return\r\n        }\r\n        const {\r\n            inputType: inputType\r\n        } = originalEvent;\r\n        if (HISTORY_INPUT_TYPES.includes(inputType)) {\r\n            this._handleHistoryInputEvent()\r\n        } else if (DELETE_INPUT_TYPES.includes(inputType)) {\r\n            this._handleBackwardDeleteInputEvent()\r\n        } else {\r\n            const currentCaret = this._editorCaret();\r\n            if (!currentCaret.end) {\r\n                return\r\n            }\r\n            this._clearSelectedText();\r\n            this._autoFillHandler(originalEvent);\r\n            this._editorCaret(currentCaret);\r\n            this._handleInsertTextInputEvent(originalEvent.data)\r\n        }\r\n        if (this._editorOption(\"text\") === this._previousText) {\r\n            event.stopImmediatePropagation()\r\n        }\r\n    }\r\n    _handleHistoryInputEvent() {\r\n        const caret = this._editorCaret();\r\n        this._updateEditorMask({\r\n            start: caret.start,\r\n            length: caret.end - caret.start,\r\n            text: \"\"\r\n        });\r\n        this._editorCaret(this._prevCaret)\r\n    }\r\n    _handleBackwardDeleteInputEvent() {\r\n        this._clearSelectedText(true);\r\n        const caret = this._editorCaret();\r\n        this.editor.setForwardDirection();\r\n        this.editor._adjustCaret();\r\n        const adjustedForwardCaret = this._editorCaret();\r\n        if (adjustedForwardCaret.start !== caret.start) {\r\n            this.editor.setBackwardDirection();\r\n            this.editor._adjustCaret()\r\n        }\r\n    }\r\n    _clearSelectedText(isDeleteInputEvent) {\r\n        const selectionLength = this._prevCaret && this._prevCaret.end - this._prevCaret.start;\r\n        const length = selectionLength || Number(isDeleteInputEvent);\r\n        const caret = this._editorCaret();\r\n        if (!this._isAutoFill()) {\r\n            this.editor.setBackwardDirection();\r\n            this._updateEditorMask({\r\n                start: caret.start,\r\n                length: length,\r\n                text: getEmptyString(length)\r\n            })\r\n        }\r\n    }\r\n    _handleInsertTextInputEvent(data) {\r\n        var _this$_prevCaret;\r\n        const text = data ?? \"\";\r\n        this.editor.setForwardDirection();\r\n        const hasValidChars = this._updateEditorMask({\r\n            start: (null === (_this$_prevCaret = this._prevCaret) || void 0 === _this$_prevCaret ? void 0 : _this$_prevCaret.start) ?? 0,\r\n            length: text.length || 1,\r\n            text: text\r\n        });\r\n        if (!hasValidChars) {\r\n            this._editorCaret(this._prevCaret)\r\n        }\r\n    }\r\n    _updateEditorMask(args) {\r\n        const textLength = args.text.length;\r\n        const processedCharsCount = this.editor._handleChain(args);\r\n        this.editor._displayMask();\r\n        if (this.editor.isForwardDirection()) {\r\n            const {\r\n                start: start,\r\n                end: end\r\n            } = this._editorCaret();\r\n            const correction = processedCharsCount - textLength;\r\n            const hasSkippedStub = processedCharsCount > 1;\r\n            if (hasSkippedStub && 1 === textLength) {\r\n                this._editorCaret({\r\n                    start: start + correction,\r\n                    end: end + correction\r\n                })\r\n            }\r\n            this.editor._adjustCaret()\r\n        }\r\n        return !!processedCharsCount\r\n    }\r\n    _focusInHandler() {\r\n        this.editor._showMaskPlaceholder();\r\n        this.editor.setForwardDirection();\r\n        if (!this.editor._isValueEmpty() && this._editorOption(\"isValid\")) {\r\n            this.editor._adjustCaret()\r\n        } else {\r\n            const caret = this.editor._maskRulesChain.first();\r\n            this._caretTimeout = setTimeout((() => {\r\n                this._editorCaret({\r\n                    start: caret,\r\n                    end: caret\r\n                })\r\n            }), 0)\r\n        }\r\n    }\r\n    _focusOutHandler(event) {\r\n        this.editor._changeHandler(event);\r\n        if (\"onFocus\" === this._editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\r\n            this._editorOption(\"text\", \"\");\r\n            this.editor._renderDisplayText(\"\")\r\n        }\r\n    }\r\n    _delHandler(event) {\r\n        const {\r\n            editor: editor\r\n        } = this;\r\n        editor._maskKeyHandler(event, (() => {\r\n            if (!editor._hasSelection()) {\r\n                editor._handleKey(\" \")\r\n            }\r\n        }))\r\n    }\r\n    _cutHandler(event) {\r\n        const caret = this._editorCaret();\r\n        const selectedText = this._editorInput().val().substring(caret.start, caret.end);\r\n        this.editor._maskKeyHandler(event, (() => getClipboardText(event, selectedText)))\r\n    }\r\n    _dropHandler() {\r\n        this._clearDragTimer();\r\n        this._dragTimer = setTimeout((() => {\r\n            const value = this.editor._convertToValue(this._editorInput().val());\r\n            this._editorOption(\"value\", value)\r\n        }))\r\n    }\r\n    _pasteHandler(event) {\r\n        const {\r\n            editor: editor\r\n        } = this;\r\n        if (this._editorOption(\"disabled\")) {\r\n            return\r\n        }\r\n        const caret = this._editorCaret();\r\n        editor._maskKeyHandler(event, (() => {\r\n            const pastedText = getClipboardText(event);\r\n            const restText = editor._maskRulesChain.text().substring(caret.end);\r\n            const accepted = editor._handleChain({\r\n                text: pastedText,\r\n                start: caret.start,\r\n                length: pastedText.length\r\n            });\r\n            const newCaret = caret.start + accepted;\r\n            editor._handleChain({\r\n                text: restText,\r\n                start: newCaret,\r\n                length: restText.length\r\n            });\r\n            editor._caret({\r\n                start: newCaret,\r\n                end: newCaret\r\n            })\r\n        }))\r\n    }\r\n    _autoFillHandler(event) {\r\n        const {\r\n            editor: editor\r\n        } = this;\r\n        const inputVal = this._editorInput().val();\r\n        this._inputHandlerTimer = setTimeout((() => {\r\n            if (this._isAutoFill()) {\r\n                editor._maskKeyHandler(event, (() => {\r\n                    editor._handleChain({\r\n                        text: inputVal,\r\n                        start: 0,\r\n                        length: inputVal.length\r\n                    })\r\n                }));\r\n                editor._validateMask()\r\n            }\r\n        }))\r\n    }\r\n    _isAutoFill() {\r\n        const $input = this._editorInput();\r\n        if (browser.webkit) {\r\n            const input = $input.get(0);\r\n            return (null === input || void 0 === input ? void 0 : input.matches(\":-webkit-autofill\")) ?? false\r\n        }\r\n        return false\r\n    }\r\n    _clearDragTimer() {\r\n        clearTimeout(this._dragTimer)\r\n    }\r\n    _clearTimers() {\r\n        this._clearDragTimer();\r\n        clearTimeout(this._caretTimeout);\r\n        clearTimeout(this._inputHandlerTimer)\r\n    }\r\n    getHandler(handlerName) {\r\n        return args => {\r\n            var _this;\r\n            null === (_this = this[`_${handlerName}Handler`]) || void 0 === _this || _this.call(this, args)\r\n        }\r\n    }\r\n    attachEvents() {\r\n        const $input = this._editorInput();\r\n        EVENT_NAMES.forEach((eventName => {\r\n            const namespace = addNamespace(eventName.toLowerCase(), \"dxMask\");\r\n            EventsEngine.on($input, namespace, this.getHandler(eventName))\r\n        }));\r\n        this._attachChangeEventHandler()\r\n    }\r\n    detachEvents() {\r\n        this._clearTimers();\r\n        EventsEngine.off(this._editorInput(), \".dxMask\")\r\n    }\r\n    clean() {\r\n        this._clearTimers()\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}