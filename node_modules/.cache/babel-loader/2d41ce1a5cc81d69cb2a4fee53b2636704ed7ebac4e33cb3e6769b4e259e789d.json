{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/data/m_custom_store.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport arrayQuery from \"../../common/data/array_query\";\nimport { applyBatch } from \"../../common/data/array_utils\";\nimport { errors } from \"../../common/data/errors\";\nimport storeHelper from \"../../common/data/store_helper\";\nimport { errorMessageFromXhr as errorMessageFromXhrUtility, keysEqual, XHR_ERROR_UNLOAD } from \"../../common/data/utils\";\nimport config from \"../../core/config\";\nimport $ from \"../../core/renderer\";\nimport { Deferred, fromPromise, when } from \"../../core/utils/deferred\";\nimport { isFunction } from \"../../core/utils/type\";\nimport Store from \"../../data/abstract_store\";\nconst TOTAL_COUNT = \"totalCount\";\nconst LOAD = \"load\";\nconst BY_KEY = \"byKey\";\nconst INSERT = \"insert\";\nconst UPDATE = \"update\";\nconst REMOVE = \"remove\";\nfunction isPromise(obj) {\n  return obj && isFunction(obj.then);\n}\nfunction trivialPromise(value) {\n  return new Deferred().resolve(value).promise();\n}\nfunction ensureRequiredFuncOption(name, obj) {\n  if (!isFunction(obj)) {\n    throw errors.Error(\"E4011\", name);\n  }\n}\nfunction throwInvalidUserFuncResult(name) {\n  throw errors.Error(\"E4012\", name);\n}\nfunction createUserFuncFailureHandler(pendingDeferred) {\n  return function (arg) {\n    let error;\n    if (arg instanceof Error) {\n      error = arg;\n    } else {\n      error = new Error(function (promiseArguments) {\n        const xhr = promiseArguments[0];\n        const textStatus = promiseArguments[1];\n        if (!xhr || !xhr.getResponseHeader) {\n          return null;\n        }\n        return errorMessageFromXhrUtility(xhr, textStatus);\n      }(arguments) || arg && String(arg) || \"Unknown error\");\n    }\n    if (error.message !== XHR_ERROR_UNLOAD) {\n      pendingDeferred.reject(error);\n    }\n  };\n}\nfunction invokeUserLoad(store, options) {\n  const userFunc = store._loadFunc;\n  let userResult;\n  ensureRequiredFuncOption(LOAD, userFunc);\n  userResult = userFunc.apply(store, [options]);\n  if (Array.isArray(userResult)) {\n    userResult = trivialPromise(userResult);\n  } else if (null === userResult || void 0 === userResult) {\n    userResult = trivialPromise([]);\n  } else if (!isPromise(userResult)) {\n    throwInvalidUserFuncResult(LOAD);\n  }\n  return fromPromise(userResult);\n}\nfunction invokeUserTotalCountFunc(store, options) {\n  const userFunc = store._totalCountFunc;\n  let userResult;\n  if (!isFunction(userFunc)) {\n    throw errors.Error(\"E4021\");\n  }\n  userResult = userFunc.apply(store, [options]);\n  if (!isPromise(userResult)) {\n    userResult = Number(userResult);\n    if (!isFinite(userResult)) {\n      throwInvalidUserFuncResult(TOTAL_COUNT);\n    }\n    userResult = trivialPromise(userResult);\n  }\n  return fromPromise(userResult);\n}\nfunction invokeUserByKeyFunc(store, key, extraOptions) {\n  const userFunc = store._byKeyFunc;\n  let userResult;\n  ensureRequiredFuncOption(BY_KEY, userFunc);\n  userResult = userFunc.apply(store, [key, extraOptions]);\n  if (!isPromise(userResult)) {\n    userResult = trivialPromise(userResult);\n  }\n  return fromPromise(userResult);\n}\nfunction runRawLoad(pendingDeferred, store, userFuncOptions, continuation) {\n  if (store.__rawData) {\n    continuation(store.__rawData);\n  } else {\n    const loadPromise = store.__rawDataPromise || invokeUserLoad(store, userFuncOptions);\n    if (store._cacheRawData) {\n      store.__rawDataPromise = loadPromise;\n    }\n    loadPromise.always(() => {\n      delete store.__rawDataPromise;\n    }).done(rawData => {\n      if (store._cacheRawData) {\n        store.__rawData = rawData;\n      }\n      continuation(rawData);\n    }).fail(error => {\n      var _store$_errorHandler;\n      const userFuncFailureHandler = createUserFuncFailureHandler(pendingDeferred);\n      null === (_store$_errorHandler = store._errorHandler) || void 0 === _store$_errorHandler || _store$_errorHandler.call(store, error);\n      userFuncFailureHandler(error);\n    });\n  }\n}\nfunction runRawLoadWithQuery(pendingDeferred, store, options, countOnly) {\n  options = options || {};\n  const userFuncOptions = {};\n  if (\"userData\" in options) {\n    userFuncOptions.userData = options.userData;\n  }\n  runRawLoad(pendingDeferred, store, userFuncOptions, rawData => {\n    const rawDataQuery = arrayQuery(rawData, {\n      errorHandler: store._errorHandler\n    });\n    let itemsQuery;\n    let totalCountQuery;\n    const waitList = [];\n    let items;\n    let totalCount;\n    if (!countOnly) {\n      itemsQuery = storeHelper.queryByOptions(rawDataQuery, options);\n      if (itemsQuery === rawDataQuery) {\n        items = rawData.slice(0);\n      } else {\n        waitList.push(itemsQuery.enumerate().done(asyncResult => {\n          items = asyncResult;\n        }));\n      }\n    }\n    if (options.requireTotalCount || countOnly) {\n      totalCountQuery = storeHelper.queryByOptions(rawDataQuery, options, true);\n      if (totalCountQuery === rawDataQuery) {\n        totalCount = rawData.length;\n      } else {\n        waitList.push(totalCountQuery.count().done(asyncResult => {\n          totalCount = asyncResult;\n        }));\n      }\n    }\n    when.apply($, waitList).done(() => {\n      if (countOnly) {\n        pendingDeferred.resolve(totalCount);\n      } else if (options.requireTotalCount) {\n        pendingDeferred.resolve(items, {\n          totalCount: totalCount\n        });\n      } else {\n        pendingDeferred.resolve(items);\n      }\n    }).fail(x => {\n      pendingDeferred.reject(x);\n    });\n  });\n}\nfunction runRawLoadWithKey(pendingDeferred, store, key) {\n  runRawLoad(pendingDeferred, store, {}, rawData => {\n    const keyExpr = store.key();\n    let item;\n    for (let i = 0, len = rawData.length; i < len; i++) {\n      item = rawData[i];\n      if (keysEqual(keyExpr, store.keyOf(rawData[i]), key)) {\n        pendingDeferred.resolve(item);\n        return;\n      }\n    }\n    pendingDeferred.reject(errors.Error(\"E4009\"));\n  });\n}\nconst CustomStore = Store.inherit({\n  ctor(options) {\n    options = options || {};\n    this.callBase(options);\n    this._useDefaultSearch = !!options.useDefaultSearch || \"raw\" === options.loadMode;\n    this._loadMode = options.loadMode;\n    this._cacheRawData = false !== options.cacheRawData;\n    this._loadFunc = options[LOAD];\n    this._totalCountFunc = options[TOTAL_COUNT];\n    this._byKeyFunc = options[BY_KEY];\n    this._insertFunc = options[INSERT];\n    this._updateFunc = options[UPDATE];\n    this._removeFunc = options[REMOVE];\n  },\n  _clearCache() {\n    delete this.__rawData;\n  },\n  createQuery() {\n    throw errors.Error(\"E4010\");\n  },\n  clearRawDataCache() {\n    this._clearCache();\n  },\n  _totalCountImpl(options) {\n    let d = new Deferred();\n    if (\"raw\" === this._loadMode && !this._totalCountFunc) {\n      runRawLoadWithQuery(d, this, options, true);\n    } else {\n      invokeUserTotalCountFunc(this, options).done(count => {\n        d.resolve(Number(count));\n      }).fail(createUserFuncFailureHandler(d));\n      d = this._addFailHandlers(d);\n    }\n    return d.promise();\n  },\n  _pushImpl(changes) {\n    if (this.__rawData) {\n      applyBatch({\n        keyInfo: this,\n        data: this.__rawData,\n        changes: changes\n      });\n    }\n  },\n  _loadImpl(options) {\n    let d = new Deferred();\n    if (\"raw\" === this._loadMode) {\n      runRawLoadWithQuery(d, this, options, false);\n    } else {\n      invokeUserLoad(this, options).done((data, extra) => {\n        d.resolve(data, extra);\n      }).fail(createUserFuncFailureHandler(d));\n      d = this._addFailHandlers(d);\n    }\n    return d.promise();\n  },\n  _byKeyImpl(key, extraOptions) {\n    const d = new Deferred();\n    if (this._byKeyViaLoad()) {\n      this._requireKey();\n      runRawLoadWithKey(d, this, key);\n    } else {\n      invokeUserByKeyFunc(this, key, extraOptions).done(obj => {\n        d.resolve(obj);\n      }).fail(createUserFuncFailureHandler(d));\n    }\n    return d.promise();\n  },\n  _byKeyViaLoad() {\n    return \"raw\" === this._loadMode && !this._byKeyFunc;\n  },\n  _insertImpl(values) {\n    const that = this;\n    const userFunc = that._insertFunc;\n    let userResult;\n    const d = new Deferred();\n    ensureRequiredFuncOption(INSERT, userFunc);\n    userResult = userFunc.apply(that, [values]);\n    if (!isPromise(userResult)) {\n      userResult = trivialPromise(userResult);\n    }\n    fromPromise(userResult).done(serverResponse => {\n      if (config().useLegacyStoreResult) {\n        d.resolve(values, serverResponse);\n      } else {\n        d.resolve(serverResponse || values, that.keyOf(serverResponse));\n      }\n    }).fail(createUserFuncFailureHandler(d));\n    return d.promise();\n  },\n  _updateImpl(key, values) {\n    const userFunc = this._updateFunc;\n    let userResult;\n    const d = new Deferred();\n    ensureRequiredFuncOption(UPDATE, userFunc);\n    userResult = userFunc.apply(this, [key, values]);\n    if (!isPromise(userResult)) {\n      userResult = trivialPromise(userResult);\n    }\n    fromPromise(userResult).done(serverResponse => {\n      if (config().useLegacyStoreResult) {\n        d.resolve(key, values);\n      } else {\n        d.resolve(serverResponse || values, key);\n      }\n    }).fail(createUserFuncFailureHandler(d));\n    return d.promise();\n  },\n  _removeImpl(key) {\n    const userFunc = this._removeFunc;\n    let userResult;\n    const d = new Deferred();\n    ensureRequiredFuncOption(REMOVE, userFunc);\n    userResult = userFunc.apply(this, [key]);\n    if (!isPromise(userResult)) {\n      userResult = trivialPromise();\n    }\n    fromPromise(userResult).done(() => {\n      d.resolve(key);\n    }).fail(createUserFuncFailureHandler(d));\n    return d.promise();\n  }\n});\nexport default CustomStore;","map":{"version":3,"names":["arrayQuery","applyBatch","errors","storeHelper","errorMessageFromXhr","errorMessageFromXhrUtility","keysEqual","XHR_ERROR_UNLOAD","config","$","Deferred","fromPromise","when","isFunction","Store","TOTAL_COUNT","LOAD","BY_KEY","INSERT","UPDATE","REMOVE","isPromise","obj","then","trivialPromise","value","resolve","promise","ensureRequiredFuncOption","name","Error","throwInvalidUserFuncResult","createUserFuncFailureHandler","pendingDeferred","arg","error","promiseArguments","xhr","textStatus","getResponseHeader","arguments","String","message","reject","invokeUserLoad","store","options","userFunc","_loadFunc","userResult","apply","Array","isArray","invokeUserTotalCountFunc","_totalCountFunc","Number","isFinite","invokeUserByKeyFunc","key","extraOptions","_byKeyFunc","runRawLoad","userFuncOptions","continuation","__rawData","loadPromise","__rawDataPromise","_cacheRawData","always","done","rawData","fail","_store$_errorHandler","userFuncFailureHandler","_errorHandler","call","runRawLoadWithQuery","countOnly","userData","rawDataQuery","errorHandler","itemsQuery","totalCountQuery","waitList","items","totalCount","queryByOptions","slice","push","enumerate","asyncResult","requireTotalCount","length","count","x","runRawLoadWithKey","keyExpr","item","i","len","keyOf","CustomStore","inherit","ctor","callBase","_useDefaultSearch","useDefaultSearch","loadMode","_loadMode","cacheRawData","_insertFunc","_updateFunc","_removeFunc","_clearCache","createQuery","clearRawDataCache","_totalCountImpl","d","_addFailHandlers","_pushImpl","changes","keyInfo","data","_loadImpl","extra","_byKeyImpl","_byKeyViaLoad","_requireKey","_insertImpl","values","that","serverResponse","useLegacyStoreResult","_updateImpl","_removeImpl"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/data/m_custom_store.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/data/m_custom_store.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport arrayQuery from \"../../common/data/array_query\";\r\nimport {\r\n    applyBatch\r\n} from \"../../common/data/array_utils\";\r\nimport {\r\n    errors\r\n} from \"../../common/data/errors\";\r\nimport storeHelper from \"../../common/data/store_helper\";\r\nimport {\r\n    errorMessageFromXhr as errorMessageFromXhrUtility,\r\n    keysEqual,\r\n    XHR_ERROR_UNLOAD\r\n} from \"../../common/data/utils\";\r\nimport config from \"../../core/config\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    Deferred,\r\n    fromPromise,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport Store from \"../../data/abstract_store\";\r\nconst TOTAL_COUNT = \"totalCount\";\r\nconst LOAD = \"load\";\r\nconst BY_KEY = \"byKey\";\r\nconst INSERT = \"insert\";\r\nconst UPDATE = \"update\";\r\nconst REMOVE = \"remove\";\r\n\r\nfunction isPromise(obj) {\r\n    return obj && isFunction(obj.then)\r\n}\r\n\r\nfunction trivialPromise(value) {\r\n    return (new Deferred).resolve(value).promise()\r\n}\r\n\r\nfunction ensureRequiredFuncOption(name, obj) {\r\n    if (!isFunction(obj)) {\r\n        throw errors.Error(\"E4011\", name)\r\n    }\r\n}\r\n\r\nfunction throwInvalidUserFuncResult(name) {\r\n    throw errors.Error(\"E4012\", name)\r\n}\r\n\r\nfunction createUserFuncFailureHandler(pendingDeferred) {\r\n    return function(arg) {\r\n        let error;\r\n        if (arg instanceof Error) {\r\n            error = arg\r\n        } else {\r\n            error = new Error(function(promiseArguments) {\r\n                const xhr = promiseArguments[0];\r\n                const textStatus = promiseArguments[1];\r\n                if (!xhr || !xhr.getResponseHeader) {\r\n                    return null\r\n                }\r\n                return errorMessageFromXhrUtility(xhr, textStatus)\r\n            }(arguments) || arg && String(arg) || \"Unknown error\")\r\n        }\r\n        if (error.message !== XHR_ERROR_UNLOAD) {\r\n            pendingDeferred.reject(error)\r\n        }\r\n    }\r\n}\r\n\r\nfunction invokeUserLoad(store, options) {\r\n    const userFunc = store._loadFunc;\r\n    let userResult;\r\n    ensureRequiredFuncOption(LOAD, userFunc);\r\n    userResult = userFunc.apply(store, [options]);\r\n    if (Array.isArray(userResult)) {\r\n        userResult = trivialPromise(userResult)\r\n    } else if (null === userResult || void 0 === userResult) {\r\n        userResult = trivialPromise([])\r\n    } else if (!isPromise(userResult)) {\r\n        throwInvalidUserFuncResult(LOAD)\r\n    }\r\n    return fromPromise(userResult)\r\n}\r\n\r\nfunction invokeUserTotalCountFunc(store, options) {\r\n    const userFunc = store._totalCountFunc;\r\n    let userResult;\r\n    if (!isFunction(userFunc)) {\r\n        throw errors.Error(\"E4021\")\r\n    }\r\n    userResult = userFunc.apply(store, [options]);\r\n    if (!isPromise(userResult)) {\r\n        userResult = Number(userResult);\r\n        if (!isFinite(userResult)) {\r\n            throwInvalidUserFuncResult(TOTAL_COUNT)\r\n        }\r\n        userResult = trivialPromise(userResult)\r\n    }\r\n    return fromPromise(userResult)\r\n}\r\n\r\nfunction invokeUserByKeyFunc(store, key, extraOptions) {\r\n    const userFunc = store._byKeyFunc;\r\n    let userResult;\r\n    ensureRequiredFuncOption(BY_KEY, userFunc);\r\n    userResult = userFunc.apply(store, [key, extraOptions]);\r\n    if (!isPromise(userResult)) {\r\n        userResult = trivialPromise(userResult)\r\n    }\r\n    return fromPromise(userResult)\r\n}\r\n\r\nfunction runRawLoad(pendingDeferred, store, userFuncOptions, continuation) {\r\n    if (store.__rawData) {\r\n        continuation(store.__rawData)\r\n    } else {\r\n        const loadPromise = store.__rawDataPromise || invokeUserLoad(store, userFuncOptions);\r\n        if (store._cacheRawData) {\r\n            store.__rawDataPromise = loadPromise\r\n        }\r\n        loadPromise.always((() => {\r\n            delete store.__rawDataPromise\r\n        })).done((rawData => {\r\n            if (store._cacheRawData) {\r\n                store.__rawData = rawData\r\n            }\r\n            continuation(rawData)\r\n        })).fail((error => {\r\n            var _store$_errorHandler;\r\n            const userFuncFailureHandler = createUserFuncFailureHandler(pendingDeferred);\r\n            null === (_store$_errorHandler = store._errorHandler) || void 0 === _store$_errorHandler || _store$_errorHandler.call(store, error);\r\n            userFuncFailureHandler(error)\r\n        }))\r\n    }\r\n}\r\n\r\nfunction runRawLoadWithQuery(pendingDeferred, store, options, countOnly) {\r\n    options = options || {};\r\n    const userFuncOptions = {};\r\n    if (\"userData\" in options) {\r\n        userFuncOptions.userData = options.userData\r\n    }\r\n    runRawLoad(pendingDeferred, store, userFuncOptions, (rawData => {\r\n        const rawDataQuery = arrayQuery(rawData, {\r\n            errorHandler: store._errorHandler\r\n        });\r\n        let itemsQuery;\r\n        let totalCountQuery;\r\n        const waitList = [];\r\n        let items;\r\n        let totalCount;\r\n        if (!countOnly) {\r\n            itemsQuery = storeHelper.queryByOptions(rawDataQuery, options);\r\n            if (itemsQuery === rawDataQuery) {\r\n                items = rawData.slice(0)\r\n            } else {\r\n                waitList.push(itemsQuery.enumerate().done((asyncResult => {\r\n                    items = asyncResult\r\n                })))\r\n            }\r\n        }\r\n        if (options.requireTotalCount || countOnly) {\r\n            totalCountQuery = storeHelper.queryByOptions(rawDataQuery, options, true);\r\n            if (totalCountQuery === rawDataQuery) {\r\n                totalCount = rawData.length\r\n            } else {\r\n                waitList.push(totalCountQuery.count().done((asyncResult => {\r\n                    totalCount = asyncResult\r\n                })))\r\n            }\r\n        }\r\n        when.apply($, waitList).done((() => {\r\n            if (countOnly) {\r\n                pendingDeferred.resolve(totalCount)\r\n            } else if (options.requireTotalCount) {\r\n                pendingDeferred.resolve(items, {\r\n                    totalCount: totalCount\r\n                })\r\n            } else {\r\n                pendingDeferred.resolve(items)\r\n            }\r\n        })).fail((x => {\r\n            pendingDeferred.reject(x)\r\n        }))\r\n    }))\r\n}\r\n\r\nfunction runRawLoadWithKey(pendingDeferred, store, key) {\r\n    runRawLoad(pendingDeferred, store, {}, (rawData => {\r\n        const keyExpr = store.key();\r\n        let item;\r\n        for (let i = 0, len = rawData.length; i < len; i++) {\r\n            item = rawData[i];\r\n            if (keysEqual(keyExpr, store.keyOf(rawData[i]), key)) {\r\n                pendingDeferred.resolve(item);\r\n                return\r\n            }\r\n        }\r\n        pendingDeferred.reject(errors.Error(\"E4009\"))\r\n    }))\r\n}\r\nconst CustomStore = Store.inherit({\r\n    ctor(options) {\r\n        options = options || {};\r\n        this.callBase(options);\r\n        this._useDefaultSearch = !!options.useDefaultSearch || \"raw\" === options.loadMode;\r\n        this._loadMode = options.loadMode;\r\n        this._cacheRawData = false !== options.cacheRawData;\r\n        this._loadFunc = options[LOAD];\r\n        this._totalCountFunc = options[TOTAL_COUNT];\r\n        this._byKeyFunc = options[BY_KEY];\r\n        this._insertFunc = options[INSERT];\r\n        this._updateFunc = options[UPDATE];\r\n        this._removeFunc = options[REMOVE]\r\n    },\r\n    _clearCache() {\r\n        delete this.__rawData\r\n    },\r\n    createQuery() {\r\n        throw errors.Error(\"E4010\")\r\n    },\r\n    clearRawDataCache() {\r\n        this._clearCache()\r\n    },\r\n    _totalCountImpl(options) {\r\n        let d = new Deferred;\r\n        if (\"raw\" === this._loadMode && !this._totalCountFunc) {\r\n            runRawLoadWithQuery(d, this, options, true)\r\n        } else {\r\n            invokeUserTotalCountFunc(this, options).done((count => {\r\n                d.resolve(Number(count))\r\n            })).fail(createUserFuncFailureHandler(d));\r\n            d = this._addFailHandlers(d)\r\n        }\r\n        return d.promise()\r\n    },\r\n    _pushImpl(changes) {\r\n        if (this.__rawData) {\r\n            applyBatch({\r\n                keyInfo: this,\r\n                data: this.__rawData,\r\n                changes: changes\r\n            })\r\n        }\r\n    },\r\n    _loadImpl(options) {\r\n        let d = new Deferred;\r\n        if (\"raw\" === this._loadMode) {\r\n            runRawLoadWithQuery(d, this, options, false)\r\n        } else {\r\n            invokeUserLoad(this, options).done(((data, extra) => {\r\n                d.resolve(data, extra)\r\n            })).fail(createUserFuncFailureHandler(d));\r\n            d = this._addFailHandlers(d)\r\n        }\r\n        return d.promise()\r\n    },\r\n    _byKeyImpl(key, extraOptions) {\r\n        const d = new Deferred;\r\n        if (this._byKeyViaLoad()) {\r\n            this._requireKey();\r\n            runRawLoadWithKey(d, this, key)\r\n        } else {\r\n            invokeUserByKeyFunc(this, key, extraOptions).done((obj => {\r\n                d.resolve(obj)\r\n            })).fail(createUserFuncFailureHandler(d))\r\n        }\r\n        return d.promise()\r\n    },\r\n    _byKeyViaLoad() {\r\n        return \"raw\" === this._loadMode && !this._byKeyFunc\r\n    },\r\n    _insertImpl(values) {\r\n        const that = this;\r\n        const userFunc = that._insertFunc;\r\n        let userResult;\r\n        const d = new Deferred;\r\n        ensureRequiredFuncOption(INSERT, userFunc);\r\n        userResult = userFunc.apply(that, [values]);\r\n        if (!isPromise(userResult)) {\r\n            userResult = trivialPromise(userResult)\r\n        }\r\n        fromPromise(userResult).done((serverResponse => {\r\n            if (config().useLegacyStoreResult) {\r\n                d.resolve(values, serverResponse)\r\n            } else {\r\n                d.resolve(serverResponse || values, that.keyOf(serverResponse))\r\n            }\r\n        })).fail(createUserFuncFailureHandler(d));\r\n        return d.promise()\r\n    },\r\n    _updateImpl(key, values) {\r\n        const userFunc = this._updateFunc;\r\n        let userResult;\r\n        const d = new Deferred;\r\n        ensureRequiredFuncOption(UPDATE, userFunc);\r\n        userResult = userFunc.apply(this, [key, values]);\r\n        if (!isPromise(userResult)) {\r\n            userResult = trivialPromise(userResult)\r\n        }\r\n        fromPromise(userResult).done((serverResponse => {\r\n            if (config().useLegacyStoreResult) {\r\n                d.resolve(key, values)\r\n            } else {\r\n                d.resolve(serverResponse || values, key)\r\n            }\r\n        })).fail(createUserFuncFailureHandler(d));\r\n        return d.promise()\r\n    },\r\n    _removeImpl(key) {\r\n        const userFunc = this._removeFunc;\r\n        let userResult;\r\n        const d = new Deferred;\r\n        ensureRequiredFuncOption(REMOVE, userFunc);\r\n        userResult = userFunc.apply(this, [key]);\r\n        if (!isPromise(userResult)) {\r\n            userResult = trivialPromise()\r\n        }\r\n        fromPromise(userResult).done((() => {\r\n            d.resolve(key)\r\n        })).fail(createUserFuncFailureHandler(d));\r\n        return d.promise()\r\n    }\r\n});\r\nexport default CustomStore;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,+BAA+B;AACtD,SACIC,UAAU,QACP,+BAA+B;AACtC,SACIC,MAAM,QACH,0BAA0B;AACjC,OAAOC,WAAW,MAAM,gCAAgC;AACxD,SACIC,mBAAmB,IAAIC,0BAA0B,EACjDC,SAAS,EACTC,gBAAgB,QACb,yBAAyB;AAChC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,CAAC,MAAM,qBAAqB;AACnC,SACIC,QAAQ,EACRC,WAAW,EACXC,IAAI,QACD,2BAA2B;AAClC,SACIC,UAAU,QACP,uBAAuB;AAC9B,OAAOC,KAAK,MAAM,2BAA2B;AAC7C,MAAMC,WAAW,GAAG,YAAY;AAChC,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,MAAM,GAAG,OAAO;AACtB,MAAMC,MAAM,GAAG,QAAQ;AACvB,MAAMC,MAAM,GAAG,QAAQ;AACvB,MAAMC,MAAM,GAAG,QAAQ;AAEvB,SAASC,SAASA,CAACC,GAAG,EAAE;EACpB,OAAOA,GAAG,IAAIT,UAAU,CAACS,GAAG,CAACC,IAAI,CAAC;AACtC;AAEA,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC3B,OAAQ,IAAIf,QAAQ,CAAD,CAAC,CAAEgB,OAAO,CAACD,KAAK,CAAC,CAACE,OAAO,CAAC,CAAC;AAClD;AAEA,SAASC,wBAAwBA,CAACC,IAAI,EAAEP,GAAG,EAAE;EACzC,IAAI,CAACT,UAAU,CAACS,GAAG,CAAC,EAAE;IAClB,MAAMpB,MAAM,CAAC4B,KAAK,CAAC,OAAO,EAAED,IAAI,CAAC;EACrC;AACJ;AAEA,SAASE,0BAA0BA,CAACF,IAAI,EAAE;EACtC,MAAM3B,MAAM,CAAC4B,KAAK,CAAC,OAAO,EAAED,IAAI,CAAC;AACrC;AAEA,SAASG,4BAA4BA,CAACC,eAAe,EAAE;EACnD,OAAO,UAASC,GAAG,EAAE;IACjB,IAAIC,KAAK;IACT,IAAID,GAAG,YAAYJ,KAAK,EAAE;MACtBK,KAAK,GAAGD,GAAG;IACf,CAAC,MAAM;MACHC,KAAK,GAAG,IAAIL,KAAK,CAAC,UAASM,gBAAgB,EAAE;QACzC,MAAMC,GAAG,GAAGD,gBAAgB,CAAC,CAAC,CAAC;QAC/B,MAAME,UAAU,GAAGF,gBAAgB,CAAC,CAAC,CAAC;QACtC,IAAI,CAACC,GAAG,IAAI,CAACA,GAAG,CAACE,iBAAiB,EAAE;UAChC,OAAO,IAAI;QACf;QACA,OAAOlC,0BAA0B,CAACgC,GAAG,EAAEC,UAAU,CAAC;MACtD,CAAC,CAACE,SAAS,CAAC,IAAIN,GAAG,IAAIO,MAAM,CAACP,GAAG,CAAC,IAAI,eAAe,CAAC;IAC1D;IACA,IAAIC,KAAK,CAACO,OAAO,KAAKnC,gBAAgB,EAAE;MACpC0B,eAAe,CAACU,MAAM,CAACR,KAAK,CAAC;IACjC;EACJ,CAAC;AACL;AAEA,SAASS,cAAcA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACpC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,SAAS;EAChC,IAAIC,UAAU;EACdrB,wBAAwB,CAACZ,IAAI,EAAE+B,QAAQ,CAAC;EACxCE,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAACL,KAAK,EAAE,CAACC,OAAO,CAAC,CAAC;EAC7C,IAAIK,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,EAAE;IAC3BA,UAAU,GAAGzB,cAAc,CAACyB,UAAU,CAAC;EAC3C,CAAC,MAAM,IAAI,IAAI,KAAKA,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,EAAE;IACrDA,UAAU,GAAGzB,cAAc,CAAC,EAAE,CAAC;EACnC,CAAC,MAAM,IAAI,CAACH,SAAS,CAAC4B,UAAU,CAAC,EAAE;IAC/BlB,0BAA0B,CAACf,IAAI,CAAC;EACpC;EACA,OAAOL,WAAW,CAACsC,UAAU,CAAC;AAClC;AAEA,SAASI,wBAAwBA,CAACR,KAAK,EAAEC,OAAO,EAAE;EAC9C,MAAMC,QAAQ,GAAGF,KAAK,CAACS,eAAe;EACtC,IAAIL,UAAU;EACd,IAAI,CAACpC,UAAU,CAACkC,QAAQ,CAAC,EAAE;IACvB,MAAM7C,MAAM,CAAC4B,KAAK,CAAC,OAAO,CAAC;EAC/B;EACAmB,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAACL,KAAK,EAAE,CAACC,OAAO,CAAC,CAAC;EAC7C,IAAI,CAACzB,SAAS,CAAC4B,UAAU,CAAC,EAAE;IACxBA,UAAU,GAAGM,MAAM,CAACN,UAAU,CAAC;IAC/B,IAAI,CAACO,QAAQ,CAACP,UAAU,CAAC,EAAE;MACvBlB,0BAA0B,CAAChB,WAAW,CAAC;IAC3C;IACAkC,UAAU,GAAGzB,cAAc,CAACyB,UAAU,CAAC;EAC3C;EACA,OAAOtC,WAAW,CAACsC,UAAU,CAAC;AAClC;AAEA,SAASQ,mBAAmBA,CAACZ,KAAK,EAAEa,GAAG,EAAEC,YAAY,EAAE;EACnD,MAAMZ,QAAQ,GAAGF,KAAK,CAACe,UAAU;EACjC,IAAIX,UAAU;EACdrB,wBAAwB,CAACX,MAAM,EAAE8B,QAAQ,CAAC;EAC1CE,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAACL,KAAK,EAAE,CAACa,GAAG,EAAEC,YAAY,CAAC,CAAC;EACvD,IAAI,CAACtC,SAAS,CAAC4B,UAAU,CAAC,EAAE;IACxBA,UAAU,GAAGzB,cAAc,CAACyB,UAAU,CAAC;EAC3C;EACA,OAAOtC,WAAW,CAACsC,UAAU,CAAC;AAClC;AAEA,SAASY,UAAUA,CAAC5B,eAAe,EAAEY,KAAK,EAAEiB,eAAe,EAAEC,YAAY,EAAE;EACvE,IAAIlB,KAAK,CAACmB,SAAS,EAAE;IACjBD,YAAY,CAAClB,KAAK,CAACmB,SAAS,CAAC;EACjC,CAAC,MAAM;IACH,MAAMC,WAAW,GAAGpB,KAAK,CAACqB,gBAAgB,IAAItB,cAAc,CAACC,KAAK,EAAEiB,eAAe,CAAC;IACpF,IAAIjB,KAAK,CAACsB,aAAa,EAAE;MACrBtB,KAAK,CAACqB,gBAAgB,GAAGD,WAAW;IACxC;IACAA,WAAW,CAACG,MAAM,CAAE,MAAM;MACtB,OAAOvB,KAAK,CAACqB,gBAAgB;IACjC,CAAE,CAAC,CAACG,IAAI,CAAEC,OAAO,IAAI;MACjB,IAAIzB,KAAK,CAACsB,aAAa,EAAE;QACrBtB,KAAK,CAACmB,SAAS,GAAGM,OAAO;MAC7B;MACAP,YAAY,CAACO,OAAO,CAAC;IACzB,CAAE,CAAC,CAACC,IAAI,CAAEpC,KAAK,IAAI;MACf,IAAIqC,oBAAoB;MACxB,MAAMC,sBAAsB,GAAGzC,4BAA4B,CAACC,eAAe,CAAC;MAC5E,IAAI,MAAMuC,oBAAoB,GAAG3B,KAAK,CAAC6B,aAAa,CAAC,IAAI,KAAK,CAAC,KAAKF,oBAAoB,IAAIA,oBAAoB,CAACG,IAAI,CAAC9B,KAAK,EAAEV,KAAK,CAAC;MACnIsC,sBAAsB,CAACtC,KAAK,CAAC;IACjC,CAAE,CAAC;EACP;AACJ;AAEA,SAASyC,mBAAmBA,CAAC3C,eAAe,EAAEY,KAAK,EAAEC,OAAO,EAAE+B,SAAS,EAAE;EACrE/B,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,MAAMgB,eAAe,GAAG,CAAC,CAAC;EAC1B,IAAI,UAAU,IAAIhB,OAAO,EAAE;IACvBgB,eAAe,CAACgB,QAAQ,GAAGhC,OAAO,CAACgC,QAAQ;EAC/C;EACAjB,UAAU,CAAC5B,eAAe,EAAEY,KAAK,EAAEiB,eAAe,EAAGQ,OAAO,IAAI;IAC5D,MAAMS,YAAY,GAAG/E,UAAU,CAACsE,OAAO,EAAE;MACrCU,YAAY,EAAEnC,KAAK,CAAC6B;IACxB,CAAC,CAAC;IACF,IAAIO,UAAU;IACd,IAAIC,eAAe;IACnB,MAAMC,QAAQ,GAAG,EAAE;IACnB,IAAIC,KAAK;IACT,IAAIC,UAAU;IACd,IAAI,CAACR,SAAS,EAAE;MACZI,UAAU,GAAG9E,WAAW,CAACmF,cAAc,CAACP,YAAY,EAAEjC,OAAO,CAAC;MAC9D,IAAImC,UAAU,KAAKF,YAAY,EAAE;QAC7BK,KAAK,GAAGd,OAAO,CAACiB,KAAK,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACHJ,QAAQ,CAACK,IAAI,CAACP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAACpB,IAAI,CAAEqB,WAAW,IAAI;UACtDN,KAAK,GAAGM,WAAW;QACvB,CAAE,CAAC,CAAC;MACR;IACJ;IACA,IAAI5C,OAAO,CAAC6C,iBAAiB,IAAId,SAAS,EAAE;MACxCK,eAAe,GAAG/E,WAAW,CAACmF,cAAc,CAACP,YAAY,EAAEjC,OAAO,EAAE,IAAI,CAAC;MACzE,IAAIoC,eAAe,KAAKH,YAAY,EAAE;QAClCM,UAAU,GAAGf,OAAO,CAACsB,MAAM;MAC/B,CAAC,MAAM;QACHT,QAAQ,CAACK,IAAI,CAACN,eAAe,CAACW,KAAK,CAAC,CAAC,CAACxB,IAAI,CAAEqB,WAAW,IAAI;UACvDL,UAAU,GAAGK,WAAW;QAC5B,CAAE,CAAC,CAAC;MACR;IACJ;IACA9E,IAAI,CAACsC,KAAK,CAACzC,CAAC,EAAE0E,QAAQ,CAAC,CAACd,IAAI,CAAE,MAAM;MAChC,IAAIQ,SAAS,EAAE;QACX5C,eAAe,CAACP,OAAO,CAAC2D,UAAU,CAAC;MACvC,CAAC,MAAM,IAAIvC,OAAO,CAAC6C,iBAAiB,EAAE;QAClC1D,eAAe,CAACP,OAAO,CAAC0D,KAAK,EAAE;UAC3BC,UAAU,EAAEA;QAChB,CAAC,CAAC;MACN,CAAC,MAAM;QACHpD,eAAe,CAACP,OAAO,CAAC0D,KAAK,CAAC;MAClC;IACJ,CAAE,CAAC,CAACb,IAAI,CAAEuB,CAAC,IAAI;MACX7D,eAAe,CAACU,MAAM,CAACmD,CAAC,CAAC;IAC7B,CAAE,CAAC;EACP,CAAE,CAAC;AACP;AAEA,SAASC,iBAAiBA,CAAC9D,eAAe,EAAEY,KAAK,EAAEa,GAAG,EAAE;EACpDG,UAAU,CAAC5B,eAAe,EAAEY,KAAK,EAAE,CAAC,CAAC,EAAGyB,OAAO,IAAI;IAC/C,MAAM0B,OAAO,GAAGnD,KAAK,CAACa,GAAG,CAAC,CAAC;IAC3B,IAAIuC,IAAI;IACR,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG7B,OAAO,CAACsB,MAAM,EAAEM,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAChDD,IAAI,GAAG3B,OAAO,CAAC4B,CAAC,CAAC;MACjB,IAAI5F,SAAS,CAAC0F,OAAO,EAAEnD,KAAK,CAACuD,KAAK,CAAC9B,OAAO,CAAC4B,CAAC,CAAC,CAAC,EAAExC,GAAG,CAAC,EAAE;QAClDzB,eAAe,CAACP,OAAO,CAACuE,IAAI,CAAC;QAC7B;MACJ;IACJ;IACAhE,eAAe,CAACU,MAAM,CAACzC,MAAM,CAAC4B,KAAK,CAAC,OAAO,CAAC,CAAC;EACjD,CAAE,CAAC;AACP;AACA,MAAMuE,WAAW,GAAGvF,KAAK,CAACwF,OAAO,CAAC;EAC9BC,IAAIA,CAACzD,OAAO,EAAE;IACVA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAI,CAAC0D,QAAQ,CAAC1D,OAAO,CAAC;IACtB,IAAI,CAAC2D,iBAAiB,GAAG,CAAC,CAAC3D,OAAO,CAAC4D,gBAAgB,IAAI,KAAK,KAAK5D,OAAO,CAAC6D,QAAQ;IACjF,IAAI,CAACC,SAAS,GAAG9D,OAAO,CAAC6D,QAAQ;IACjC,IAAI,CAACxC,aAAa,GAAG,KAAK,KAAKrB,OAAO,CAAC+D,YAAY;IACnD,IAAI,CAAC7D,SAAS,GAAGF,OAAO,CAAC9B,IAAI,CAAC;IAC9B,IAAI,CAACsC,eAAe,GAAGR,OAAO,CAAC/B,WAAW,CAAC;IAC3C,IAAI,CAAC6C,UAAU,GAAGd,OAAO,CAAC7B,MAAM,CAAC;IACjC,IAAI,CAAC6F,WAAW,GAAGhE,OAAO,CAAC5B,MAAM,CAAC;IAClC,IAAI,CAAC6F,WAAW,GAAGjE,OAAO,CAAC3B,MAAM,CAAC;IAClC,IAAI,CAAC6F,WAAW,GAAGlE,OAAO,CAAC1B,MAAM,CAAC;EACtC,CAAC;EACD6F,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACjD,SAAS;EACzB,CAAC;EACDkD,WAAWA,CAAA,EAAG;IACV,MAAMhH,MAAM,CAAC4B,KAAK,CAAC,OAAO,CAAC;EAC/B,CAAC;EACDqF,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACF,WAAW,CAAC,CAAC;EACtB,CAAC;EACDG,eAAeA,CAACtE,OAAO,EAAE;IACrB,IAAIuE,CAAC,GAAG,IAAI3G,QAAQ,CAAD,CAAC;IACpB,IAAI,KAAK,KAAK,IAAI,CAACkG,SAAS,IAAI,CAAC,IAAI,CAACtD,eAAe,EAAE;MACnDsB,mBAAmB,CAACyC,CAAC,EAAE,IAAI,EAAEvE,OAAO,EAAE,IAAI,CAAC;IAC/C,CAAC,MAAM;MACHO,wBAAwB,CAAC,IAAI,EAAEP,OAAO,CAAC,CAACuB,IAAI,CAAEwB,KAAK,IAAI;QACnDwB,CAAC,CAAC3F,OAAO,CAAC6B,MAAM,CAACsC,KAAK,CAAC,CAAC;MAC5B,CAAE,CAAC,CAACtB,IAAI,CAACvC,4BAA4B,CAACqF,CAAC,CAAC,CAAC;MACzCA,CAAC,GAAG,IAAI,CAACC,gBAAgB,CAACD,CAAC,CAAC;IAChC;IACA,OAAOA,CAAC,CAAC1F,OAAO,CAAC,CAAC;EACtB,CAAC;EACD4F,SAASA,CAACC,OAAO,EAAE;IACf,IAAI,IAAI,CAACxD,SAAS,EAAE;MAChB/D,UAAU,CAAC;QACPwH,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,IAAI,CAAC1D,SAAS;QACpBwD,OAAO,EAAEA;MACb,CAAC,CAAC;IACN;EACJ,CAAC;EACDG,SAASA,CAAC7E,OAAO,EAAE;IACf,IAAIuE,CAAC,GAAG,IAAI3G,QAAQ,CAAD,CAAC;IACpB,IAAI,KAAK,KAAK,IAAI,CAACkG,SAAS,EAAE;MAC1BhC,mBAAmB,CAACyC,CAAC,EAAE,IAAI,EAAEvE,OAAO,EAAE,KAAK,CAAC;IAChD,CAAC,MAAM;MACHF,cAAc,CAAC,IAAI,EAAEE,OAAO,CAAC,CAACuB,IAAI,CAAE,CAACqD,IAAI,EAAEE,KAAK,KAAK;QACjDP,CAAC,CAAC3F,OAAO,CAACgG,IAAI,EAAEE,KAAK,CAAC;MAC1B,CAAE,CAAC,CAACrD,IAAI,CAACvC,4BAA4B,CAACqF,CAAC,CAAC,CAAC;MACzCA,CAAC,GAAG,IAAI,CAACC,gBAAgB,CAACD,CAAC,CAAC;IAChC;IACA,OAAOA,CAAC,CAAC1F,OAAO,CAAC,CAAC;EACtB,CAAC;EACDkG,UAAUA,CAACnE,GAAG,EAAEC,YAAY,EAAE;IAC1B,MAAM0D,CAAC,GAAG,IAAI3G,QAAQ,CAAD,CAAC;IACtB,IAAI,IAAI,CAACoH,aAAa,CAAC,CAAC,EAAE;MACtB,IAAI,CAACC,WAAW,CAAC,CAAC;MAClBhC,iBAAiB,CAACsB,CAAC,EAAE,IAAI,EAAE3D,GAAG,CAAC;IACnC,CAAC,MAAM;MACHD,mBAAmB,CAAC,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC,CAACU,IAAI,CAAE/C,GAAG,IAAI;QACtD+F,CAAC,CAAC3F,OAAO,CAACJ,GAAG,CAAC;MAClB,CAAE,CAAC,CAACiD,IAAI,CAACvC,4BAA4B,CAACqF,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOA,CAAC,CAAC1F,OAAO,CAAC,CAAC;EACtB,CAAC;EACDmG,aAAaA,CAAA,EAAG;IACZ,OAAO,KAAK,KAAK,IAAI,CAAClB,SAAS,IAAI,CAAC,IAAI,CAAChD,UAAU;EACvD,CAAC;EACDoE,WAAWA,CAACC,MAAM,EAAE;IAChB,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAMnF,QAAQ,GAAGmF,IAAI,CAACpB,WAAW;IACjC,IAAI7D,UAAU;IACd,MAAMoE,CAAC,GAAG,IAAI3G,QAAQ,CAAD,CAAC;IACtBkB,wBAAwB,CAACV,MAAM,EAAE6B,QAAQ,CAAC;IAC1CE,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAACgF,IAAI,EAAE,CAACD,MAAM,CAAC,CAAC;IAC3C,IAAI,CAAC5G,SAAS,CAAC4B,UAAU,CAAC,EAAE;MACxBA,UAAU,GAAGzB,cAAc,CAACyB,UAAU,CAAC;IAC3C;IACAtC,WAAW,CAACsC,UAAU,CAAC,CAACoB,IAAI,CAAE8D,cAAc,IAAI;MAC5C,IAAI3H,MAAM,CAAC,CAAC,CAAC4H,oBAAoB,EAAE;QAC/Bf,CAAC,CAAC3F,OAAO,CAACuG,MAAM,EAAEE,cAAc,CAAC;MACrC,CAAC,MAAM;QACHd,CAAC,CAAC3F,OAAO,CAACyG,cAAc,IAAIF,MAAM,EAAEC,IAAI,CAAC9B,KAAK,CAAC+B,cAAc,CAAC,CAAC;MACnE;IACJ,CAAE,CAAC,CAAC5D,IAAI,CAACvC,4BAA4B,CAACqF,CAAC,CAAC,CAAC;IACzC,OAAOA,CAAC,CAAC1F,OAAO,CAAC,CAAC;EACtB,CAAC;EACD0G,WAAWA,CAAC3E,GAAG,EAAEuE,MAAM,EAAE;IACrB,MAAMlF,QAAQ,GAAG,IAAI,CAACgE,WAAW;IACjC,IAAI9D,UAAU;IACd,MAAMoE,CAAC,GAAG,IAAI3G,QAAQ,CAAD,CAAC;IACtBkB,wBAAwB,CAACT,MAAM,EAAE4B,QAAQ,CAAC;IAC1CE,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAAC,IAAI,EAAE,CAACQ,GAAG,EAAEuE,MAAM,CAAC,CAAC;IAChD,IAAI,CAAC5G,SAAS,CAAC4B,UAAU,CAAC,EAAE;MACxBA,UAAU,GAAGzB,cAAc,CAACyB,UAAU,CAAC;IAC3C;IACAtC,WAAW,CAACsC,UAAU,CAAC,CAACoB,IAAI,CAAE8D,cAAc,IAAI;MAC5C,IAAI3H,MAAM,CAAC,CAAC,CAAC4H,oBAAoB,EAAE;QAC/Bf,CAAC,CAAC3F,OAAO,CAACgC,GAAG,EAAEuE,MAAM,CAAC;MAC1B,CAAC,MAAM;QACHZ,CAAC,CAAC3F,OAAO,CAACyG,cAAc,IAAIF,MAAM,EAAEvE,GAAG,CAAC;MAC5C;IACJ,CAAE,CAAC,CAACa,IAAI,CAACvC,4BAA4B,CAACqF,CAAC,CAAC,CAAC;IACzC,OAAOA,CAAC,CAAC1F,OAAO,CAAC,CAAC;EACtB,CAAC;EACD2G,WAAWA,CAAC5E,GAAG,EAAE;IACb,MAAMX,QAAQ,GAAG,IAAI,CAACiE,WAAW;IACjC,IAAI/D,UAAU;IACd,MAAMoE,CAAC,GAAG,IAAI3G,QAAQ,CAAD,CAAC;IACtBkB,wBAAwB,CAACR,MAAM,EAAE2B,QAAQ,CAAC;IAC1CE,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAAC,IAAI,EAAE,CAACQ,GAAG,CAAC,CAAC;IACxC,IAAI,CAACrC,SAAS,CAAC4B,UAAU,CAAC,EAAE;MACxBA,UAAU,GAAGzB,cAAc,CAAC,CAAC;IACjC;IACAb,WAAW,CAACsC,UAAU,CAAC,CAACoB,IAAI,CAAE,MAAM;MAChCgD,CAAC,CAAC3F,OAAO,CAACgC,GAAG,CAAC;IAClB,CAAE,CAAC,CAACa,IAAI,CAACvC,4BAA4B,CAACqF,CAAC,CAAC,CAAC;IACzC,OAAOA,CAAC,CAAC1F,OAAO,CAAC,CAAC;EACtB;AACJ,CAAC,CAAC;AACF,eAAe0E,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}