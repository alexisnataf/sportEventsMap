{"ast":null,"code":"/**\r\n * DevExtreme (esm/common/core/localization/number.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../../../core/utils/dependency_injector\";\nimport { escapeRegExp } from \"../../../core/utils/common\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isPlainObject } from \"../../../core/utils/type\";\nimport { getFormatter } from \"./ldml/number\";\nimport config from \"../../../core/config\";\nimport errors from \"../../../core/errors\";\nimport { toFixed } from \"./utils\";\nimport currencyLocalization from \"./currency\";\nimport intlNumberLocalization from \"./intl/number\";\nconst hasIntl = \"undefined\" !== typeof Intl;\nconst MAX_LARGE_NUMBER_POWER = 4;\nconst DECIMAL_BASE = 10;\nconst NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\nconst LargeNumberFormatPostfixes = {\n  1: \"K\",\n  2: \"M\",\n  3: \"B\",\n  4: \"T\"\n};\nconst LargeNumberFormatPowers = {\n  largenumber: \"auto\",\n  thousands: 1,\n  millions: 2,\n  billions: 3,\n  trillions: 4\n};\nconst numberLocalization = dependencyInjector({\n  engine: function () {\n    return \"base\";\n  },\n  numericFormats: NUMERIC_FORMATS,\n  defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\n  _parseNumberFormatString: function (formatType) {\n    const formatObject = {};\n    if (!formatType || \"string\" !== typeof formatType) {\n      return;\n    }\n    const formatList = formatType.toLowerCase().split(\" \");\n    each(formatList, (index, value) => {\n      if (NUMERIC_FORMATS.includes(value)) {\n        formatObject.formatType = value;\n      } else if (value in LargeNumberFormatPowers) {\n        formatObject.power = LargeNumberFormatPowers[value];\n      }\n    });\n    if (formatObject.power && !formatObject.formatType) {\n      formatObject.formatType = \"fixedpoint\";\n    }\n    if (formatObject.formatType) {\n      return formatObject;\n    }\n  },\n  _calculateNumberPower: function (value, base, minPower, maxPower) {\n    let number = Math.abs(value);\n    let power = 0;\n    if (number > 1) {\n      while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\n        power++;\n        number /= base;\n      }\n    } else if (number > 0 && number < 1) {\n      while (number < 1 && (void 0 === minPower || power > minPower)) {\n        power--;\n        number *= base;\n      }\n    }\n    return power;\n  },\n  _getNumberByPower: function (number, power, base) {\n    let result = number;\n    while (power > 0) {\n      result /= base;\n      power--;\n    }\n    while (power < 0) {\n      result *= base;\n      power++;\n    }\n    return result;\n  },\n  _formatNumber: function (value, formatObject, formatConfig) {\n    if (\"auto\" === formatObject.power) {\n      formatObject.power = this._calculateNumberPower(value, 1e3, 0, 4);\n    }\n    if (formatObject.power) {\n      value = this._getNumberByPower(value, formatObject.power, 1e3);\n    }\n    const powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\n    let result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\n    result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\n    return result;\n  },\n  _formatNumberExponential: function (value, formatConfig) {\n    let power = this._calculateNumberPower(value, 10);\n    let number = this._getNumberByPower(value, power, 10);\n    if (void 0 === formatConfig.precision) {\n      formatConfig.precision = 1;\n    }\n    if (number.toFixed(formatConfig.precision || 0) >= 10) {\n      power++;\n      number /= 10;\n    }\n    const powString = (power >= 0 ? \"+\" : \"\") + power.toString();\n    return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString;\n  },\n  _addZeroes: function (value, precision) {\n    const multiplier = Math.pow(10, precision);\n    const sign = value < 0 ? \"-\" : \"\";\n    value = (Math.abs(value) * multiplier >>> 0) / multiplier;\n    let result = value.toString();\n    while (result.length < precision) {\n      result = \"0\" + result;\n    }\n    return sign + result;\n  },\n  _addGroupSeparators: function (value) {\n    const parts = value.toString().split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config().thousandsSeparator) + (parts[1] ? config().decimalSeparator + parts[1] : \"\");\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this._formatNumberExponential(value, formatConfig);\n    }\n    if (\"decimal\" !== format && null !== formatConfig.precision) {\n      formatConfig.precision = formatConfig.precision || 0;\n    }\n    if (\"percent\" === format) {\n      value *= 100;\n    }\n    if (void 0 !== formatConfig.precision) {\n      if (\"decimal\" === format) {\n        value = this._addZeroes(value, formatConfig.precision);\n      } else {\n        value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision);\n      }\n    }\n    if (\"decimal\" !== format) {\n      value = this._addGroupSeparators(value);\n    } else {\n      value = value.toString().replace(\".\", config().decimalSeparator);\n    }\n    if (\"percent\" === format) {\n      value += \"%\";\n    }\n    return value;\n  },\n  _normalizeFormat: function (format) {\n    if (!format) {\n      return {};\n    }\n    if (\"function\" === typeof format) {\n      return format;\n    }\n    if (!isPlainObject(format)) {\n      format = {\n        type: format\n      };\n    }\n    return format;\n  },\n  _getSeparators: function () {\n    return {\n      decimalSeparator: this.getDecimalSeparator(),\n      thousandsSeparator: this.getThousandsSeparator()\n    };\n  },\n  getThousandsSeparator: function () {\n    return this.format(1e4, \"fixedPoint\")[2];\n  },\n  getDecimalSeparator: function () {\n    return this.format(1.2, {\n      type: \"fixedPoint\",\n      precision: 1\n    })[1];\n  },\n  convertDigits: function (value, toStandard) {\n    const digits = this.format(90, \"decimal\");\n    if (\"string\" !== typeof value || \"0\" === digits[1]) {\n      return value;\n    }\n    const fromFirstDigit = toStandard ? digits[1] : \"0\";\n    const toFirstDigit = toStandard ? \"0\" : digits[1];\n    const fromLastDigit = toStandard ? digits[0] : \"9\";\n    const regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\n    return value.replace(regExp, char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))));\n  },\n  getNegativeEtalonRegExp: function (format) {\n    const separators = this._getSeparators();\n    const digitalRegExp = new RegExp(\"[0-9\" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\n    let negativeEtalon = this.format(-1, format).replace(digitalRegExp, \"1\");\n    [\"\\\\\", \"(\", \")\", \"[\", \"]\", \"*\", \"+\", \"$\", \"^\", \"?\", \"|\", \"{\", \"}\"].forEach(char => {\n      negativeEtalon = negativeEtalon.replace(new RegExp(`\\\\${char}`, \"g\"), `\\\\${char}`);\n    });\n    negativeEtalon = negativeEtalon.replace(/ /g, \"\\\\s\");\n    negativeEtalon = negativeEtalon.replace(/1/g, \".*\");\n    return new RegExp(negativeEtalon, \"g\");\n  },\n  getSign: function (text, format) {\n    if (!format) {\n      if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\n        return -1;\n      }\n      return 1;\n    }\n    const negativeEtalon = this.getNegativeEtalonRegExp(format);\n    return text.match(negativeEtalon) ? -1 : 1;\n  },\n  format: function (value, format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n    if (\"number\" === typeof format) {\n      return value;\n    }\n    format = format && format.formatter || format;\n    if (\"function\" === typeof format) {\n      return format(value);\n    }\n    format = this._normalizeFormat(format);\n    if (!format.type) {\n      format.type = \"decimal\";\n    }\n    const numberConfig = this._parseNumberFormatString(format.type);\n    if (!numberConfig) {\n      const formatterConfig = this._getSeparators();\n      formatterConfig.unlimitedIntegerDigits = format.unlimitedIntegerDigits;\n      return this.convertDigits(getFormatter(format.type, formatterConfig)(value));\n    }\n    return this._formatNumber(value, numberConfig, format);\n  },\n  parse: function (text, format) {\n    if (!text) {\n      return;\n    }\n    if (format && format.parser) {\n      return format.parser(text);\n    }\n    text = this.convertDigits(text, true);\n    if (format && \"string\" !== typeof format) {\n      errors.log(\"W0011\");\n    }\n    const decimalSeparator = this.getDecimalSeparator();\n    const regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\n    const cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\n    if (\".\" === cleanedText || \"\" === cleanedText) {\n      return null;\n    }\n    if (this._calcSignificantDigits(cleanedText) > 15) {\n      return NaN;\n    }\n    let parsed = +cleanedText * this.getSign(text, format);\n    format = this._normalizeFormat(format);\n    const formatConfig = this._parseNumberFormatString(format.type);\n    let power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;\n    if (power) {\n      if (\"auto\" === power) {\n        const match = text.match(/\\d(K|M|B|T)/);\n        if (match) {\n          power = Object.keys(LargeNumberFormatPostfixes).find(power => LargeNumberFormatPostfixes[power] === match[1]);\n        }\n      }\n      parsed *= Math.pow(10, 3 * power);\n    }\n    if (\"percent\" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {\n      parsed /= 100;\n    }\n    return parsed;\n  },\n  _calcSignificantDigits: function (text) {\n    const [integer, fractional] = text.split(\".\");\n    const calcDigitsAfterLeadingZeros = digits => {\n      let index = -1;\n      for (let i = 0; i < digits.length; i++) {\n        if (\"0\" !== digits[i]) {\n          index = i;\n          break;\n        }\n      }\n      return index > -1 ? digits.length - index : 0;\n    };\n    let result = 0;\n    if (integer) {\n      result += calcDigitsAfterLeadingZeros(integer.split(\"\"));\n    }\n    if (fractional) {\n      result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse());\n    }\n    return result;\n  }\n});\nnumberLocalization.inject(currencyLocalization);\nif (hasIntl) {\n  numberLocalization.inject(intlNumberLocalization);\n}\nexport default numberLocalization;","map":{"version":3,"names":["dependencyInjector","escapeRegExp","each","isPlainObject","getFormatter","config","errors","toFixed","currencyLocalization","intlNumberLocalization","hasIntl","Intl","MAX_LARGE_NUMBER_POWER","DECIMAL_BASE","NUMERIC_FORMATS","LargeNumberFormatPostfixes","LargeNumberFormatPowers","largenumber","thousands","millions","billions","trillions","numberLocalization","engine","numericFormats","defaultLargeNumberFormatPostfixes","_parseNumberFormatString","formatType","formatObject","formatList","toLowerCase","split","index","value","includes","power","_calculateNumberPower","base","minPower","maxPower","number","Math","abs","_getNumberByPower","result","_formatNumber","formatConfig","powerPostfix","_formatNumberCore","replace","_formatNumberExponential","precision","powString","toString","_addZeroes","multiplier","pow","sign","length","_addGroupSeparators","parts","thousandsSeparator","decimalSeparator","format","toPrecision","_normalizeFormat","type","_getSeparators","getDecimalSeparator","getThousandsSeparator","convertDigits","toStandard","digits","fromFirstDigit","toFirstDigit","fromLastDigit","regExp","RegExp","char","String","fromCharCode","charCodeAt","getNegativeEtalonRegExp","separators","digitalRegExp","negativeEtalon","forEach","getSign","text","charAt","match","formatter","numberConfig","formatterConfig","unlimitedIntegerDigits","parse","parser","log","cleanedText","_calcSignificantDigits","NaN","parsed","Object","keys","find","integer","fractional","calcDigitsAfterLeadingZeros","i","reverse","inject"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/common/core/localization/number.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/common/core/localization/number.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dependencyInjector from \"../../../core/utils/dependency_injector\";\r\nimport {\r\n    escapeRegExp\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isPlainObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    getFormatter\r\n} from \"./ldml/number\";\r\nimport config from \"../../../core/config\";\r\nimport errors from \"../../../core/errors\";\r\nimport {\r\n    toFixed\r\n} from \"./utils\";\r\nimport currencyLocalization from \"./currency\";\r\nimport intlNumberLocalization from \"./intl/number\";\r\nconst hasIntl = \"undefined\" !== typeof Intl;\r\nconst MAX_LARGE_NUMBER_POWER = 4;\r\nconst DECIMAL_BASE = 10;\r\nconst NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\r\nconst LargeNumberFormatPostfixes = {\r\n    1: \"K\",\r\n    2: \"M\",\r\n    3: \"B\",\r\n    4: \"T\"\r\n};\r\nconst LargeNumberFormatPowers = {\r\n    largenumber: \"auto\",\r\n    thousands: 1,\r\n    millions: 2,\r\n    billions: 3,\r\n    trillions: 4\r\n};\r\nconst numberLocalization = dependencyInjector({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    numericFormats: NUMERIC_FORMATS,\r\n    defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\r\n    _parseNumberFormatString: function(formatType) {\r\n        const formatObject = {};\r\n        if (!formatType || \"string\" !== typeof formatType) {\r\n            return\r\n        }\r\n        const formatList = formatType.toLowerCase().split(\" \");\r\n        each(formatList, ((index, value) => {\r\n            if (NUMERIC_FORMATS.includes(value)) {\r\n                formatObject.formatType = value\r\n            } else if (value in LargeNumberFormatPowers) {\r\n                formatObject.power = LargeNumberFormatPowers[value]\r\n            }\r\n        }));\r\n        if (formatObject.power && !formatObject.formatType) {\r\n            formatObject.formatType = \"fixedpoint\"\r\n        }\r\n        if (formatObject.formatType) {\r\n            return formatObject\r\n        }\r\n    },\r\n    _calculateNumberPower: function(value, base, minPower, maxPower) {\r\n        let number = Math.abs(value);\r\n        let power = 0;\r\n        if (number > 1) {\r\n            while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\r\n                power++;\r\n                number /= base\r\n            }\r\n        } else if (number > 0 && number < 1) {\r\n            while (number < 1 && (void 0 === minPower || power > minPower)) {\r\n                power--;\r\n                number *= base\r\n            }\r\n        }\r\n        return power\r\n    },\r\n    _getNumberByPower: function(number, power, base) {\r\n        let result = number;\r\n        while (power > 0) {\r\n            result /= base;\r\n            power--\r\n        }\r\n        while (power < 0) {\r\n            result *= base;\r\n            power++\r\n        }\r\n        return result\r\n    },\r\n    _formatNumber: function(value, formatObject, formatConfig) {\r\n        if (\"auto\" === formatObject.power) {\r\n            formatObject.power = this._calculateNumberPower(value, 1e3, 0, 4)\r\n        }\r\n        if (formatObject.power) {\r\n            value = this._getNumberByPower(value, formatObject.power, 1e3)\r\n        }\r\n        const powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\r\n        let result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\r\n        result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\r\n        return result\r\n    },\r\n    _formatNumberExponential: function(value, formatConfig) {\r\n        let power = this._calculateNumberPower(value, 10);\r\n        let number = this._getNumberByPower(value, power, 10);\r\n        if (void 0 === formatConfig.precision) {\r\n            formatConfig.precision = 1\r\n        }\r\n        if (number.toFixed(formatConfig.precision || 0) >= 10) {\r\n            power++;\r\n            number /= 10\r\n        }\r\n        const powString = (power >= 0 ? \"+\" : \"\") + power.toString();\r\n        return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString\r\n    },\r\n    _addZeroes: function(value, precision) {\r\n        const multiplier = Math.pow(10, precision);\r\n        const sign = value < 0 ? \"-\" : \"\";\r\n        value = (Math.abs(value) * multiplier >>> 0) / multiplier;\r\n        let result = value.toString();\r\n        while (result.length < precision) {\r\n            result = \"0\" + result\r\n        }\r\n        return sign + result\r\n    },\r\n    _addGroupSeparators: function(value) {\r\n        const parts = value.toString().split(\".\");\r\n        return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config().thousandsSeparator) + (parts[1] ? config().decimalSeparator + parts[1] : \"\")\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this._formatNumberExponential(value, formatConfig)\r\n        }\r\n        if (\"decimal\" !== format && null !== formatConfig.precision) {\r\n            formatConfig.precision = formatConfig.precision || 0\r\n        }\r\n        if (\"percent\" === format) {\r\n            value *= 100\r\n        }\r\n        if (void 0 !== formatConfig.precision) {\r\n            if (\"decimal\" === format) {\r\n                value = this._addZeroes(value, formatConfig.precision)\r\n            } else {\r\n                value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision)\r\n            }\r\n        }\r\n        if (\"decimal\" !== format) {\r\n            value = this._addGroupSeparators(value)\r\n        } else {\r\n            value = value.toString().replace(\".\", config().decimalSeparator)\r\n        }\r\n        if (\"percent\" === format) {\r\n            value += \"%\"\r\n        }\r\n        return value\r\n    },\r\n    _normalizeFormat: function(format) {\r\n        if (!format) {\r\n            return {}\r\n        }\r\n        if (\"function\" === typeof format) {\r\n            return format\r\n        }\r\n        if (!isPlainObject(format)) {\r\n            format = {\r\n                type: format\r\n            }\r\n        }\r\n        return format\r\n    },\r\n    _getSeparators: function() {\r\n        return {\r\n            decimalSeparator: this.getDecimalSeparator(),\r\n            thousandsSeparator: this.getThousandsSeparator()\r\n        }\r\n    },\r\n    getThousandsSeparator: function() {\r\n        return this.format(1e4, \"fixedPoint\")[2]\r\n    },\r\n    getDecimalSeparator: function() {\r\n        return this.format(1.2, {\r\n            type: \"fixedPoint\",\r\n            precision: 1\r\n        })[1]\r\n    },\r\n    convertDigits: function(value, toStandard) {\r\n        const digits = this.format(90, \"decimal\");\r\n        if (\"string\" !== typeof value || \"0\" === digits[1]) {\r\n            return value\r\n        }\r\n        const fromFirstDigit = toStandard ? digits[1] : \"0\";\r\n        const toFirstDigit = toStandard ? \"0\" : digits[1];\r\n        const fromLastDigit = toStandard ? digits[0] : \"9\";\r\n        const regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\r\n        return value.replace(regExp, (char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0)))))\r\n    },\r\n    getNegativeEtalonRegExp: function(format) {\r\n        const separators = this._getSeparators();\r\n        const digitalRegExp = new RegExp(\"[0-9\" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\r\n        let negativeEtalon = this.format(-1, format).replace(digitalRegExp, \"1\");\r\n        [\"\\\\\", \"(\", \")\", \"[\", \"]\", \"*\", \"+\", \"$\", \"^\", \"?\", \"|\", \"{\", \"}\"].forEach((char => {\r\n            negativeEtalon = negativeEtalon.replace(new RegExp(`\\\\${char}`, \"g\"), `\\\\${char}`)\r\n        }));\r\n        negativeEtalon = negativeEtalon.replace(/ /g, \"\\\\s\");\r\n        negativeEtalon = negativeEtalon.replace(/1/g, \".*\");\r\n        return new RegExp(negativeEtalon, \"g\")\r\n    },\r\n    getSign: function(text, format) {\r\n        if (!format) {\r\n            if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\r\n                return -1\r\n            }\r\n            return 1\r\n        }\r\n        const negativeEtalon = this.getNegativeEtalonRegExp(format);\r\n        return text.match(negativeEtalon) ? -1 : 1\r\n    },\r\n    format: function(value, format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        if (\"number\" === typeof format) {\r\n            return value\r\n        }\r\n        format = format && format.formatter || format;\r\n        if (\"function\" === typeof format) {\r\n            return format(value)\r\n        }\r\n        format = this._normalizeFormat(format);\r\n        if (!format.type) {\r\n            format.type = \"decimal\"\r\n        }\r\n        const numberConfig = this._parseNumberFormatString(format.type);\r\n        if (!numberConfig) {\r\n            const formatterConfig = this._getSeparators();\r\n            formatterConfig.unlimitedIntegerDigits = format.unlimitedIntegerDigits;\r\n            return this.convertDigits(getFormatter(format.type, formatterConfig)(value))\r\n        }\r\n        return this._formatNumber(value, numberConfig, format)\r\n    },\r\n    parse: function(text, format) {\r\n        if (!text) {\r\n            return\r\n        }\r\n        if (format && format.parser) {\r\n            return format.parser(text)\r\n        }\r\n        text = this.convertDigits(text, true);\r\n        if (format && \"string\" !== typeof format) {\r\n            errors.log(\"W0011\")\r\n        }\r\n        const decimalSeparator = this.getDecimalSeparator();\r\n        const regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\r\n        const cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\r\n        if (\".\" === cleanedText || \"\" === cleanedText) {\r\n            return null\r\n        }\r\n        if (this._calcSignificantDigits(cleanedText) > 15) {\r\n            return NaN\r\n        }\r\n        let parsed = +cleanedText * this.getSign(text, format);\r\n        format = this._normalizeFormat(format);\r\n        const formatConfig = this._parseNumberFormatString(format.type);\r\n        let power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;\r\n        if (power) {\r\n            if (\"auto\" === power) {\r\n                const match = text.match(/\\d(K|M|B|T)/);\r\n                if (match) {\r\n                    power = Object.keys(LargeNumberFormatPostfixes).find((power => LargeNumberFormatPostfixes[power] === match[1]))\r\n                }\r\n            }\r\n            parsed *= Math.pow(10, 3 * power)\r\n        }\r\n        if (\"percent\" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {\r\n            parsed /= 100\r\n        }\r\n        return parsed\r\n    },\r\n    _calcSignificantDigits: function(text) {\r\n        const [integer, fractional] = text.split(\".\");\r\n        const calcDigitsAfterLeadingZeros = digits => {\r\n            let index = -1;\r\n            for (let i = 0; i < digits.length; i++) {\r\n                if (\"0\" !== digits[i]) {\r\n                    index = i;\r\n                    break\r\n                }\r\n            }\r\n            return index > -1 ? digits.length - index : 0\r\n        };\r\n        let result = 0;\r\n        if (integer) {\r\n            result += calcDigitsAfterLeadingZeros(integer.split(\"\"))\r\n        }\r\n        if (fractional) {\r\n            result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse())\r\n        }\r\n        return result\r\n    }\r\n});\r\nnumberLocalization.inject(currencyLocalization);\r\nif (hasIntl) {\r\n    numberLocalization.inject(intlNumberLocalization)\r\n}\r\nexport default numberLocalization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}