{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/list/m_list.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { fx } from \"../../../common/core/animation\";\nimport { name as clickEventName } from \"../../../common/core/events/click\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { end as swipeEventEnd } from \"../../../common/core/events/swipe\";\nimport { addNamespace } from \"../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport devices from \"../../../core/devices\";\nimport { getPublicElement } from \"../../../core/element\";\nimport Guid from \"../../../core/guid\";\nimport $ from \"../../../core/renderer\";\nimport { BindableTemplate } from \"../../../core/templates/bindable_template\";\nimport { ensureDefined, noop } from \"../../../core/utils/common\";\nimport { compileGetter } from \"../../../core/utils/data\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getImageContainer } from \"../../../core/utils/icon\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getHeight, getOuterHeight, setHeight } from \"../../../core/utils/size\";\nimport { isDefined, isPlainObject } from \"../../../core/utils/type\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport Button from \"../../../ui/button\";\nimport ScrollView from \"../../../ui/scroll_view\";\nimport { current, isMaterial, isMaterialBased } from \"../../../ui/themes\";\nimport { render } from \"../../../ui/widget/utils.ink_ripple\";\nimport supportUtils from \"../../core/utils/m_support\";\nimport CollectionWidget from \"../../ui/collection/m_collection_widget.live_update\";\nimport { deviceDependentOptions } from \"../../ui/scroll_view/m_scrollable.device\";\nimport { getElementMargin } from \"../../ui/scroll_view/utils/get_element_style\";\nimport DataConverterMixin from \"../../ui/shared/m_grouped_data_converter_mixin\";\nimport ListItem from \"./m_item\";\nconst LIST_CLASS = \"dx-list\";\nconst LIST_ITEMS_CLASS = \"dx-list-items\";\nconst LIST_ITEM_CLASS = \"dx-list-item\";\nconst LIST_ITEM_SELECTOR = \".dx-list-item\";\nconst LIST_ITEM_ICON_CONTAINER_CLASS = \"dx-list-item-icon-container\";\nconst LIST_ITEM_ICON_CLASS = \"dx-list-item-icon\";\nconst LIST_GROUP_CLASS = \"dx-list-group\";\nconst LIST_GROUP_HEADER_CLASS = \"dx-list-group-header\";\nconst LIST_GROUP_BODY_CLASS = \"dx-list-group-body\";\nconst LIST_COLLAPSIBLE_GROUPS_CLASS = \"dx-list-collapsible-groups\";\nconst LIST_GROUP_COLLAPSED_CLASS = \"dx-list-group-collapsed\";\nconst LIST_GROUP_HEADER_INDICATOR_CLASS = \"dx-list-group-header-indicator\";\nconst LIST_HAS_NEXT_CLASS = \"dx-has-next\";\nconst LIST_NEXT_BUTTON_CLASS = \"dx-list-next-button\";\nconst LIST_SELECT_CHECKBOX = \"dx-list-select-checkbox\";\nconst LIST_SELECT_RADIOBUTTON = \"dx-list-select-radiobutton\";\nconst WRAP_ITEM_TEXT_CLASS = \"dx-wrap-item-text\";\nconst SELECT_ALL_ITEM_SELECTOR = \".dx-list-select-all\";\nconst LIST_ITEM_DATA_KEY = \"dxListItemData\";\nconst LIST_FEEDBACK_SHOW_TIMEOUT = 70;\nconst groupItemsGetter = compileGetter(\"items\");\nlet _scrollView;\nexport class ListBase extends CollectionWidget {\n  _supportedKeys() {\n    const that = this;\n    const moveFocusPerPage = function (direction) {\n      let $item = getEdgeVisibleItem(direction);\n      const {\n        focusedElement: focusedElement\n      } = that.option();\n      const isFocusedItem = $item.is(focusedElement);\n      if (isFocusedItem) {\n        !function ($item, direction) {\n          let resultPosition = $item.position().top;\n          if (\"prev\" === direction) {\n            resultPosition = $item.position().top - getHeight(that.$element()) + getOuterHeight($item);\n          }\n          that.scrollTo(resultPosition);\n        }($item, direction);\n        $item = getEdgeVisibleItem(direction);\n      }\n      that.option(\"focusedElement\", getPublicElement($item));\n      that.scrollToItem($item);\n    };\n    function getEdgeVisibleItem(direction) {\n      const scrollTop = that.scrollTop();\n      const containerHeight = getHeight(that.$element());\n      const {\n        focusedElement: focusedElement\n      } = that.option();\n      let $item = $(focusedElement);\n      let isItemVisible = true;\n      if (!$item.length) {\n        return $();\n      }\n      while (isItemVisible) {\n        const $nextItem = $item[direction]();\n        if (!$nextItem.length) {\n          break;\n        }\n        const nextItemLocation = $nextItem.position().top + getOuterHeight($nextItem) / 2;\n        isItemVisible = nextItemLocation < containerHeight + scrollTop && nextItemLocation > scrollTop;\n        if (isItemVisible) {\n          $item = $nextItem;\n        }\n      }\n      return $item;\n    }\n    return _extends({}, super._supportedKeys(), {\n      leftArrow: noop,\n      rightArrow: noop,\n      pageUp() {\n        moveFocusPerPage(\"prev\");\n        return false;\n      },\n      pageDown() {\n        moveFocusPerPage(\"next\");\n        return false;\n      }\n    });\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      hoverStateEnabled: true,\n      pullRefreshEnabled: false,\n      scrollingEnabled: true,\n      selectByClick: true,\n      showScrollbar: \"onScroll\",\n      useNativeScrolling: true,\n      bounceEnabled: true,\n      scrollByContent: true,\n      scrollByThumb: false,\n      pullingDownText: messageLocalization.format(\"dxList-pullingDownText\"),\n      pulledDownText: messageLocalization.format(\"dxList-pulledDownText\"),\n      refreshingText: messageLocalization.format(\"dxList-refreshingText\"),\n      pageLoadingText: messageLocalization.format(\"dxList-pageLoadingText\"),\n      onScroll: null,\n      onPullRefresh: null,\n      onPageLoading: null,\n      pageLoadMode: \"scrollBottom\",\n      nextButtonText: messageLocalization.format(\"dxList-nextButtonText\"),\n      onItemSwipe: null,\n      grouped: false,\n      onGroupRendered: null,\n      collapsibleGroups: false,\n      groupTemplate: \"group\",\n      indicateLoading: true,\n      activeStateEnabled: true,\n      _itemAttributes: {\n        role: \"option\"\n      },\n      useInkRipple: false,\n      wrapItemText: false,\n      _swipeEnabled: true,\n      showChevronExpr: data => null === data || void 0 === data ? void 0 : data.showChevron,\n      badgeExpr: data => null === data || void 0 === data ? void 0 : data.badge,\n      _onItemsRendered: () => {}\n    });\n  }\n  _defaultOptionsRules() {\n    const themeName = current();\n    return super._defaultOptionsRules().concat(deviceDependentOptions(), [{\n      device: () => !supportUtils.nativeScrolling,\n      options: {\n        useNativeScrolling: false\n      }\n    }, {\n      device: device => !supportUtils.nativeScrolling && !devices.isSimulator() && \"desktop\" === devices.real().deviceType && \"generic\" === device.platform,\n      options: {\n        showScrollbar: \"onHover\",\n        pageLoadMode: \"nextButton\"\n      }\n    }, {\n      device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: () => isMaterial(themeName),\n      options: {\n        useInkRipple: true\n      }\n    }, {\n      device: () => isMaterialBased(themeName),\n      options: {\n        pullingDownText: \"\",\n        pulledDownText: \"\",\n        refreshingText: \"\",\n        pageLoadingText: \"\"\n      }\n    }]);\n  }\n  _visibilityChanged(visible) {\n    if (visible) {\n      this._updateLoadingState(true);\n    }\n  }\n  _itemClass() {\n    return \"dx-list-item\";\n  }\n  _itemDataKey() {\n    return \"dxListItemData\";\n  }\n  _itemContainer() {\n    return this._$container;\n  }\n  _getItemsContainer() {\n    return this._$listContainer;\n  }\n  _cleanItemContainer() {\n    super._cleanItemContainer();\n    const listContainer = this._getItemsContainer();\n    $(listContainer).empty();\n    listContainer.appendTo(this._$container);\n  }\n  _saveSelectionChangeEvent(e) {\n    this._selectionChangeEventInstance = e;\n  }\n  _getSelectionChangeEvent() {\n    return this._selectionChangeEventInstance;\n  }\n  _refreshItemElements() {\n    const {\n      grouped: grouped\n    } = this.option();\n    const $itemsContainer = this._getItemsContainer();\n    if (grouped) {\n      this._itemElementsCache = $itemsContainer.children(\".dx-list-group\").children(\".dx-list-group-body\").children(this._itemSelector());\n    } else {\n      this._itemElementsCache = $itemsContainer.children(this._itemSelector());\n    }\n  }\n  _getItemAndHeaderElements() {\n    const itemSelector = `> .dx-list-group-body > ${this._itemSelector()}`;\n    const itemAndHeaderSelector = `${itemSelector}, > .dx-list-group-header`;\n    const $listGroup = this._getItemsContainer().children(\".dx-list-group\");\n    const $items = $listGroup.find(itemAndHeaderSelector);\n    return $items;\n  }\n  _getAvailableItems($itemElements) {\n    const {\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    if (collapsibleGroups) {\n      const $elements = this._getItemAndHeaderElements();\n      const $visibleItems = $elements.filter((_, element) => {\n        if ($(element).hasClass(\"dx-list-group-header\")) {\n          return true;\n        }\n        return !$(element).closest(\".dx-list-group\").hasClass(\"dx-list-group-collapsed\");\n      });\n      return $visibleItems;\n    }\n    return super._getAvailableItems($itemElements);\n  }\n  _modifyByChanges() {\n    super._modifyByChanges.apply(this, arguments);\n    this._refreshItemElements();\n    this._updateLoadingState(true);\n  }\n  reorderItem(itemElement, toItemElement) {\n    const promise = super.reorderItem(itemElement, toItemElement);\n    return promise.done(function () {\n      this._refreshItemElements();\n    });\n  }\n  deleteItem(itemElement) {\n    const promise = super.deleteItem(itemElement);\n    return promise.done(function () {\n      this._refreshItemElements();\n    });\n  }\n  _itemElements() {\n    return this._itemElementsCache;\n  }\n  _itemSelectHandler(e) {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    const isSingleSelectedItemClicked = \"single\" === selectionMode && this.isItemSelected(e.currentTarget);\n    if (isSingleSelectedItemClicked) {\n      return;\n    }\n    const isSelectionControlClicked = $(e.target).closest(`.${LIST_SELECT_CHECKBOX}`).length || $(e.target).closest(`.${LIST_SELECT_RADIOBUTTON}`).length;\n    if (isSelectionControlClicked) {\n      this.option(\"focusedElement\", e.currentTarget);\n    }\n    return super._itemSelectHandler(e, isSelectionControlClicked);\n  }\n  _allowDynamicItemsAppend() {\n    return true;\n  }\n  _updateActiveStateUnit() {\n    const {\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    const selectors = [\".dx-list-item\", \".dx-list-select-all\"];\n    if (collapsibleGroups) {\n      selectors.push(\".dx-list-group-header\");\n    }\n    this._activeStateUnit = selectors.join(\",\");\n  }\n  _init() {\n    super._init();\n    this._updateActiveStateUnit();\n    this._dataController.resetDataSourcePageIndex();\n    this._$container = this.$element();\n    this._$listContainer = $(\"<div>\").addClass(\"dx-list-items\");\n    this._initScrollView();\n    this._feedbackShowTimeout = 70;\n    this._createGroupRenderAction();\n  }\n  _scrollBottomMode() {\n    const {\n      pageLoadMode: pageLoadMode\n    } = this.option();\n    return \"scrollBottom\" === pageLoadMode;\n  }\n  _nextButtonMode() {\n    const {\n      pageLoadMode: pageLoadMode\n    } = this.option();\n    return \"nextButton\" === pageLoadMode;\n  }\n  _dataSourceOptions() {\n    const scrollBottom = this._scrollBottomMode();\n    const nextButton = this._nextButtonMode();\n    return extend(super._dataSourceOptions(), {\n      paginate: ensureDefined(scrollBottom || nextButton, true)\n    });\n  }\n  _getGroupedOption() {\n    return this.option(\"grouped\");\n  }\n  _getGroupContainerByIndex(groupIndex) {\n    return this._getItemsContainer().find(\".dx-list-group\").eq(groupIndex).find(\".dx-list-group-body\");\n  }\n  _dataSourceFromUrlLoadMode() {\n    return \"raw\";\n  }\n  _initScrollView() {\n    const scrollingEnabled = this.option(\"scrollingEnabled\");\n    const pullRefreshEnabled = scrollingEnabled && this.option(\"pullRefreshEnabled\");\n    const autoPagingEnabled = scrollingEnabled && this._scrollBottomMode() && !!this._dataController.getDataSource();\n    this._scrollView = this._createComponent(this.$element(), getScrollView(), {\n      height: this.option(\"height\"),\n      width: this.option(\"width\"),\n      disabled: this.option(\"disabled\") || !scrollingEnabled,\n      onScroll: this._scrollHandler.bind(this),\n      onPullDown: pullRefreshEnabled ? this._pullDownHandler.bind(this) : null,\n      onReachBottom: autoPagingEnabled ? this._scrollBottomHandler.bind(this) : null,\n      showScrollbar: this.option(\"showScrollbar\"),\n      useNative: this.option(\"useNativeScrolling\"),\n      bounceEnabled: this.option(\"bounceEnabled\"),\n      scrollByContent: this.option(\"scrollByContent\"),\n      scrollByThumb: this.option(\"scrollByThumb\"),\n      pullingDownText: this.option(\"pullingDownText\"),\n      pulledDownText: this.option(\"pulledDownText\"),\n      refreshingText: this.option(\"refreshingText\"),\n      reachBottomText: this.option(\"pageLoadingText\"),\n      useKeyboard: false\n    });\n    this._$container = $(this._scrollView.content());\n    this._$listContainer.appendTo(this._$container);\n    this._toggleWrapItemText(this.option(\"wrapItemText\"));\n    this._createScrollViewActions();\n  }\n  _toggleWrapItemText(value) {\n    this._$listContainer.toggleClass(\"dx-wrap-item-text\", value);\n  }\n  _createScrollViewActions() {\n    this._scrollAction = this._createActionByOption(\"onScroll\");\n    this._pullRefreshAction = this._createActionByOption(\"onPullRefresh\");\n    this._pageLoadingAction = this._createActionByOption(\"onPageLoading\");\n  }\n  _scrollHandler(e) {\n    var _this$_scrollAction;\n    null === (_this$_scrollAction = this._scrollAction) || void 0 === _this$_scrollAction || _this$_scrollAction.call(this, e);\n  }\n  _initTemplates() {\n    this._templateManager.addDefaultTemplates({\n      group: new BindableTemplate(($container, data) => {\n        if (isPlainObject(data)) {\n          if (data.key) {\n            $container.text(data.key);\n          }\n        } else {\n          $container.text(String(data));\n        }\n      }, [\"key\"], this.option(\"integrationOptions.watchMethod\"))\n    });\n    super._initTemplates();\n  }\n  _prepareDefaultItemTemplate(data, $container) {\n    super._prepareDefaultItemTemplate(data, $container);\n    if (data.icon) {\n      const $icon = getImageContainer(data.icon).addClass(\"dx-list-item-icon\");\n      const $iconContainer = $(\"<div>\").addClass(\"dx-list-item-icon-container\");\n      $iconContainer.append($icon);\n      $container.prepend($iconContainer);\n    }\n  }\n  _getBindableFields() {\n    return [\"text\", \"html\", \"icon\"];\n  }\n  _updateLoadingState(tryLoadMore) {\n    const dataController = this._dataController;\n    const shouldLoadNextPage = this._scrollBottomMode() && tryLoadMore && !dataController.isLoading() && !this._isLastPage();\n    if (this._shouldContinueLoading(shouldLoadNextPage)) {\n      this._infiniteDataLoading();\n    } else {\n      this._scrollView.release(!shouldLoadNextPage && !dataController.isLoading());\n      this._toggleNextButton(this._shouldRenderNextButton() && !this._isLastPage());\n      this._loadIndicationSuppressed(false);\n    }\n  }\n  _shouldRenderNextButton() {\n    return this._nextButtonMode() && this._dataController.isLoaded();\n  }\n  _isDataSourceFirstLoadCompleted(newValue) {\n    if (isDefined(newValue)) {\n      this._isFirstLoadCompleted = newValue;\n    }\n    return this._isFirstLoadCompleted;\n  }\n  _dataSourceLoadingChangedHandler(isLoading) {\n    if (this._loadIndicationSuppressed()) {\n      return;\n    }\n    if (isLoading && this.option(\"indicateLoading\")) {\n      this._showLoadingIndicatorTimer = setTimeout(() => {\n        const isEmpty = !this._itemElements().length;\n        const shouldIndicateLoading = !isEmpty || this._isDataSourceFirstLoadCompleted();\n        if (shouldIndicateLoading) {\n          var _this$_scrollView;\n          null === (_this$_scrollView = this._scrollView) || void 0 === _this$_scrollView || _this$_scrollView.startLoading();\n        }\n      });\n    } else {\n      var _this$_scrollView2;\n      clearTimeout(this._showLoadingIndicatorTimer);\n      null === (_this$_scrollView2 = this._scrollView) || void 0 === _this$_scrollView2 || _this$_scrollView2.finishLoading();\n    }\n    if (!isLoading) {\n      this._isDataSourceFirstLoadCompleted(false);\n    }\n  }\n  _dataSourceChangedHandler() {\n    if (!this._shouldAppendItems() && hasWindow()) {\n      var _this$_scrollView3;\n      null === (_this$_scrollView3 = this._scrollView) || void 0 === _this$_scrollView3 || _this$_scrollView3.scrollTo(0);\n    }\n    super._dataSourceChangedHandler.apply(this, arguments);\n    this._isDataSourceFirstLoadCompleted(true);\n  }\n  _refreshContent() {\n    this._prepareContent();\n    this._fireContentReadyAction();\n  }\n  _hideLoadingIfLoadIndicationOff() {\n    if (!this.option(\"indicateLoading\")) {\n      this._dataSourceLoadingChangedHandler(false);\n    }\n  }\n  _loadIndicationSuppressed(value) {\n    if (!arguments.length) {\n      return this._isLoadIndicationSuppressed;\n    }\n    this._isLoadIndicationSuppressed = value;\n  }\n  _scrollViewIsFull() {\n    const scrollView = this._scrollView;\n    return !scrollView || getHeight(scrollView.content()) > getHeight(scrollView.container());\n  }\n  _pullDownHandler(e) {\n    var _this$_pullRefreshAct;\n    null === (_this$_pullRefreshAct = this._pullRefreshAction) || void 0 === _this$_pullRefreshAct || _this$_pullRefreshAct.call(this, e);\n    const dataController = this._dataController;\n    if (dataController.getDataSource() && !dataController.isLoading()) {\n      this._clearSelectedItems();\n      dataController.pageIndex(0);\n      dataController.reload();\n    } else {\n      this._updateLoadingState();\n    }\n  }\n  _shouldContinueLoading(shouldLoadNextPage) {\n    var _this$_scrollView$scr;\n    const isBottomReached = getHeight(this._scrollView.content()) - getHeight(this._scrollView.container()) < ((null === (_this$_scrollView$scr = this._scrollView.scrollOffset()) || void 0 === _this$_scrollView$scr ? void 0 : _this$_scrollView$scr.top) ?? 0);\n    return shouldLoadNextPage && (!this._scrollViewIsFull() || isBottomReached);\n  }\n  _infiniteDataLoading() {\n    const isElementVisible = this.$element().is(\":visible\");\n    if (isElementVisible) {\n      clearTimeout(this._loadNextPageTimer);\n      this._loadNextPageTimer = setTimeout(() => {\n        this._loadNextPage();\n      });\n    }\n  }\n  _scrollBottomHandler(e) {\n    var _this$_pageLoadingAct;\n    null === (_this$_pageLoadingAct = this._pageLoadingAction) || void 0 === _this$_pageLoadingAct || _this$_pageLoadingAct.call(this, e);\n    const dataController = this._dataController;\n    if (!dataController.isLoading() && !this._isLastPage()) {\n      this._loadNextPage();\n    } else {\n      this._updateLoadingState();\n    }\n  }\n  _renderItems(items) {\n    if (this.option(\"grouped\")) {\n      each(items, this._renderGroup.bind(this));\n      this._attachGroupCollapseEvent();\n      this._renderEmptyMessage();\n      if (isMaterial()) {\n        this.attachGroupHeaderInkRippleEvents();\n      }\n    } else {\n      super._renderItems.apply(this, arguments);\n    }\n    this._refreshItemElements();\n    this._updateLoadingState(true);\n  }\n  _postProcessRenderItems() {\n    const {\n      _onItemsRendered: onItemsRendered\n    } = this.option();\n    null === onItemsRendered || void 0 === onItemsRendered || onItemsRendered();\n  }\n  _attachGroupCollapseEvent() {\n    const {\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    const eventNameClick = addNamespace(clickEventName, this.NAME);\n    const $element = this.$element();\n    $element.toggleClass(\"dx-list-collapsible-groups\", collapsibleGroups);\n    eventsEngine.off($element, eventNameClick, \".dx-list-group-header\");\n    if (collapsibleGroups) {\n      eventsEngine.on($element, eventNameClick, \".dx-list-group-header\", e => {\n        this._processGroupCollapse(e);\n      });\n    }\n  }\n  _processGroupCollapse(e) {\n    const action = this._createAction(e => {\n      const {\n        focusStateEnabled: focusStateEnabled\n      } = this.option();\n      const $group = $(e.event.currentTarget).parent();\n      this._collapseGroupHandler($group);\n      if (focusStateEnabled) {\n        const groupHeader = getPublicElement($group.find(\".dx-list-group-header\"));\n        this.option({\n          focusedElement: groupHeader\n        });\n      }\n    }, {\n      validatingTargetName: \"element\"\n    });\n    action({\n      event: e\n    });\n  }\n  _enterKeyHandler(e) {\n    const {\n      collapsibleGroups: collapsibleGroups,\n      focusedElement: focusedElement\n    } = this.option();\n    const isGroupHeader = $(focusedElement).hasClass(\"dx-list-group-header\");\n    if (collapsibleGroups && isGroupHeader) {\n      const params = this._getHandlerExtendedParams(e, $(focusedElement));\n      this._processGroupCollapse(params);\n      return;\n    }\n    super._enterKeyHandler(e);\n  }\n  _collapseGroupHandler($group, toggle) {\n    const deferred = Deferred();\n    const $groupHeader = $group.children(\".dx-list-group-header\");\n    const collapsed = $group.hasClass(\"dx-list-group-collapsed\");\n    this._updateGroupHeaderAriaExpanded($groupHeader, collapsed);\n    if (collapsed === toggle) {\n      return deferred.resolve();\n    }\n    const $groupBody = $group.children(\".dx-list-group-body\");\n    const startHeight = getOuterHeight($groupBody);\n    let endHeight = 0;\n    if (0 === startHeight) {\n      setHeight($groupBody, \"auto\");\n      endHeight = getOuterHeight($groupBody);\n    }\n    $group.toggleClass(\"dx-list-group-collapsed\", toggle);\n    fx.animate($groupBody, {\n      type: \"custom\",\n      from: {\n        height: startHeight\n      },\n      to: {\n        height: endHeight\n      },\n      duration: 200,\n      complete: function () {\n        this.updateDimensions();\n        this._updateLoadingState(true);\n        deferred.resolve();\n      }.bind(this)\n    });\n    return deferred.promise();\n  }\n  _dataSourceLoadErrorHandler() {\n    this._forgetNextPageLoading();\n    if (this._initialized) {\n      this._renderEmptyMessage();\n      this._updateLoadingState();\n    }\n  }\n  _initMarkup() {\n    this._itemElementsCache = $();\n    this.$element().addClass(\"dx-list\");\n    super._initMarkup();\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    const elementAria = {\n      role: \"group\",\n      roledescription: messageLocalization.format(\"dxList-ariaRoleDescription\")\n    };\n    this.setAria(elementAria, this.$element());\n    this.setAria({\n      role: \"application\"\n    }, this._focusTarget());\n    this._setListAria();\n  }\n  _setListAria() {\n    const {\n      items: items,\n      allowItemDeleting: allowItemDeleting,\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    const label = allowItemDeleting ? messageLocalization.format(\"dxList-listAriaLabel-deletable\") : messageLocalization.format(\"dxList-listAriaLabel\");\n    const shouldSetAria = (null === items || void 0 === items ? void 0 : items.length) && !collapsibleGroups;\n    const listArea = {\n      role: shouldSetAria ? \"listbox\" : void 0,\n      label: shouldSetAria ? label : void 0\n    };\n    this.setAria(listArea, this._$listContainer);\n  }\n  _focusTarget() {\n    return this._itemContainer();\n  }\n  _renderInkRipple() {\n    this._inkRipple = render();\n  }\n  _toggleActiveState($element, value, e) {\n    super._toggleActiveState.apply(this, arguments);\n    const that = this;\n    if (!this._inkRipple) {\n      return;\n    }\n    const config = {\n      element: $element,\n      event: e\n    };\n    if (value) {\n      if (isMaterial()) {\n        this._inkRippleTimer = setTimeout(() => {\n          var _that$_inkRipple;\n          null === (_that$_inkRipple = that._inkRipple) || void 0 === _that$_inkRipple || _that$_inkRipple.showWave(config);\n        }, 35);\n      } else {\n        var _that$_inkRipple2;\n        null === (_that$_inkRipple2 = that._inkRipple) || void 0 === _that$_inkRipple2 || _that$_inkRipple2.showWave(config);\n      }\n    } else {\n      clearTimeout(this._inkRippleTimer);\n      this._inkRipple.hideWave(config);\n    }\n  }\n  _postprocessRenderItem(args) {\n    this._refreshItemElements();\n    super._postprocessRenderItem.apply(this, arguments);\n    if (this.option(\"_swipeEnabled\")) {\n      this._attachSwipeEvent($(args.itemElement));\n    }\n  }\n  _getElementClassToSkipRefreshId() {\n    return \"dx-list-group-header\";\n  }\n  _attachSwipeEvent($itemElement) {\n    const endEventName = addNamespace(swipeEventEnd, this.NAME);\n    eventsEngine.on($itemElement, endEventName, this._itemSwipeEndHandler.bind(this));\n  }\n  _itemSwipeEndHandler(e) {\n    this._itemDXEventHandler(e, \"onItemSwipe\", {\n      direction: e.offset < 0 ? \"left\" : \"right\"\n    });\n  }\n  _nextButtonHandler(e) {\n    var _this$_pageLoadingAct2;\n    null === (_this$_pageLoadingAct2 = this._pageLoadingAction) || void 0 === _this$_pageLoadingAct2 || _this$_pageLoadingAct2.call(this, e);\n    const dataController = this._dataController;\n    if (dataController.getDataSource() && !dataController.isLoading()) {\n      var _this$_$nextButton;\n      this._scrollView.toggleLoading(true);\n      null === (_this$_$nextButton = this._$nextButton) || void 0 === _this$_$nextButton || _this$_$nextButton.detach();\n      this._loadIndicationSuppressed(true);\n      this._loadNextPage();\n    }\n  }\n  _setGroupAria($group, groupHeaderId) {\n    const {\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    const groupAria = {\n      role: collapsibleGroups ? void 0 : \"group\",\n      labelledby: collapsibleGroups ? void 0 : groupHeaderId\n    };\n    this.setAria(groupAria, $group);\n  }\n  _updateGroupHeaderAriaExpanded($groupHeader, expanded) {\n    this.setAria({\n      expanded: expanded\n    }, $groupHeader);\n  }\n  _setGroupHeaderAria($groupHeader, listGroupBodyId) {\n    const {\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    const groupHeaderAria = {\n      role: collapsibleGroups ? \"button\" : void 0,\n      expanded: collapsibleGroups ? true : void 0,\n      controls: collapsibleGroups ? listGroupBodyId : void 0\n    };\n    this.setAria(groupHeaderAria, $groupHeader);\n  }\n  _setGroupBodyAria($groupBody, groupHeaderId) {\n    const {\n      collapsibleGroups: collapsibleGroups\n    } = this.option();\n    const groupHeaderAria = {\n      role: collapsibleGroups ? \"listbox\" : void 0,\n      labelledby: collapsibleGroups ? groupHeaderId : void 0\n    };\n    this.setAria(groupHeaderAria, $groupBody);\n  }\n  _renderGroup(index, group) {\n    const $groupElement = $(\"<div>\").addClass(\"dx-list-group\").appendTo(this._getItemsContainer());\n    const groupHeaderId = `dx-${new Guid().toString()}`;\n    const $groupHeaderElement = $(\"<div>\").addClass(\"dx-list-group-header\").attr(\"id\", groupHeaderId).appendTo($groupElement);\n    const {\n      groupTemplate: templateName\n    } = this.option();\n    const groupTemplate = this._getTemplate(group.template || templateName, group, index, $groupHeaderElement);\n    const renderArgs = {\n      index: index,\n      itemData: group,\n      container: getPublicElement($groupHeaderElement)\n    };\n    this._createItemByTemplate(groupTemplate, renderArgs);\n    $(\"<div>\").addClass(\"dx-list-group-header-indicator\").prependTo($groupHeaderElement);\n    this._renderingGroupIndex = index;\n    const groupBodyId = `dx-${new Guid().toString()}`;\n    const $groupBody = $(\"<div>\").addClass(\"dx-list-group-body\").attr(\"id\", groupBodyId).appendTo($groupElement);\n    each(groupItemsGetter(group) || [], (itemIndex, item) => {\n      this._renderItem({\n        group: index,\n        item: itemIndex\n      }, item, $groupBody);\n    });\n    this._groupRenderAction({\n      groupElement: getPublicElement($groupElement),\n      groupIndex: index,\n      groupData: group\n    });\n    this._setGroupAria($groupElement, groupHeaderId);\n    this._setGroupHeaderAria($groupHeaderElement, groupBodyId);\n    this._setGroupBodyAria($groupBody, groupHeaderId);\n  }\n  downInkRippleHandler(e) {\n    this._toggleActiveState($(e.currentTarget), true, e);\n  }\n  upInkRippleHandler(e) {\n    this._toggleActiveState($(e.currentTarget), false);\n  }\n  attachGroupHeaderInkRippleEvents() {\n    const $element = this.$element();\n    this._downInkRippleHandler = this._downInkRippleHandler || this.downInkRippleHandler.bind(this);\n    this._upInkRippleHandler = this._upInkRippleHandler || this.upInkRippleHandler.bind(this);\n    const downArguments = [$element, \"dxpointerdown\", \".dx-list-group-header\", this._downInkRippleHandler];\n    const upArguments = [$element, \"dxpointerup dxpointerout\", \".dx-list-group-header\", this._upInkRippleHandler];\n    eventsEngine.off(...downArguments);\n    eventsEngine.on(...downArguments);\n    eventsEngine.off(...upArguments);\n    eventsEngine.on(...upArguments);\n  }\n  _createGroupRenderAction() {\n    this._groupRenderAction = this._createActionByOption(\"onGroupRendered\");\n  }\n  _clean() {\n    clearTimeout(this._inkRippleTimer);\n    if (this._$nextButton) {\n      this._$nextButton.remove();\n      this._$nextButton = null;\n    }\n    super._clean.apply(this, arguments);\n  }\n  _dispose() {\n    this._isDataSourceFirstLoadCompleted(false);\n    clearTimeout(this._holdTimer);\n    clearTimeout(this._loadNextPageTimer);\n    clearTimeout(this._showLoadingIndicatorTimer);\n    super._dispose();\n  }\n  _toggleDisabledState(value) {\n    super._toggleDisabledState(value);\n    this._scrollView.option(\"disabled\", value || !this.option(\"scrollingEnabled\"));\n  }\n  _toggleNextButton(value) {\n    const dataController = this._dataController;\n    const $nextButton = this._getNextButton();\n    this.$element().toggleClass(\"dx-has-next\", value);\n    if (value && dataController.isLoaded()) {\n      $nextButton.appendTo(this._itemContainer());\n    }\n    if (!value) {\n      $nextButton.detach();\n    }\n  }\n  _getNextButton() {\n    if (!this._$nextButton) {\n      this._$nextButton = this._createNextButton();\n    }\n    return this._$nextButton;\n  }\n  _createNextButton() {\n    const $result = $(\"<div>\").addClass(\"dx-list-next-button\");\n    const $button = $(\"<div>\").appendTo($result);\n    this._createComponent($button, Button, {\n      text: this.option(\"nextButtonText\"),\n      onClick: this._nextButtonHandler.bind(this),\n      type: isMaterialBased() ? \"default\" : void 0,\n      integrationOptions: {}\n    });\n    return $result;\n  }\n  _moveFocus() {\n    super._moveFocus.apply(this, arguments);\n    this.scrollToItem(this.option(\"focusedElement\"));\n  }\n  _refresh() {\n    if (!hasWindow()) {\n      super._refresh();\n    } else {\n      const scrollTop = this._scrollView.scrollTop();\n      super._refresh();\n      scrollTop && this._scrollView.scrollTo(scrollTop);\n    }\n  }\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"pageLoadMode\":\n        this._toggleNextButton(args.value);\n        this._initScrollView();\n        break;\n      case \"dataSource\":\n        super._optionChanged(args);\n        this._initScrollView();\n        this._updateLoadingState(true);\n        this._isDataSourceFirstLoadCompleted(false);\n        break;\n      case \"items\":\n        super._optionChanged(args);\n        this._isDataSourceFirstLoadCompleted(false);\n        break;\n      case \"pullingDownText\":\n      case \"pulledDownText\":\n      case \"refreshingText\":\n      case \"pageLoadingText\":\n      case \"showScrollbar\":\n      case \"bounceEnabled\":\n      case \"scrollByContent\":\n      case \"scrollByThumb\":\n      case \"useNativeScrolling\":\n      case \"scrollingEnabled\":\n      case \"pullRefreshEnabled\":\n        this._initScrollView();\n        this._updateLoadingState(true);\n        break;\n      case \"nextButtonText\":\n      case \"onItemSwipe\":\n      case \"useInkRipple\":\n      case \"grouped\":\n      case \"groupTemplate\":\n      case \"showChevronExpr\":\n      case \"badgeExpr\":\n        this._invalidate();\n        break;\n      case \"onScroll\":\n      case \"onPullRefresh\":\n      case \"onPageLoading\":\n        this._createScrollViewActions();\n        break;\n      case \"collapsibleGroups\":\n        this._updateActiveStateUnit();\n        this._invalidate();\n        break;\n      case \"wrapItemText\":\n        this._toggleWrapItemText(args.value);\n        break;\n      case \"onGroupRendered\":\n        this._createGroupRenderAction();\n        break;\n      case \"width\":\n      case \"height\":\n        super._optionChanged(args);\n        this._scrollView.option(args.name, args.value);\n        this._scrollView.update();\n        break;\n      case \"indicateLoading\":\n        this._hideLoadingIfLoadIndicationOff();\n        break;\n      case \"visible\":\n        super._optionChanged(args);\n        this._scrollView.update();\n        break;\n      case \"rtlEnabled\":\n        this._initScrollView();\n        super._optionChanged(args);\n        break;\n      case \"_swipeEnabled\":\n      case \"_onItemsRendered\":\n      case \"selectByClick\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _extendActionArgs($itemElement) {\n    if (!this.option(\"grouped\")) {\n      return super._extendActionArgs($itemElement);\n    }\n    const $group = $itemElement.closest(\".dx-list-group\");\n    const $item = $group.find(\".dx-list-item\");\n    return extend(super._extendActionArgs($itemElement), {\n      itemIndex: {\n        group: $group.index(),\n        item: $item.index($itemElement)\n      }\n    });\n  }\n  expandGroup(groupIndex) {\n    const deferred = Deferred();\n    const $group = this._getItemsContainer().find(\".dx-list-group\").eq(groupIndex);\n    this._collapseGroupHandler($group, false).done(() => {\n      deferred.resolveWith(this);\n    });\n    return deferred.promise();\n  }\n  collapseGroup(groupIndex) {\n    const deferred = Deferred();\n    const $group = this._getItemsContainer().find(\".dx-list-group\").eq(groupIndex);\n    this._collapseGroupHandler($group, true).done(() => {\n      deferred.resolveWith(this);\n    });\n    return deferred;\n  }\n  updateDimensions() {\n    const that = this;\n    const deferred = Deferred();\n    if (that._scrollView) {\n      that._scrollView.update().done(() => {\n        !that._scrollViewIsFull() && that._updateLoadingState(true);\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n    return deferred.promise();\n  }\n  reload() {\n    super.reload();\n    this.scrollTo(0);\n    this._pullDownHandler();\n  }\n  repaint() {\n    this.scrollTo(0);\n    super.repaint();\n  }\n  scrollTop() {\n    return this._scrollView.scrollOffset().top;\n  }\n  clientHeight() {\n    return this._scrollView.clientHeight();\n  }\n  scrollHeight() {\n    return this._scrollView.scrollHeight();\n  }\n  scrollBy(distance) {\n    this._scrollView.scrollBy(distance);\n  }\n  scrollTo(location) {\n    this._scrollView.scrollTo(location);\n  }\n  scrollToItem(itemElement) {\n    const $item = this._editStrategy.getItemElement(itemElement);\n    const item = null === $item || void 0 === $item ? void 0 : $item.get(0);\n    this._scrollView.scrollToElement(item, {\n      bottom: getElementMargin(item, \"bottom\")\n    });\n  }\n  _dimensionChanged() {\n    this.updateDimensions();\n  }\n}\nListBase.include(DataConverterMixin);\nListBase.ItemClass = ListItem;\nfunction getScrollView() {\n  return _scrollView || ScrollView;\n}\nexport function setScrollView(value) {\n  _scrollView = value;\n}","map":{"version":3,"names":["_extends","fx","name","clickEventName","eventsEngine","end","swipeEventEnd","addNamespace","messageLocalization","devices","getPublicElement","Guid","$","BindableTemplate","ensureDefined","noop","compileGetter","Deferred","extend","getImageContainer","each","getHeight","getOuterHeight","setHeight","isDefined","isPlainObject","hasWindow","Button","ScrollView","current","isMaterial","isMaterialBased","render","supportUtils","CollectionWidget","deviceDependentOptions","getElementMargin","DataConverterMixin","ListItem","LIST_CLASS","LIST_ITEMS_CLASS","LIST_ITEM_CLASS","LIST_ITEM_SELECTOR","LIST_ITEM_ICON_CONTAINER_CLASS","LIST_ITEM_ICON_CLASS","LIST_GROUP_CLASS","LIST_GROUP_HEADER_CLASS","LIST_GROUP_BODY_CLASS","LIST_COLLAPSIBLE_GROUPS_CLASS","LIST_GROUP_COLLAPSED_CLASS","LIST_GROUP_HEADER_INDICATOR_CLASS","LIST_HAS_NEXT_CLASS","LIST_NEXT_BUTTON_CLASS","LIST_SELECT_CHECKBOX","LIST_SELECT_RADIOBUTTON","WRAP_ITEM_TEXT_CLASS","SELECT_ALL_ITEM_SELECTOR","LIST_ITEM_DATA_KEY","LIST_FEEDBACK_SHOW_TIMEOUT","groupItemsGetter","_scrollView","ListBase","_supportedKeys","that","moveFocusPerPage","direction","$item","getEdgeVisibleItem","focusedElement","option","isFocusedItem","is","resultPosition","position","top","$element","scrollTo","scrollToItem","scrollTop","containerHeight","isItemVisible","length","$nextItem","nextItemLocation","leftArrow","rightArrow","pageUp","pageDown","_getDefaultOptions","hoverStateEnabled","pullRefreshEnabled","scrollingEnabled","selectByClick","showScrollbar","useNativeScrolling","bounceEnabled","scrollByContent","scrollByThumb","pullingDownText","format","pulledDownText","refreshingText","pageLoadingText","onScroll","onPullRefresh","onPageLoading","pageLoadMode","nextButtonText","onItemSwipe","grouped","onGroupRendered","collapsibleGroups","groupTemplate","indicateLoading","activeStateEnabled","_itemAttributes","role","useInkRipple","wrapItemText","_swipeEnabled","showChevronExpr","data","showChevron","badgeExpr","badge","_onItemsRendered","_defaultOptionsRules","themeName","concat","device","nativeScrolling","options","isSimulator","real","deviceType","platform","focusStateEnabled","_visibilityChanged","visible","_updateLoadingState","_itemClass","_itemDataKey","_itemContainer","_$container","_getItemsContainer","_$listContainer","_cleanItemContainer","listContainer","empty","appendTo","_saveSelectionChangeEvent","e","_selectionChangeEventInstance","_getSelectionChangeEvent","_refreshItemElements","$itemsContainer","_itemElementsCache","children","_itemSelector","_getItemAndHeaderElements","itemSelector","itemAndHeaderSelector","$listGroup","$items","find","_getAvailableItems","$itemElements","$elements","$visibleItems","filter","_","element","hasClass","closest","_modifyByChanges","apply","arguments","reorderItem","itemElement","toItemElement","promise","done","deleteItem","_itemElements","_itemSelectHandler","selectionMode","isSingleSelectedItemClicked","isItemSelected","currentTarget","isSelectionControlClicked","target","_allowDynamicItemsAppend","_updateActiveStateUnit","selectors","push","_activeStateUnit","join","_init","_dataController","resetDataSourcePageIndex","addClass","_initScrollView","_feedbackShowTimeout","_createGroupRenderAction","_scrollBottomMode","_nextButtonMode","_dataSourceOptions","scrollBottom","nextButton","paginate","_getGroupedOption","_getGroupContainerByIndex","groupIndex","eq","_dataSourceFromUrlLoadMode","autoPagingEnabled","getDataSource","_createComponent","getScrollView","height","width","disabled","_scrollHandler","bind","onPullDown","_pullDownHandler","onReachBottom","_scrollBottomHandler","useNative","reachBottomText","useKeyboard","content","_toggleWrapItemText","_createScrollViewActions","value","toggleClass","_scrollAction","_createActionByOption","_pullRefreshAction","_pageLoadingAction","_this$_scrollAction","call","_initTemplates","_templateManager","addDefaultTemplates","group","$container","key","text","String","_prepareDefaultItemTemplate","icon","$icon","$iconContainer","append","prepend","_getBindableFields","tryLoadMore","dataController","shouldLoadNextPage","isLoading","_isLastPage","_shouldContinueLoading","_infiniteDataLoading","release","_toggleNextButton","_shouldRenderNextButton","_loadIndicationSuppressed","isLoaded","_isDataSourceFirstLoadCompleted","newValue","_isFirstLoadCompleted","_dataSourceLoadingChangedHandler","_showLoadingIndicatorTimer","setTimeout","isEmpty","shouldIndicateLoading","_this$_scrollView","startLoading","_this$_scrollView2","clearTimeout","finishLoading","_dataSourceChangedHandler","_shouldAppendItems","_this$_scrollView3","_refreshContent","_prepareContent","_fireContentReadyAction","_hideLoadingIfLoadIndicationOff","_isLoadIndicationSuppressed","_scrollViewIsFull","scrollView","container","_this$_pullRefreshAct","_clearSelectedItems","pageIndex","reload","_this$_scrollView$scr","isBottomReached","scrollOffset","isElementVisible","_loadNextPageTimer","_loadNextPage","_this$_pageLoadingAct","_renderItems","items","_renderGroup","_attachGroupCollapseEvent","_renderEmptyMessage","attachGroupHeaderInkRippleEvents","_postProcessRenderItems","onItemsRendered","eventNameClick","NAME","off","on","_processGroupCollapse","action","_createAction","$group","event","parent","_collapseGroupHandler","groupHeader","validatingTargetName","_enterKeyHandler","isGroupHeader","params","_getHandlerExtendedParams","toggle","deferred","$groupHeader","collapsed","_updateGroupHeaderAriaExpanded","resolve","$groupBody","startHeight","endHeight","animate","type","from","to","duration","complete","updateDimensions","_dataSourceLoadErrorHandler","_forgetNextPageLoading","_initialized","_initMarkup","_renderInkRipple","elementAria","roledescription","setAria","_focusTarget","_setListAria","allowItemDeleting","label","shouldSetAria","listArea","_inkRipple","_toggleActiveState","config","_inkRippleTimer","_that$_inkRipple","showWave","_that$_inkRipple2","hideWave","_postprocessRenderItem","args","_attachSwipeEvent","_getElementClassToSkipRefreshId","$itemElement","endEventName","_itemSwipeEndHandler","_itemDXEventHandler","offset","_nextButtonHandler","_this$_pageLoadingAct2","_this$_$nextButton","toggleLoading","_$nextButton","detach","_setGroupAria","groupHeaderId","groupAria","labelledby","expanded","_setGroupHeaderAria","listGroupBodyId","groupHeaderAria","controls","_setGroupBodyAria","index","$groupElement","toString","$groupHeaderElement","attr","templateName","_getTemplate","template","renderArgs","itemData","_createItemByTemplate","prependTo","_renderingGroupIndex","groupBodyId","itemIndex","item","_renderItem","_groupRenderAction","groupElement","groupData","downInkRippleHandler","upInkRippleHandler","_downInkRippleHandler","_upInkRippleHandler","downArguments","upArguments","_clean","remove","_dispose","_holdTimer","_toggleDisabledState","$nextButton","_getNextButton","_createNextButton","$result","$button","onClick","integrationOptions","_moveFocus","_refresh","_optionChanged","_invalidate","update","_extendActionArgs","expandGroup","resolveWith","collapseGroup","repaint","clientHeight","scrollHeight","scrollBy","distance","location","_editStrategy","getItemElement","get","scrollToElement","bottom","_dimensionChanged","include","ItemClass","setScrollView"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/list/m_list.base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/list/m_list.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    fx\r\n} from \"../../../common/core/animation\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    end as swipeEventEnd\r\n} from \"../../../common/core/events/swipe\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport devices from \"../../../core/devices\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport Guid from \"../../../core/guid\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    BindableTemplate\r\n} from \"../../../core/templates/bindable_template\";\r\nimport {\r\n    ensureDefined,\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../core/utils/data\";\r\nimport {\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getImageContainer\r\n} from \"../../../core/utils/icon\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    setHeight\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport Button from \"../../../ui/button\";\r\nimport ScrollView from \"../../../ui/scroll_view\";\r\nimport {\r\n    current,\r\n    isMaterial,\r\n    isMaterialBased\r\n} from \"../../../ui/themes\";\r\nimport {\r\n    render\r\n} from \"../../../ui/widget/utils.ink_ripple\";\r\nimport supportUtils from \"../../core/utils/m_support\";\r\nimport CollectionWidget from \"../../ui/collection/m_collection_widget.live_update\";\r\nimport {\r\n    deviceDependentOptions\r\n} from \"../../ui/scroll_view/m_scrollable.device\";\r\nimport {\r\n    getElementMargin\r\n} from \"../../ui/scroll_view/utils/get_element_style\";\r\nimport DataConverterMixin from \"../../ui/shared/m_grouped_data_converter_mixin\";\r\nimport ListItem from \"./m_item\";\r\nconst LIST_CLASS = \"dx-list\";\r\nconst LIST_ITEMS_CLASS = \"dx-list-items\";\r\nconst LIST_ITEM_CLASS = \"dx-list-item\";\r\nconst LIST_ITEM_SELECTOR = \".dx-list-item\";\r\nconst LIST_ITEM_ICON_CONTAINER_CLASS = \"dx-list-item-icon-container\";\r\nconst LIST_ITEM_ICON_CLASS = \"dx-list-item-icon\";\r\nconst LIST_GROUP_CLASS = \"dx-list-group\";\r\nconst LIST_GROUP_HEADER_CLASS = \"dx-list-group-header\";\r\nconst LIST_GROUP_BODY_CLASS = \"dx-list-group-body\";\r\nconst LIST_COLLAPSIBLE_GROUPS_CLASS = \"dx-list-collapsible-groups\";\r\nconst LIST_GROUP_COLLAPSED_CLASS = \"dx-list-group-collapsed\";\r\nconst LIST_GROUP_HEADER_INDICATOR_CLASS = \"dx-list-group-header-indicator\";\r\nconst LIST_HAS_NEXT_CLASS = \"dx-has-next\";\r\nconst LIST_NEXT_BUTTON_CLASS = \"dx-list-next-button\";\r\nconst LIST_SELECT_CHECKBOX = \"dx-list-select-checkbox\";\r\nconst LIST_SELECT_RADIOBUTTON = \"dx-list-select-radiobutton\";\r\nconst WRAP_ITEM_TEXT_CLASS = \"dx-wrap-item-text\";\r\nconst SELECT_ALL_ITEM_SELECTOR = \".dx-list-select-all\";\r\nconst LIST_ITEM_DATA_KEY = \"dxListItemData\";\r\nconst LIST_FEEDBACK_SHOW_TIMEOUT = 70;\r\nconst groupItemsGetter = compileGetter(\"items\");\r\nlet _scrollView;\r\nexport class ListBase extends CollectionWidget {\r\n    _supportedKeys() {\r\n        const that = this;\r\n        const moveFocusPerPage = function(direction) {\r\n            let $item = getEdgeVisibleItem(direction);\r\n            const {\r\n                focusedElement: focusedElement\r\n            } = that.option();\r\n            const isFocusedItem = $item.is(focusedElement);\r\n            if (isFocusedItem) {\r\n                ! function($item, direction) {\r\n                    let resultPosition = $item.position().top;\r\n                    if (\"prev\" === direction) {\r\n                        resultPosition = $item.position().top - getHeight(that.$element()) + getOuterHeight($item)\r\n                    }\r\n                    that.scrollTo(resultPosition)\r\n                }($item, direction);\r\n                $item = getEdgeVisibleItem(direction)\r\n            }\r\n            that.option(\"focusedElement\", getPublicElement($item));\r\n            that.scrollToItem($item)\r\n        };\r\n\r\n        function getEdgeVisibleItem(direction) {\r\n            const scrollTop = that.scrollTop();\r\n            const containerHeight = getHeight(that.$element());\r\n            const {\r\n                focusedElement: focusedElement\r\n            } = that.option();\r\n            let $item = $(focusedElement);\r\n            let isItemVisible = true;\r\n            if (!$item.length) {\r\n                return $()\r\n            }\r\n            while (isItemVisible) {\r\n                const $nextItem = $item[direction]();\r\n                if (!$nextItem.length) {\r\n                    break\r\n                }\r\n                const nextItemLocation = $nextItem.position().top + getOuterHeight($nextItem) / 2;\r\n                isItemVisible = nextItemLocation < containerHeight + scrollTop && nextItemLocation > scrollTop;\r\n                if (isItemVisible) {\r\n                    $item = $nextItem\r\n                }\r\n            }\r\n            return $item\r\n        }\r\n        return _extends({}, super._supportedKeys(), {\r\n            leftArrow: noop,\r\n            rightArrow: noop,\r\n            pageUp() {\r\n                moveFocusPerPage(\"prev\");\r\n                return false\r\n            },\r\n            pageDown() {\r\n                moveFocusPerPage(\"next\");\r\n                return false\r\n            }\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            hoverStateEnabled: true,\r\n            pullRefreshEnabled: false,\r\n            scrollingEnabled: true,\r\n            selectByClick: true,\r\n            showScrollbar: \"onScroll\",\r\n            useNativeScrolling: true,\r\n            bounceEnabled: true,\r\n            scrollByContent: true,\r\n            scrollByThumb: false,\r\n            pullingDownText: messageLocalization.format(\"dxList-pullingDownText\"),\r\n            pulledDownText: messageLocalization.format(\"dxList-pulledDownText\"),\r\n            refreshingText: messageLocalization.format(\"dxList-refreshingText\"),\r\n            pageLoadingText: messageLocalization.format(\"dxList-pageLoadingText\"),\r\n            onScroll: null,\r\n            onPullRefresh: null,\r\n            onPageLoading: null,\r\n            pageLoadMode: \"scrollBottom\",\r\n            nextButtonText: messageLocalization.format(\"dxList-nextButtonText\"),\r\n            onItemSwipe: null,\r\n            grouped: false,\r\n            onGroupRendered: null,\r\n            collapsibleGroups: false,\r\n            groupTemplate: \"group\",\r\n            indicateLoading: true,\r\n            activeStateEnabled: true,\r\n            _itemAttributes: {\r\n                role: \"option\"\r\n            },\r\n            useInkRipple: false,\r\n            wrapItemText: false,\r\n            _swipeEnabled: true,\r\n            showChevronExpr: data => null === data || void 0 === data ? void 0 : data.showChevron,\r\n            badgeExpr: data => null === data || void 0 === data ? void 0 : data.badge,\r\n            _onItemsRendered: () => {}\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        const themeName = current();\r\n        return super._defaultOptionsRules().concat(deviceDependentOptions(), [{\r\n            device: () => !supportUtils.nativeScrolling,\r\n            options: {\r\n                useNativeScrolling: false\r\n            }\r\n        }, {\r\n            device: device => !supportUtils.nativeScrolling && !devices.isSimulator() && \"desktop\" === devices.real().deviceType && \"generic\" === device.platform,\r\n            options: {\r\n                showScrollbar: \"onHover\",\r\n                pageLoadMode: \"nextButton\"\r\n            }\r\n        }, {\r\n            device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }, {\r\n            device: () => isMaterial(themeName),\r\n            options: {\r\n                useInkRipple: true\r\n            }\r\n        }, {\r\n            device: () => isMaterialBased(themeName),\r\n            options: {\r\n                pullingDownText: \"\",\r\n                pulledDownText: \"\",\r\n                refreshingText: \"\",\r\n                pageLoadingText: \"\"\r\n            }\r\n        }])\r\n    }\r\n    _visibilityChanged(visible) {\r\n        if (visible) {\r\n            this._updateLoadingState(true)\r\n        }\r\n    }\r\n    _itemClass() {\r\n        return \"dx-list-item\"\r\n    }\r\n    _itemDataKey() {\r\n        return \"dxListItemData\"\r\n    }\r\n    _itemContainer() {\r\n        return this._$container\r\n    }\r\n    _getItemsContainer() {\r\n        return this._$listContainer\r\n    }\r\n    _cleanItemContainer() {\r\n        super._cleanItemContainer();\r\n        const listContainer = this._getItemsContainer();\r\n        $(listContainer).empty();\r\n        listContainer.appendTo(this._$container)\r\n    }\r\n    _saveSelectionChangeEvent(e) {\r\n        this._selectionChangeEventInstance = e\r\n    }\r\n    _getSelectionChangeEvent() {\r\n        return this._selectionChangeEventInstance\r\n    }\r\n    _refreshItemElements() {\r\n        const {\r\n            grouped: grouped\r\n        } = this.option();\r\n        const $itemsContainer = this._getItemsContainer();\r\n        if (grouped) {\r\n            this._itemElementsCache = $itemsContainer.children(\".dx-list-group\").children(\".dx-list-group-body\").children(this._itemSelector())\r\n        } else {\r\n            this._itemElementsCache = $itemsContainer.children(this._itemSelector())\r\n        }\r\n    }\r\n    _getItemAndHeaderElements() {\r\n        const itemSelector = `> .dx-list-group-body > ${this._itemSelector()}`;\r\n        const itemAndHeaderSelector = `${itemSelector}, > .dx-list-group-header`;\r\n        const $listGroup = this._getItemsContainer().children(\".dx-list-group\");\r\n        const $items = $listGroup.find(itemAndHeaderSelector);\r\n        return $items\r\n    }\r\n    _getAvailableItems($itemElements) {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        if (collapsibleGroups) {\r\n            const $elements = this._getItemAndHeaderElements();\r\n            const $visibleItems = $elements.filter(((_, element) => {\r\n                if ($(element).hasClass(\"dx-list-group-header\")) {\r\n                    return true\r\n                }\r\n                return !$(element).closest(\".dx-list-group\").hasClass(\"dx-list-group-collapsed\")\r\n            }));\r\n            return $visibleItems\r\n        }\r\n        return super._getAvailableItems($itemElements)\r\n    }\r\n    _modifyByChanges() {\r\n        super._modifyByChanges.apply(this, arguments);\r\n        this._refreshItemElements();\r\n        this._updateLoadingState(true)\r\n    }\r\n    reorderItem(itemElement, toItemElement) {\r\n        const promise = super.reorderItem(itemElement, toItemElement);\r\n        return promise.done((function() {\r\n            this._refreshItemElements()\r\n        }))\r\n    }\r\n    deleteItem(itemElement) {\r\n        const promise = super.deleteItem(itemElement);\r\n        return promise.done((function() {\r\n            this._refreshItemElements()\r\n        }))\r\n    }\r\n    _itemElements() {\r\n        return this._itemElementsCache\r\n    }\r\n    _itemSelectHandler(e) {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        const isSingleSelectedItemClicked = \"single\" === selectionMode && this.isItemSelected(e.currentTarget);\r\n        if (isSingleSelectedItemClicked) {\r\n            return\r\n        }\r\n        const isSelectionControlClicked = $(e.target).closest(`.${LIST_SELECT_CHECKBOX}`).length || $(e.target).closest(`.${LIST_SELECT_RADIOBUTTON}`).length;\r\n        if (isSelectionControlClicked) {\r\n            this.option(\"focusedElement\", e.currentTarget)\r\n        }\r\n        return super._itemSelectHandler(e, isSelectionControlClicked)\r\n    }\r\n    _allowDynamicItemsAppend() {\r\n        return true\r\n    }\r\n    _updateActiveStateUnit() {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        const selectors = [\".dx-list-item\", \".dx-list-select-all\"];\r\n        if (collapsibleGroups) {\r\n            selectors.push(\".dx-list-group-header\")\r\n        }\r\n        this._activeStateUnit = selectors.join(\",\")\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._updateActiveStateUnit();\r\n        this._dataController.resetDataSourcePageIndex();\r\n        this._$container = this.$element();\r\n        this._$listContainer = $(\"<div>\").addClass(\"dx-list-items\");\r\n        this._initScrollView();\r\n        this._feedbackShowTimeout = 70;\r\n        this._createGroupRenderAction()\r\n    }\r\n    _scrollBottomMode() {\r\n        const {\r\n            pageLoadMode: pageLoadMode\r\n        } = this.option();\r\n        return \"scrollBottom\" === pageLoadMode\r\n    }\r\n    _nextButtonMode() {\r\n        const {\r\n            pageLoadMode: pageLoadMode\r\n        } = this.option();\r\n        return \"nextButton\" === pageLoadMode\r\n    }\r\n    _dataSourceOptions() {\r\n        const scrollBottom = this._scrollBottomMode();\r\n        const nextButton = this._nextButtonMode();\r\n        return extend(super._dataSourceOptions(), {\r\n            paginate: ensureDefined(scrollBottom || nextButton, true)\r\n        })\r\n    }\r\n    _getGroupedOption() {\r\n        return this.option(\"grouped\")\r\n    }\r\n    _getGroupContainerByIndex(groupIndex) {\r\n        return this._getItemsContainer().find(\".dx-list-group\").eq(groupIndex).find(\".dx-list-group-body\")\r\n    }\r\n    _dataSourceFromUrlLoadMode() {\r\n        return \"raw\"\r\n    }\r\n    _initScrollView() {\r\n        const scrollingEnabled = this.option(\"scrollingEnabled\");\r\n        const pullRefreshEnabled = scrollingEnabled && this.option(\"pullRefreshEnabled\");\r\n        const autoPagingEnabled = scrollingEnabled && this._scrollBottomMode() && !!this._dataController.getDataSource();\r\n        this._scrollView = this._createComponent(this.$element(), getScrollView(), {\r\n            height: this.option(\"height\"),\r\n            width: this.option(\"width\"),\r\n            disabled: this.option(\"disabled\") || !scrollingEnabled,\r\n            onScroll: this._scrollHandler.bind(this),\r\n            onPullDown: pullRefreshEnabled ? this._pullDownHandler.bind(this) : null,\r\n            onReachBottom: autoPagingEnabled ? this._scrollBottomHandler.bind(this) : null,\r\n            showScrollbar: this.option(\"showScrollbar\"),\r\n            useNative: this.option(\"useNativeScrolling\"),\r\n            bounceEnabled: this.option(\"bounceEnabled\"),\r\n            scrollByContent: this.option(\"scrollByContent\"),\r\n            scrollByThumb: this.option(\"scrollByThumb\"),\r\n            pullingDownText: this.option(\"pullingDownText\"),\r\n            pulledDownText: this.option(\"pulledDownText\"),\r\n            refreshingText: this.option(\"refreshingText\"),\r\n            reachBottomText: this.option(\"pageLoadingText\"),\r\n            useKeyboard: false\r\n        });\r\n        this._$container = $(this._scrollView.content());\r\n        this._$listContainer.appendTo(this._$container);\r\n        this._toggleWrapItemText(this.option(\"wrapItemText\"));\r\n        this._createScrollViewActions()\r\n    }\r\n    _toggleWrapItemText(value) {\r\n        this._$listContainer.toggleClass(\"dx-wrap-item-text\", value)\r\n    }\r\n    _createScrollViewActions() {\r\n        this._scrollAction = this._createActionByOption(\"onScroll\");\r\n        this._pullRefreshAction = this._createActionByOption(\"onPullRefresh\");\r\n        this._pageLoadingAction = this._createActionByOption(\"onPageLoading\")\r\n    }\r\n    _scrollHandler(e) {\r\n        var _this$_scrollAction;\r\n        null === (_this$_scrollAction = this._scrollAction) || void 0 === _this$_scrollAction || _this$_scrollAction.call(this, e)\r\n    }\r\n    _initTemplates() {\r\n        this._templateManager.addDefaultTemplates({\r\n            group: new BindableTemplate((($container, data) => {\r\n                if (isPlainObject(data)) {\r\n                    if (data.key) {\r\n                        $container.text(data.key)\r\n                    }\r\n                } else {\r\n                    $container.text(String(data))\r\n                }\r\n            }), [\"key\"], this.option(\"integrationOptions.watchMethod\"))\r\n        });\r\n        super._initTemplates()\r\n    }\r\n    _prepareDefaultItemTemplate(data, $container) {\r\n        super._prepareDefaultItemTemplate(data, $container);\r\n        if (data.icon) {\r\n            const $icon = getImageContainer(data.icon).addClass(\"dx-list-item-icon\");\r\n            const $iconContainer = $(\"<div>\").addClass(\"dx-list-item-icon-container\");\r\n            $iconContainer.append($icon);\r\n            $container.prepend($iconContainer)\r\n        }\r\n    }\r\n    _getBindableFields() {\r\n        return [\"text\", \"html\", \"icon\"]\r\n    }\r\n    _updateLoadingState(tryLoadMore) {\r\n        const dataController = this._dataController;\r\n        const shouldLoadNextPage = this._scrollBottomMode() && tryLoadMore && !dataController.isLoading() && !this._isLastPage();\r\n        if (this._shouldContinueLoading(shouldLoadNextPage)) {\r\n            this._infiniteDataLoading()\r\n        } else {\r\n            this._scrollView.release(!shouldLoadNextPage && !dataController.isLoading());\r\n            this._toggleNextButton(this._shouldRenderNextButton() && !this._isLastPage());\r\n            this._loadIndicationSuppressed(false)\r\n        }\r\n    }\r\n    _shouldRenderNextButton() {\r\n        return this._nextButtonMode() && this._dataController.isLoaded()\r\n    }\r\n    _isDataSourceFirstLoadCompleted(newValue) {\r\n        if (isDefined(newValue)) {\r\n            this._isFirstLoadCompleted = newValue\r\n        }\r\n        return this._isFirstLoadCompleted\r\n    }\r\n    _dataSourceLoadingChangedHandler(isLoading) {\r\n        if (this._loadIndicationSuppressed()) {\r\n            return\r\n        }\r\n        if (isLoading && this.option(\"indicateLoading\")) {\r\n            this._showLoadingIndicatorTimer = setTimeout((() => {\r\n                const isEmpty = !this._itemElements().length;\r\n                const shouldIndicateLoading = !isEmpty || this._isDataSourceFirstLoadCompleted();\r\n                if (shouldIndicateLoading) {\r\n                    var _this$_scrollView;\r\n                    null === (_this$_scrollView = this._scrollView) || void 0 === _this$_scrollView || _this$_scrollView.startLoading()\r\n                }\r\n            }))\r\n        } else {\r\n            var _this$_scrollView2;\r\n            clearTimeout(this._showLoadingIndicatorTimer);\r\n            null === (_this$_scrollView2 = this._scrollView) || void 0 === _this$_scrollView2 || _this$_scrollView2.finishLoading()\r\n        }\r\n        if (!isLoading) {\r\n            this._isDataSourceFirstLoadCompleted(false)\r\n        }\r\n    }\r\n    _dataSourceChangedHandler() {\r\n        if (!this._shouldAppendItems() && hasWindow()) {\r\n            var _this$_scrollView3;\r\n            null === (_this$_scrollView3 = this._scrollView) || void 0 === _this$_scrollView3 || _this$_scrollView3.scrollTo(0)\r\n        }\r\n        super._dataSourceChangedHandler.apply(this, arguments);\r\n        this._isDataSourceFirstLoadCompleted(true)\r\n    }\r\n    _refreshContent() {\r\n        this._prepareContent();\r\n        this._fireContentReadyAction()\r\n    }\r\n    _hideLoadingIfLoadIndicationOff() {\r\n        if (!this.option(\"indicateLoading\")) {\r\n            this._dataSourceLoadingChangedHandler(false)\r\n        }\r\n    }\r\n    _loadIndicationSuppressed(value) {\r\n        if (!arguments.length) {\r\n            return this._isLoadIndicationSuppressed\r\n        }\r\n        this._isLoadIndicationSuppressed = value\r\n    }\r\n    _scrollViewIsFull() {\r\n        const scrollView = this._scrollView;\r\n        return !scrollView || getHeight(scrollView.content()) > getHeight(scrollView.container())\r\n    }\r\n    _pullDownHandler(e) {\r\n        var _this$_pullRefreshAct;\r\n        null === (_this$_pullRefreshAct = this._pullRefreshAction) || void 0 === _this$_pullRefreshAct || _this$_pullRefreshAct.call(this, e);\r\n        const dataController = this._dataController;\r\n        if (dataController.getDataSource() && !dataController.isLoading()) {\r\n            this._clearSelectedItems();\r\n            dataController.pageIndex(0);\r\n            dataController.reload()\r\n        } else {\r\n            this._updateLoadingState()\r\n        }\r\n    }\r\n    _shouldContinueLoading(shouldLoadNextPage) {\r\n        var _this$_scrollView$scr;\r\n        const isBottomReached = getHeight(this._scrollView.content()) - getHeight(this._scrollView.container()) < ((null === (_this$_scrollView$scr = this._scrollView.scrollOffset()) || void 0 === _this$_scrollView$scr ? void 0 : _this$_scrollView$scr.top) ?? 0);\r\n        return shouldLoadNextPage && (!this._scrollViewIsFull() || isBottomReached)\r\n    }\r\n    _infiniteDataLoading() {\r\n        const isElementVisible = this.$element().is(\":visible\");\r\n        if (isElementVisible) {\r\n            clearTimeout(this._loadNextPageTimer);\r\n            this._loadNextPageTimer = setTimeout((() => {\r\n                this._loadNextPage()\r\n            }))\r\n        }\r\n    }\r\n    _scrollBottomHandler(e) {\r\n        var _this$_pageLoadingAct;\r\n        null === (_this$_pageLoadingAct = this._pageLoadingAction) || void 0 === _this$_pageLoadingAct || _this$_pageLoadingAct.call(this, e);\r\n        const dataController = this._dataController;\r\n        if (!dataController.isLoading() && !this._isLastPage()) {\r\n            this._loadNextPage()\r\n        } else {\r\n            this._updateLoadingState()\r\n        }\r\n    }\r\n    _renderItems(items) {\r\n        if (this.option(\"grouped\")) {\r\n            each(items, this._renderGroup.bind(this));\r\n            this._attachGroupCollapseEvent();\r\n            this._renderEmptyMessage();\r\n            if (isMaterial()) {\r\n                this.attachGroupHeaderInkRippleEvents()\r\n            }\r\n        } else {\r\n            super._renderItems.apply(this, arguments)\r\n        }\r\n        this._refreshItemElements();\r\n        this._updateLoadingState(true)\r\n    }\r\n    _postProcessRenderItems() {\r\n        const {\r\n            _onItemsRendered: onItemsRendered\r\n        } = this.option();\r\n        null === onItemsRendered || void 0 === onItemsRendered || onItemsRendered()\r\n    }\r\n    _attachGroupCollapseEvent() {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        const eventNameClick = addNamespace(clickEventName, this.NAME);\r\n        const $element = this.$element();\r\n        $element.toggleClass(\"dx-list-collapsible-groups\", collapsibleGroups);\r\n        eventsEngine.off($element, eventNameClick, \".dx-list-group-header\");\r\n        if (collapsibleGroups) {\r\n            eventsEngine.on($element, eventNameClick, \".dx-list-group-header\", (e => {\r\n                this._processGroupCollapse(e)\r\n            }))\r\n        }\r\n    }\r\n    _processGroupCollapse(e) {\r\n        const action = this._createAction((e => {\r\n            const {\r\n                focusStateEnabled: focusStateEnabled\r\n            } = this.option();\r\n            const $group = $(e.event.currentTarget).parent();\r\n            this._collapseGroupHandler($group);\r\n            if (focusStateEnabled) {\r\n                const groupHeader = getPublicElement($group.find(\".dx-list-group-header\"));\r\n                this.option({\r\n                    focusedElement: groupHeader\r\n                })\r\n            }\r\n        }), {\r\n            validatingTargetName: \"element\"\r\n        });\r\n        action({\r\n            event: e\r\n        })\r\n    }\r\n    _enterKeyHandler(e) {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups,\r\n            focusedElement: focusedElement\r\n        } = this.option();\r\n        const isGroupHeader = $(focusedElement).hasClass(\"dx-list-group-header\");\r\n        if (collapsibleGroups && isGroupHeader) {\r\n            const params = this._getHandlerExtendedParams(e, $(focusedElement));\r\n            this._processGroupCollapse(params);\r\n            return\r\n        }\r\n        super._enterKeyHandler(e)\r\n    }\r\n    _collapseGroupHandler($group, toggle) {\r\n        const deferred = Deferred();\r\n        const $groupHeader = $group.children(\".dx-list-group-header\");\r\n        const collapsed = $group.hasClass(\"dx-list-group-collapsed\");\r\n        this._updateGroupHeaderAriaExpanded($groupHeader, collapsed);\r\n        if (collapsed === toggle) {\r\n            return deferred.resolve()\r\n        }\r\n        const $groupBody = $group.children(\".dx-list-group-body\");\r\n        const startHeight = getOuterHeight($groupBody);\r\n        let endHeight = 0;\r\n        if (0 === startHeight) {\r\n            setHeight($groupBody, \"auto\");\r\n            endHeight = getOuterHeight($groupBody)\r\n        }\r\n        $group.toggleClass(\"dx-list-group-collapsed\", toggle);\r\n        fx.animate($groupBody, {\r\n            type: \"custom\",\r\n            from: {\r\n                height: startHeight\r\n            },\r\n            to: {\r\n                height: endHeight\r\n            },\r\n            duration: 200,\r\n            complete: function() {\r\n                this.updateDimensions();\r\n                this._updateLoadingState(true);\r\n                deferred.resolve()\r\n            }.bind(this)\r\n        });\r\n        return deferred.promise()\r\n    }\r\n    _dataSourceLoadErrorHandler() {\r\n        this._forgetNextPageLoading();\r\n        if (this._initialized) {\r\n            this._renderEmptyMessage();\r\n            this._updateLoadingState()\r\n        }\r\n    }\r\n    _initMarkup() {\r\n        this._itemElementsCache = $();\r\n        this.$element().addClass(\"dx-list\");\r\n        super._initMarkup();\r\n        this.option(\"useInkRipple\") && this._renderInkRipple();\r\n        const elementAria = {\r\n            role: \"group\",\r\n            roledescription: messageLocalization.format(\"dxList-ariaRoleDescription\")\r\n        };\r\n        this.setAria(elementAria, this.$element());\r\n        this.setAria({\r\n            role: \"application\"\r\n        }, this._focusTarget());\r\n        this._setListAria()\r\n    }\r\n    _setListAria() {\r\n        const {\r\n            items: items,\r\n            allowItemDeleting: allowItemDeleting,\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        const label = allowItemDeleting ? messageLocalization.format(\"dxList-listAriaLabel-deletable\") : messageLocalization.format(\"dxList-listAriaLabel\");\r\n        const shouldSetAria = (null === items || void 0 === items ? void 0 : items.length) && !collapsibleGroups;\r\n        const listArea = {\r\n            role: shouldSetAria ? \"listbox\" : void 0,\r\n            label: shouldSetAria ? label : void 0\r\n        };\r\n        this.setAria(listArea, this._$listContainer)\r\n    }\r\n    _focusTarget() {\r\n        return this._itemContainer()\r\n    }\r\n    _renderInkRipple() {\r\n        this._inkRipple = render()\r\n    }\r\n    _toggleActiveState($element, value, e) {\r\n        super._toggleActiveState.apply(this, arguments);\r\n        const that = this;\r\n        if (!this._inkRipple) {\r\n            return\r\n        }\r\n        const config = {\r\n            element: $element,\r\n            event: e\r\n        };\r\n        if (value) {\r\n            if (isMaterial()) {\r\n                this._inkRippleTimer = setTimeout((() => {\r\n                    var _that$_inkRipple;\r\n                    null === (_that$_inkRipple = that._inkRipple) || void 0 === _that$_inkRipple || _that$_inkRipple.showWave(config)\r\n                }), 35)\r\n            } else {\r\n                var _that$_inkRipple2;\r\n                null === (_that$_inkRipple2 = that._inkRipple) || void 0 === _that$_inkRipple2 || _that$_inkRipple2.showWave(config)\r\n            }\r\n        } else {\r\n            clearTimeout(this._inkRippleTimer);\r\n            this._inkRipple.hideWave(config)\r\n        }\r\n    }\r\n    _postprocessRenderItem(args) {\r\n        this._refreshItemElements();\r\n        super._postprocessRenderItem.apply(this, arguments);\r\n        if (this.option(\"_swipeEnabled\")) {\r\n            this._attachSwipeEvent($(args.itemElement))\r\n        }\r\n    }\r\n    _getElementClassToSkipRefreshId() {\r\n        return \"dx-list-group-header\"\r\n    }\r\n    _attachSwipeEvent($itemElement) {\r\n        const endEventName = addNamespace(swipeEventEnd, this.NAME);\r\n        eventsEngine.on($itemElement, endEventName, this._itemSwipeEndHandler.bind(this))\r\n    }\r\n    _itemSwipeEndHandler(e) {\r\n        this._itemDXEventHandler(e, \"onItemSwipe\", {\r\n            direction: e.offset < 0 ? \"left\" : \"right\"\r\n        })\r\n    }\r\n    _nextButtonHandler(e) {\r\n        var _this$_pageLoadingAct2;\r\n        null === (_this$_pageLoadingAct2 = this._pageLoadingAction) || void 0 === _this$_pageLoadingAct2 || _this$_pageLoadingAct2.call(this, e);\r\n        const dataController = this._dataController;\r\n        if (dataController.getDataSource() && !dataController.isLoading()) {\r\n            var _this$_$nextButton;\r\n            this._scrollView.toggleLoading(true);\r\n            null === (_this$_$nextButton = this._$nextButton) || void 0 === _this$_$nextButton || _this$_$nextButton.detach();\r\n            this._loadIndicationSuppressed(true);\r\n            this._loadNextPage()\r\n        }\r\n    }\r\n    _setGroupAria($group, groupHeaderId) {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        const groupAria = {\r\n            role: collapsibleGroups ? void 0 : \"group\",\r\n            labelledby: collapsibleGroups ? void 0 : groupHeaderId\r\n        };\r\n        this.setAria(groupAria, $group)\r\n    }\r\n    _updateGroupHeaderAriaExpanded($groupHeader, expanded) {\r\n        this.setAria({\r\n            expanded: expanded\r\n        }, $groupHeader)\r\n    }\r\n    _setGroupHeaderAria($groupHeader, listGroupBodyId) {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        const groupHeaderAria = {\r\n            role: collapsibleGroups ? \"button\" : void 0,\r\n            expanded: collapsibleGroups ? true : void 0,\r\n            controls: collapsibleGroups ? listGroupBodyId : void 0\r\n        };\r\n        this.setAria(groupHeaderAria, $groupHeader)\r\n    }\r\n    _setGroupBodyAria($groupBody, groupHeaderId) {\r\n        const {\r\n            collapsibleGroups: collapsibleGroups\r\n        } = this.option();\r\n        const groupHeaderAria = {\r\n            role: collapsibleGroups ? \"listbox\" : void 0,\r\n            labelledby: collapsibleGroups ? groupHeaderId : void 0\r\n        };\r\n        this.setAria(groupHeaderAria, $groupBody)\r\n    }\r\n    _renderGroup(index, group) {\r\n        const $groupElement = $(\"<div>\").addClass(\"dx-list-group\").appendTo(this._getItemsContainer());\r\n        const groupHeaderId = `dx-${(new Guid).toString()}`;\r\n        const $groupHeaderElement = $(\"<div>\").addClass(\"dx-list-group-header\").attr(\"id\", groupHeaderId).appendTo($groupElement);\r\n        const {\r\n            groupTemplate: templateName\r\n        } = this.option();\r\n        const groupTemplate = this._getTemplate(group.template || templateName, group, index, $groupHeaderElement);\r\n        const renderArgs = {\r\n            index: index,\r\n            itemData: group,\r\n            container: getPublicElement($groupHeaderElement)\r\n        };\r\n        this._createItemByTemplate(groupTemplate, renderArgs);\r\n        $(\"<div>\").addClass(\"dx-list-group-header-indicator\").prependTo($groupHeaderElement);\r\n        this._renderingGroupIndex = index;\r\n        const groupBodyId = `dx-${(new Guid).toString()}`;\r\n        const $groupBody = $(\"<div>\").addClass(\"dx-list-group-body\").attr(\"id\", groupBodyId).appendTo($groupElement);\r\n        each(groupItemsGetter(group) || [], ((itemIndex, item) => {\r\n            this._renderItem({\r\n                group: index,\r\n                item: itemIndex\r\n            }, item, $groupBody)\r\n        }));\r\n        this._groupRenderAction({\r\n            groupElement: getPublicElement($groupElement),\r\n            groupIndex: index,\r\n            groupData: group\r\n        });\r\n        this._setGroupAria($groupElement, groupHeaderId);\r\n        this._setGroupHeaderAria($groupHeaderElement, groupBodyId);\r\n        this._setGroupBodyAria($groupBody, groupHeaderId)\r\n    }\r\n    downInkRippleHandler(e) {\r\n        this._toggleActiveState($(e.currentTarget), true, e)\r\n    }\r\n    upInkRippleHandler(e) {\r\n        this._toggleActiveState($(e.currentTarget), false)\r\n    }\r\n    attachGroupHeaderInkRippleEvents() {\r\n        const $element = this.$element();\r\n        this._downInkRippleHandler = this._downInkRippleHandler || this.downInkRippleHandler.bind(this);\r\n        this._upInkRippleHandler = this._upInkRippleHandler || this.upInkRippleHandler.bind(this);\r\n        const downArguments = [$element, \"dxpointerdown\", \".dx-list-group-header\", this._downInkRippleHandler];\r\n        const upArguments = [$element, \"dxpointerup dxpointerout\", \".dx-list-group-header\", this._upInkRippleHandler];\r\n        eventsEngine.off(...downArguments);\r\n        eventsEngine.on(...downArguments);\r\n        eventsEngine.off(...upArguments);\r\n        eventsEngine.on(...upArguments)\r\n    }\r\n    _createGroupRenderAction() {\r\n        this._groupRenderAction = this._createActionByOption(\"onGroupRendered\")\r\n    }\r\n    _clean() {\r\n        clearTimeout(this._inkRippleTimer);\r\n        if (this._$nextButton) {\r\n            this._$nextButton.remove();\r\n            this._$nextButton = null\r\n        }\r\n        super._clean.apply(this, arguments)\r\n    }\r\n    _dispose() {\r\n        this._isDataSourceFirstLoadCompleted(false);\r\n        clearTimeout(this._holdTimer);\r\n        clearTimeout(this._loadNextPageTimer);\r\n        clearTimeout(this._showLoadingIndicatorTimer);\r\n        super._dispose()\r\n    }\r\n    _toggleDisabledState(value) {\r\n        super._toggleDisabledState(value);\r\n        this._scrollView.option(\"disabled\", value || !this.option(\"scrollingEnabled\"))\r\n    }\r\n    _toggleNextButton(value) {\r\n        const dataController = this._dataController;\r\n        const $nextButton = this._getNextButton();\r\n        this.$element().toggleClass(\"dx-has-next\", value);\r\n        if (value && dataController.isLoaded()) {\r\n            $nextButton.appendTo(this._itemContainer())\r\n        }\r\n        if (!value) {\r\n            $nextButton.detach()\r\n        }\r\n    }\r\n    _getNextButton() {\r\n        if (!this._$nextButton) {\r\n            this._$nextButton = this._createNextButton()\r\n        }\r\n        return this._$nextButton\r\n    }\r\n    _createNextButton() {\r\n        const $result = $(\"<div>\").addClass(\"dx-list-next-button\");\r\n        const $button = $(\"<div>\").appendTo($result);\r\n        this._createComponent($button, Button, {\r\n            text: this.option(\"nextButtonText\"),\r\n            onClick: this._nextButtonHandler.bind(this),\r\n            type: isMaterialBased() ? \"default\" : void 0,\r\n            integrationOptions: {}\r\n        });\r\n        return $result\r\n    }\r\n    _moveFocus() {\r\n        super._moveFocus.apply(this, arguments);\r\n        this.scrollToItem(this.option(\"focusedElement\"))\r\n    }\r\n    _refresh() {\r\n        if (!hasWindow()) {\r\n            super._refresh()\r\n        } else {\r\n            const scrollTop = this._scrollView.scrollTop();\r\n            super._refresh();\r\n            scrollTop && this._scrollView.scrollTo(scrollTop)\r\n        }\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"pageLoadMode\":\r\n                this._toggleNextButton(args.value);\r\n                this._initScrollView();\r\n                break;\r\n            case \"dataSource\":\r\n                super._optionChanged(args);\r\n                this._initScrollView();\r\n                this._updateLoadingState(true);\r\n                this._isDataSourceFirstLoadCompleted(false);\r\n                break;\r\n            case \"items\":\r\n                super._optionChanged(args);\r\n                this._isDataSourceFirstLoadCompleted(false);\r\n                break;\r\n            case \"pullingDownText\":\r\n            case \"pulledDownText\":\r\n            case \"refreshingText\":\r\n            case \"pageLoadingText\":\r\n            case \"showScrollbar\":\r\n            case \"bounceEnabled\":\r\n            case \"scrollByContent\":\r\n            case \"scrollByThumb\":\r\n            case \"useNativeScrolling\":\r\n            case \"scrollingEnabled\":\r\n            case \"pullRefreshEnabled\":\r\n                this._initScrollView();\r\n                this._updateLoadingState(true);\r\n                break;\r\n            case \"nextButtonText\":\r\n            case \"onItemSwipe\":\r\n            case \"useInkRipple\":\r\n            case \"grouped\":\r\n            case \"groupTemplate\":\r\n            case \"showChevronExpr\":\r\n            case \"badgeExpr\":\r\n                this._invalidate();\r\n                break;\r\n            case \"onScroll\":\r\n            case \"onPullRefresh\":\r\n            case \"onPageLoading\":\r\n                this._createScrollViewActions();\r\n                break;\r\n            case \"collapsibleGroups\":\r\n                this._updateActiveStateUnit();\r\n                this._invalidate();\r\n                break;\r\n            case \"wrapItemText\":\r\n                this._toggleWrapItemText(args.value);\r\n                break;\r\n            case \"onGroupRendered\":\r\n                this._createGroupRenderAction();\r\n                break;\r\n            case \"width\":\r\n            case \"height\":\r\n                super._optionChanged(args);\r\n                this._scrollView.option(args.name, args.value);\r\n                this._scrollView.update();\r\n                break;\r\n            case \"indicateLoading\":\r\n                this._hideLoadingIfLoadIndicationOff();\r\n                break;\r\n            case \"visible\":\r\n                super._optionChanged(args);\r\n                this._scrollView.update();\r\n                break;\r\n            case \"rtlEnabled\":\r\n                this._initScrollView();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"_swipeEnabled\":\r\n            case \"_onItemsRendered\":\r\n            case \"selectByClick\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _extendActionArgs($itemElement) {\r\n        if (!this.option(\"grouped\")) {\r\n            return super._extendActionArgs($itemElement)\r\n        }\r\n        const $group = $itemElement.closest(\".dx-list-group\");\r\n        const $item = $group.find(\".dx-list-item\");\r\n        return extend(super._extendActionArgs($itemElement), {\r\n            itemIndex: {\r\n                group: $group.index(),\r\n                item: $item.index($itemElement)\r\n            }\r\n        })\r\n    }\r\n    expandGroup(groupIndex) {\r\n        const deferred = Deferred();\r\n        const $group = this._getItemsContainer().find(\".dx-list-group\").eq(groupIndex);\r\n        this._collapseGroupHandler($group, false).done((() => {\r\n            deferred.resolveWith(this)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    collapseGroup(groupIndex) {\r\n        const deferred = Deferred();\r\n        const $group = this._getItemsContainer().find(\".dx-list-group\").eq(groupIndex);\r\n        this._collapseGroupHandler($group, true).done((() => {\r\n            deferred.resolveWith(this)\r\n        }));\r\n        return deferred\r\n    }\r\n    updateDimensions() {\r\n        const that = this;\r\n        const deferred = Deferred();\r\n        if (that._scrollView) {\r\n            that._scrollView.update().done((() => {\r\n                !that._scrollViewIsFull() && that._updateLoadingState(true);\r\n                deferred.resolveWith(that)\r\n            }))\r\n        } else {\r\n            deferred.resolveWith(that)\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    reload() {\r\n        super.reload();\r\n        this.scrollTo(0);\r\n        this._pullDownHandler()\r\n    }\r\n    repaint() {\r\n        this.scrollTo(0);\r\n        super.repaint()\r\n    }\r\n    scrollTop() {\r\n        return this._scrollView.scrollOffset().top\r\n    }\r\n    clientHeight() {\r\n        return this._scrollView.clientHeight()\r\n    }\r\n    scrollHeight() {\r\n        return this._scrollView.scrollHeight()\r\n    }\r\n    scrollBy(distance) {\r\n        this._scrollView.scrollBy(distance)\r\n    }\r\n    scrollTo(location) {\r\n        this._scrollView.scrollTo(location)\r\n    }\r\n    scrollToItem(itemElement) {\r\n        const $item = this._editStrategy.getItemElement(itemElement);\r\n        const item = null === $item || void 0 === $item ? void 0 : $item.get(0);\r\n        this._scrollView.scrollToElement(item, {\r\n            bottom: getElementMargin(item, \"bottom\")\r\n        })\r\n    }\r\n    _dimensionChanged() {\r\n        this.updateDimensions()\r\n    }\r\n}\r\nListBase.include(DataConverterMixin);\r\nListBase.ItemClass = ListItem;\r\n\r\nfunction getScrollView() {\r\n    return _scrollView || ScrollView\r\n}\r\nexport function setScrollView(value) {\r\n    _scrollView = value\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}