{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/text_box/m_text_editor.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport pointerEvents from \"../../../common/core/events/pointer\";\nimport { addNamespace, normalizeKeyName } from \"../../../common/core/events/utils/index\";\nimport config from \"../../../core/config\";\nimport devices from \"../../../core/devices\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport Guid from \"../../../core/guid\";\nimport $ from \"../../../core/renderer\";\nimport resizeObserverSingleton from \"../../../core/resize_observer\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getWidth } from \"../../../core/utils/size\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport LoadIndicator from \"../../../ui/load_indicator\";\nimport { current, isFluent, isMaterial } from \"../../../ui/themes\";\nimport { focused } from \"../../../ui/widget/selectors\";\nimport errors from \"../../../ui/widget/ui.errors\";\nimport Editor from \"../../ui/editor/editor\";\nimport ClearButton from \"./m_text_editor.clear\";\nimport { TextEditorLabel } from \"./m_text_editor.label\";\nimport TextEditorButtonCollection from \"./texteditor_button_collection/m_index\";\nexport const TEXTEDITOR_CLASS = \"dx-texteditor\";\nconst TEXTEDITOR_INPUT_CONTAINER_CLASS = \"dx-texteditor-input-container\";\nexport const TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\nconst TEXTEDITOR_INPUT_SELECTOR = \".dx-texteditor-input\";\nconst TEXTEDITOR_CONTAINER_CLASS = \"dx-texteditor-container\";\nconst TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\";\nconst TEXTEDITOR_PLACEHOLDER_CLASS = \"dx-placeholder\";\nconst TEXTEDITOR_EMPTY_INPUT_CLASS = \"dx-texteditor-empty\";\nconst STATE_INVISIBLE_CLASS = \"dx-state-invisible\";\nconst TEXTEDITOR_PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nconst TEXTEDITOR_VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nconst TEXTEDITOR_VALID_CLASS = \"dx-valid\";\nconst EVENTS_LIST = [\"KeyDown\", \"KeyPress\", \"KeyUp\", \"Change\", \"Cut\", \"Copy\", \"Paste\", \"Input\"];\nconst CONTROL_KEYS = [\"tab\", \"enter\", \"shift\", \"control\", \"alt\", \"escape\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"upArrow\", \"rightArrow\", \"downArrow\"];\nlet TextEditorLabelCreator = TextEditorLabel;\nfunction checkButtonsOptionType(buttons) {\n  if (isDefined(buttons) && !Array.isArray(buttons)) {\n    throw errors.Error(\"E1053\");\n  }\n}\nclass TextEditorBase extends Editor {\n  ctor(element, options) {\n    if (options) {\n      checkButtonsOptionType(options.buttons);\n    }\n    this._buttonCollection = new TextEditorButtonCollection(this, this._getDefaultButtons());\n    this._$beforeButtonsContainer = null;\n    this._$afterButtonsContainer = null;\n    this._labelContainerElement = null;\n    super.ctor(element, options);\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      buttons: void 0,\n      value: \"\",\n      spellcheck: false,\n      showClearButton: false,\n      valueChangeEvent: \"change\",\n      placeholder: \"\",\n      inputAttr: {},\n      onFocusIn: null,\n      onFocusOut: null,\n      onKeyDown: null,\n      onKeyUp: null,\n      onChange: null,\n      onInput: null,\n      onCut: null,\n      onCopy: null,\n      onPaste: null,\n      onEnterKey: null,\n      mode: \"text\",\n      hoverStateEnabled: true,\n      focusStateEnabled: true,\n      text: void 0,\n      displayValueFormatter: value => isDefined(value) && false !== value ? value : \"\",\n      stylingMode: config().editorStylingMode || \"outlined\",\n      showValidationMark: true,\n      label: \"\",\n      labelMode: \"static\",\n      labelMark: \"\"\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device() {\n        const themeName = current();\n        return isMaterial(themeName);\n      },\n      options: {\n        labelMode: \"floating\",\n        stylingMode: config().editorStylingMode || \"filled\"\n      }\n    }, {\n      device() {\n        const themeName = current();\n        return isFluent(themeName);\n      },\n      options: {\n        labelMode: \"outside\"\n      }\n    }]);\n  }\n  _getDefaultButtons() {\n    return [{\n      name: \"clear\",\n      Ctor: ClearButton\n    }];\n  }\n  _isClearButtonVisible() {\n    return this.option(\"showClearButton\") && !this.option(\"readOnly\");\n  }\n  _input() {\n    return this.$element().find(\".dx-texteditor-input\").first();\n  }\n  _isFocused() {\n    return focused(this._input()) || super._isFocused();\n  }\n  _inputWrapper() {\n    return this.$element();\n  }\n  _buttonsContainer() {\n    return this._inputWrapper().find(\".dx-texteditor-buttons-container\").eq(0);\n  }\n  _isControlKey(key) {\n    return CONTROL_KEYS.includes(key);\n  }\n  _renderStylingMode() {\n    super._renderStylingMode();\n    const {\n      stylingMode: stylingMode\n    } = this.option();\n    this._updateButtonsStyling(stylingMode);\n  }\n  _initMarkup() {\n    this.$element().addClass(\"dx-texteditor\");\n    this._renderInput();\n    this._renderButtonContainers();\n    this._renderStylingMode();\n    this._renderInputType();\n    this._renderPlaceholder();\n    this._renderProps();\n    super._initMarkup();\n    this._renderValue();\n    this._renderLabel();\n  }\n  _render() {\n    super._render();\n    this._refreshValueChangeEvent();\n    this._refreshEvents();\n    this._renderEnterKeyAction();\n    this._renderEmptinessEvent();\n  }\n  _renderInput() {\n    this._$textEditorContainer = $(\"<div>\").addClass(\"dx-texteditor-container\").appendTo(this.$element());\n    this._$textEditorInputContainer = $(\"<div>\").addClass(\"dx-texteditor-input-container\").appendTo(this._$textEditorContainer);\n    this._$textEditorInputContainer.append(this._createInput());\n  }\n  _getInputContainer() {\n    return this._$textEditorInputContainer;\n  }\n  _renderPendingIndicator() {\n    this.$element().addClass(\"dx-validation-pending\");\n    const $inputContainer = this._getInputContainer();\n    const $indicatorElement = $(\"<div>\").addClass(\"dx-pending-indicator\").appendTo($inputContainer);\n    this._pendingIndicator = this._createComponent($indicatorElement, LoadIndicator);\n  }\n  _disposePendingIndicator() {\n    if (!this._pendingIndicator) {\n      return;\n    }\n    this._pendingIndicator.dispose();\n    this._pendingIndicator.$element().remove();\n    this._pendingIndicator = null;\n    this.$element().removeClass(\"dx-validation-pending\");\n  }\n  _renderValidationState() {\n    super._renderValidationState();\n    const isPending = \"pending\" === this.option(\"validationStatus\");\n    if (isPending) {\n      if (!this._pendingIndicator) {\n        this._renderPendingIndicator();\n      }\n      this._showValidMark = false;\n    } else {\n      if (\"invalid\" === this.option(\"validationStatus\")) {\n        this._showValidMark = false;\n      }\n      if (!this._showValidMark && true === this.option(\"showValidationMark\")) {\n        this._showValidMark = \"valid\" === this.option(\"validationStatus\") && !!this._pendingIndicator;\n      }\n      this._disposePendingIndicator();\n    }\n    this._toggleValidMark();\n  }\n  _getButtonsContainer() {\n    return this._$textEditorContainer;\n  }\n  _renderButtonContainers() {\n    const {\n      buttons: buttons\n    } = this.option();\n    const $buttonsContainer = this._getButtonsContainer();\n    this._$beforeButtonsContainer = this._buttonCollection.renderBeforeButtons(buttons, $buttonsContainer);\n    this._$afterButtonsContainer = this._buttonCollection.renderAfterButtons(buttons, $buttonsContainer);\n  }\n  _cleanButtonContainers() {\n    var _this$_$beforeButtons, _this$_$afterButtonsC;\n    null === (_this$_$beforeButtons = this._$beforeButtonsContainer) || void 0 === _this$_$beforeButtons || _this$_$beforeButtons.remove();\n    null === (_this$_$afterButtonsC = this._$afterButtonsContainer) || void 0 === _this$_$afterButtonsC || _this$_$afterButtonsC.remove();\n    this._buttonCollection.clean();\n  }\n  _clean() {\n    this._buttonCollection.clean();\n    this._disposePendingIndicator();\n    this._unobserveLabelContainerResize();\n    this._$beforeButtonsContainer = null;\n    this._$afterButtonsContainer = null;\n    this._$textEditorContainer = null;\n    super._clean();\n  }\n  _createInput() {\n    const $input = $(\"<input>\");\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n    return $input;\n  }\n  _setSubmitElementName(name) {\n    const {\n      inputAttr: inputAttr\n    } = this.option();\n    super._setSubmitElementName(name || (null === inputAttr || void 0 === inputAttr ? void 0 : inputAttr.name) || \"\");\n  }\n  _applyInputAttributes($input) {\n    let customAttributes = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const inputAttributes = extend(this._getDefaultAttributes(), customAttributes);\n    $input.attr(inputAttributes).addClass(\"dx-texteditor-input\");\n    this._setInputMinHeight($input);\n  }\n  _setInputMinHeight($input) {\n    $input.css(\"minHeight\", this.option(\"height\") ? \"0\" : \"\");\n  }\n  _getPlaceholderAttr() {\n    const {\n      ios: ios,\n      mac: mac\n    } = devices.real();\n    const {\n      placeholder: placeholder\n    } = this.option();\n    const value = placeholder || (ios || mac ? \" \" : null);\n    return value;\n  }\n  _getDefaultAttributes() {\n    const defaultAttributes = {\n      autocomplete: \"off\",\n      placeholder: this._getPlaceholderAttr()\n    };\n    return defaultAttributes;\n  }\n  _updateButtons(names) {\n    this._buttonCollection.updateButtons(names);\n  }\n  _updateButtonsStyling(editorStylingMode) {\n    each(this.option(\"buttons\"), (_, _ref) => {\n      let {\n        options: options,\n        name: buttonName\n      } = _ref;\n      if (options && !options.stylingMode && this.option(\"visible\")) {\n        const buttonInstance = this.getButton(buttonName);\n        if (null !== buttonInstance && void 0 !== buttonInstance && buttonInstance.option) {\n          buttonInstance.option(\"stylingMode\", \"underlined\" === editorStylingMode ? \"text\" : \"contained\");\n        }\n      }\n    });\n  }\n  _renderValue() {\n    const renderInputPromise = this._renderInputValue();\n    return renderInputPromise.promise();\n  }\n  _renderInputValue(value) {\n    value = value ?? this.option(\"value\");\n    const {\n      text: text,\n      displayValue: displayValue,\n      displayValueFormatter: displayValueFormatter\n    } = this.option();\n    let textValue = text;\n    if (void 0 !== displayValue && null !== value) {\n      textValue = null === displayValueFormatter || void 0 === displayValueFormatter ? void 0 : displayValueFormatter(displayValue);\n    } else if (!isDefined(textValue)) {\n      textValue = null === displayValueFormatter || void 0 === displayValueFormatter ? void 0 : displayValueFormatter(value);\n    }\n    this.option(\"text\", textValue);\n    if (this._input().val() !== (isDefined(textValue) ? textValue : \"\")) {\n      this._renderDisplayText(textValue);\n    } else {\n      this._toggleEmptinessEventHandler();\n    }\n    return Deferred().resolve();\n  }\n  _renderDisplayText(text) {\n    this._input().val(text);\n    this._toggleEmptinessEventHandler();\n  }\n  _isValueValid() {\n    if (this._input().length) {\n      const {\n        validity: validity\n      } = this._input().get(0);\n      if (validity) {\n        return validity.valid;\n      }\n    }\n    return true;\n  }\n  _toggleEmptiness(isEmpty) {\n    this.$element().toggleClass(\"dx-texteditor-empty\", isEmpty);\n    this._togglePlaceholder(isEmpty);\n  }\n  _togglePlaceholder(isEmpty) {\n    this.$element().find(\".dx-placeholder\").eq(0).toggleClass(\"dx-state-invisible\", !isEmpty);\n  }\n  _renderProps() {\n    this._toggleReadOnlyState();\n    this._toggleSpellcheckState();\n    this._toggleTabIndex();\n  }\n  _toggleDisabledState(value) {\n    super._toggleDisabledState(value);\n    const $input = this._input();\n    $input.prop(\"disabled\", value);\n  }\n  _toggleTabIndex() {\n    const $input = this._input();\n    const disabled = this.option(\"disabled\");\n    const focusStateEnabled = this.option(\"focusStateEnabled\");\n    if (disabled || !focusStateEnabled) {\n      $input.attr(\"tabIndex\", -1);\n    } else {\n      $input.removeAttr(\"tabIndex\");\n    }\n  }\n  _toggleReadOnlyState() {\n    this._input().prop(\"readOnly\", this._readOnlyPropValue());\n    super._toggleReadOnlyState();\n  }\n  _readOnlyPropValue() {\n    const {\n      readOnly: readOnly\n    } = this.option();\n    return !!readOnly;\n  }\n  _toggleSpellcheckState() {\n    const {\n      spellcheck: spellcheck\n    } = this.option();\n    this._input().prop(\"spellcheck\", spellcheck);\n  }\n  _unobserveLabelContainerResize() {\n    if (this._labelContainerElement) {\n      resizeObserverSingleton.unobserve(this._labelContainerElement);\n      this._labelContainerElement = null;\n    }\n  }\n  _getLabelContainer() {\n    return this._input();\n  }\n  _getLabelContainerWidth() {\n    return getWidth(this._getLabelContainer());\n  }\n  _getLabelBeforeWidth() {\n    const buttonsBeforeWidth = this._$beforeButtonsContainer && getWidth(this._$beforeButtonsContainer);\n    return buttonsBeforeWidth ?? 0;\n  }\n  _updateLabelWidth() {\n    this._label.updateBeforeWidth(this._getLabelBeforeWidth());\n    this._label.updateMaxWidth(this._getLabelContainerWidth());\n  }\n  _getFieldElement() {\n    return this._getLabelContainer();\n  }\n  _setFieldAria(force) {\n    var _this$_label;\n    const inputAttr = this.option(\"inputAttr\");\n    const ariaLabel = null === inputAttr || void 0 === inputAttr ? void 0 : inputAttr[\"aria-label\"];\n    const labelId = null === (_this$_label = this._label) || void 0 === _this$_label ? void 0 : _this$_label.getId();\n    const value = ariaLabel ? void 0 : labelId;\n    if (value || force) {\n      const aria = {\n        labelledby: value,\n        label: ariaLabel\n      };\n      this.setAria(aria, this._getFieldElement());\n    }\n  }\n  _renderLabel() {\n    this._unobserveLabelContainerResize();\n    this._labelContainerElement = $(this._getLabelContainer()).get(0);\n    const {\n      label: label,\n      labelMode: labelMode,\n      labelMark: labelMark,\n      rtlEnabled: rtlEnabled\n    } = this.option();\n    const labelConfig = {\n      onClickHandler: () => {\n        this.focus();\n      },\n      onHoverHandler: e => {\n        e.stopPropagation();\n      },\n      onActiveHandler: e => {\n        e.stopPropagation();\n      },\n      $editor: this.$element(),\n      text: label,\n      mark: labelMark,\n      mode: labelMode,\n      rtlEnabled: rtlEnabled,\n      containsButtonsBefore: !!this._$beforeButtonsContainer,\n      getContainerWidth: () => this._getLabelContainerWidth(),\n      getBeforeWidth: () => this._getLabelBeforeWidth()\n    };\n    this._label = new TextEditorLabelCreator(labelConfig);\n    this._setFieldAria();\n    if (this._labelContainerElement) {\n      resizeObserverSingleton.observe(this._labelContainerElement, this._updateLabelWidth.bind(this));\n    }\n  }\n  _renderPlaceholder() {\n    this._renderPlaceholderMarkup();\n    this._attachPlaceholderEvents();\n  }\n  _renderPlaceholderMarkup() {\n    if (this._$placeholder) {\n      this._$placeholder.remove();\n      this._$placeholder = null;\n    }\n    const $input = this._input();\n    const placeholder = this.option(\"placeholder\");\n    const placeholderAttributes = {\n      id: placeholder ? `dx-${new Guid()}` : void 0,\n      \"data-dx_placeholder\": placeholder\n    };\n    const $placeholder = this._$placeholder = $(\"<div>\").attr(placeholderAttributes);\n    $placeholder.insertAfter($input);\n    $placeholder.addClass(\"dx-placeholder\");\n  }\n  _attachPlaceholderEvents() {\n    const startEvent = addNamespace(pointerEvents.up, this.NAME);\n    eventsEngine.on(this._$placeholder, startEvent, () => {\n      eventsEngine.trigger(this._input(), \"focus\");\n    });\n    this._toggleEmptinessEventHandler();\n  }\n  _placeholder() {\n    return this._$placeholder ?? $();\n  }\n  _clearValueHandler(e) {\n    const $input = this._input();\n    e.stopPropagation();\n    this._saveValueChangeEvent(e);\n    this._clearValue();\n    if (!this._isFocused()) {\n      eventsEngine.trigger($input, \"focus\");\n    }\n    eventsEngine.trigger($input, \"input\");\n  }\n  _clearValue() {\n    this.clear();\n  }\n  _renderEvents() {\n    const $input = this._input();\n    each(EVENTS_LIST, (_, event) => {\n      if (this.hasActionSubscription(`on${event}`)) {\n        const action = this._createActionByOption(`on${event}`, {\n          excludeValidators: [\"readOnly\"]\n        });\n        eventsEngine.on($input, addNamespace(event.toLowerCase(), this.NAME), e => {\n          if (this._disposed) {\n            return;\n          }\n          action({\n            event: e\n          });\n        });\n      }\n    });\n  }\n  _refreshEvents() {\n    const $input = this._input();\n    each(EVENTS_LIST, (_, event) => {\n      eventsEngine.off($input, addNamespace(event.toLowerCase(), this.NAME));\n    });\n    this._renderEvents();\n  }\n  _keyPressHandler(e) {\n    this.option(\"text\", this._input().val());\n  }\n  _keyDownHandler(e) {\n    const $input = this._input();\n    const isCtrlEnter = e.ctrlKey && \"enter\" === normalizeKeyName(e);\n    const {\n      value: value\n    } = this.option();\n    const isNewValue = $input.val() !== value;\n    if (isCtrlEnter && isNewValue) {\n      eventsEngine.trigger($input, \"change\");\n    }\n  }\n  _getValueChangeEventOptionName() {\n    return \"valueChangeEvent\";\n  }\n  _renderValueChangeEvent() {\n    const keyPressEvent = addNamespace(this._renderValueEventName(), `${this.NAME}TextChange`);\n    const valueChangeEvent = addNamespace(this.option(this._getValueChangeEventOptionName()), `${this.NAME}ValueChange`);\n    const keyDownEvent = addNamespace(\"keydown\", `${this.NAME}TextChange`);\n    const $input = this._input();\n    eventsEngine.on($input, keyPressEvent, this._keyPressHandler.bind(this));\n    eventsEngine.on($input, valueChangeEvent, this._valueChangeEventHandler.bind(this));\n    eventsEngine.on($input, keyDownEvent, this._keyDownHandler.bind(this));\n  }\n  _cleanValueChangeEvent() {\n    const valueChangeNamespace = `.${this.NAME}ValueChange`;\n    const textChangeNamespace = `.${this.NAME}TextChange`;\n    eventsEngine.off(this._input(), valueChangeNamespace);\n    eventsEngine.off(this._input(), textChangeNamespace);\n  }\n  _refreshValueChangeEvent() {\n    this._cleanValueChangeEvent();\n    this._renderValueChangeEvent();\n  }\n  _renderValueEventName() {\n    return \"input change keypress\";\n  }\n  _focusTarget() {\n    return this._input();\n  }\n  _focusEventTarget() {\n    return this.element();\n  }\n  _isInput(element) {\n    return element === this._input().get(0);\n  }\n  _preventNestedFocusEvent(event) {\n    if (event.isDefaultPrevented()) {\n      return true;\n    }\n    let shouldPrevent = this._isNestedTarget(event.relatedTarget);\n    if (\"focusin\" === event.type) {\n      shouldPrevent = shouldPrevent && this._isNestedTarget(event.target) && !this._isInput(event.target);\n    } else if (!shouldPrevent) {\n      this._toggleFocusClass(false, this.$element());\n    }\n    if (shouldPrevent) {\n      event.preventDefault();\n    }\n    return shouldPrevent;\n  }\n  _isNestedTarget(target) {\n    return !!this.$element().find(target).length;\n  }\n  _focusClassTarget($element) {\n    return this.$element();\n  }\n  _focusInHandler(event) {\n    this._preventNestedFocusEvent(event);\n    super._focusInHandler(event);\n  }\n  _focusOutHandler(event) {\n    this._preventNestedFocusEvent(event);\n    super._focusOutHandler(event);\n  }\n  _toggleFocusClass(isFocused, $element) {\n    super._toggleFocusClass(isFocused, this._focusClassTarget($element));\n  }\n  _hasFocusClass(element) {\n    return super._hasFocusClass($(element || this.$element()));\n  }\n  _renderEmptinessEvent() {\n    const $input = this._input();\n    eventsEngine.on($input, \"input blur\", this._toggleEmptinessEventHandler.bind(this));\n  }\n  _toggleEmptinessEventHandler() {\n    const text = this._input().val();\n    const isEmpty = (\"\" === text || null === text) && this._isValueValid();\n    this._toggleEmptiness(isEmpty);\n  }\n  _valueChangeEventHandler(e, formattedValue) {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n    this._saveValueChangeEvent(e);\n    this.option(\"value\", arguments.length > 1 ? formattedValue : this._input().val());\n    this._saveValueChangeEvent(void 0);\n  }\n  _renderEnterKeyAction() {\n    this._enterKeyAction = this._createActionByOption(\"onEnterKey\", {\n      excludeValidators: [\"readOnly\"]\n    });\n    eventsEngine.off(this._input(), \"keyup.onEnterKey.dxTextEditor\");\n    eventsEngine.on(this._input(), \"keyup.onEnterKey.dxTextEditor\", this._enterKeyHandlerUp.bind(this));\n  }\n  _enterKeyHandlerUp(e) {\n    if (this._disposed) {\n      return;\n    }\n    if (\"enter\" === normalizeKeyName(e)) {\n      var _this$_enterKeyAction;\n      null === (_this$_enterKeyAction = this._enterKeyAction) || void 0 === _this$_enterKeyAction || _this$_enterKeyAction.call(this, {\n        event: e\n      });\n    }\n  }\n  _updateValue() {\n    this._options.silent(\"text\", null);\n    this._renderValue();\n  }\n  _dispose() {\n    this._enterKeyAction = void 0;\n    super._dispose();\n  }\n  _getSubmitElement() {\n    return this._input();\n  }\n  _hasActiveElement() {\n    return this._input().is(domAdapter.getActiveElement(this._input()[0]));\n  }\n  _optionChanged(args) {\n    const {\n      name: name,\n      fullName: fullName,\n      value: value\n    } = args;\n    const eventName = name.replace(\"on\", \"\");\n    if (EVENTS_LIST.includes(eventName)) {\n      this._refreshEvents();\n      return;\n    }\n    switch (name) {\n      case \"valueChangeEvent\":\n        this._refreshValueChangeEvent();\n        this._refreshFocusEvent();\n        this._refreshEvents();\n        break;\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n        break;\n      case \"focusStateEnabled\":\n        super._optionChanged(args);\n        this._toggleTabIndex();\n        break;\n      case \"spellcheck\":\n        this._toggleSpellcheckState();\n        break;\n      case \"mode\":\n        this._renderInputType();\n        break;\n      case \"onEnterKey\":\n        this._renderEnterKeyAction();\n        break;\n      case \"placeholder\":\n        this._renderPlaceholder();\n        this._setFieldAria(true);\n        this._input().attr({\n          placeholder: this._getPlaceholderAttr()\n        });\n        break;\n      case \"label\":\n        this._label.updateText(value);\n        this._setFieldAria(true);\n        break;\n      case \"labelMark\":\n        this._label.updateMark(value);\n        break;\n      case \"labelMode\":\n        this._label.updateMode(value);\n        this._setFieldAria();\n        break;\n      case \"width\":\n        super._optionChanged(args);\n        this._label.updateMaxWidth(this._getLabelContainerWidth());\n        break;\n      case \"readOnly\":\n      case \"disabled\":\n        this._updateButtons();\n        super._optionChanged(args);\n        break;\n      case \"showClearButton\":\n        this._updateButtons([\"clear\"]);\n        break;\n      case \"text\":\n      case \"showValidationMark\":\n        break;\n      case \"value\":\n        this._updateValue();\n        super._optionChanged(args);\n        break;\n      case \"inputAttr\":\n        this._applyInputAttributes(this._input(), this.option(name));\n        break;\n      case \"stylingMode\":\n        this._renderStylingMode();\n        this._updateLabelWidth();\n        break;\n      case \"buttons\":\n        {\n          if (fullName === name) {\n            checkButtonsOptionType(value);\n          }\n          this._cleanButtonContainers();\n          this._renderButtonContainers();\n          const {\n            stylingMode: stylingMode\n          } = this.option();\n          this._updateButtonsStyling(stylingMode);\n          this._updateLabelWidth();\n          this._label.updateContainsButtonsBefore(!!this._$beforeButtonsContainer);\n          break;\n        }\n      case \"visible\":\n        super._optionChanged(args);\n        if (value && this.option(\"buttons\")) {\n          this._cleanButtonContainers();\n          this._renderButtonContainers();\n          const {\n            stylingMode: stylingMode\n          } = this.option();\n          this._updateButtonsStyling(stylingMode);\n        }\n        break;\n      case \"displayValueFormatter\":\n        this._invalidate();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _renderInputType() {\n    this._setInputType(this.option(\"mode\"));\n  }\n  _setInputType(type) {\n    const input = this._input();\n    if (\"search\" === type) {\n      type = \"text\";\n    }\n    try {\n      input.prop(\"type\", type);\n    } catch (e) {\n      input.prop(\"type\", \"text\");\n    }\n  }\n  getButton(name) {\n    return this._buttonCollection.getButton(name);\n  }\n  focus() {\n    eventsEngine.trigger(this._input(), \"focus\");\n  }\n  clear() {\n    if (this._showValidMark) {\n      this._showValidMark = false;\n      this._renderValidationState();\n    }\n    const defaultOptions = this._getDefaultOptions();\n    if (this.option(\"value\") === defaultOptions.value) {\n      this._options.silent(\"text\", \"\");\n      this._renderValue();\n    } else {\n      this.option(\"value\", defaultOptions.value);\n    }\n  }\n  _resetInputText() {\n    this._options.silent(\"text\", this._initialValue);\n    this._renderValue();\n  }\n  _isValueEqualToInitial() {\n    const {\n      value: value\n    } = this.option();\n    const initialValue = this._initialValue;\n    return value === initialValue;\n  }\n  _resetToInitialValue() {\n    const shouldResetInputText = this._isValueEqualToInitial();\n    if (shouldResetInputText) {\n      this._resetInputText();\n    } else {\n      super._resetToInitialValue();\n    }\n    this._disposePendingIndicator();\n    this._showValidMark = false;\n    this._toggleValidMark();\n  }\n  _toggleValidMark() {\n    this.$element().toggleClass(\"dx-valid\", !!this._showValidMark);\n  }\n  reset() {\n    let value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;\n    if (arguments.length) {\n      super.reset(value);\n    } else {\n      super.reset();\n    }\n  }\n  on(eventName, eventHandler) {\n    const result = super.on(eventName, eventHandler);\n    const event = eventName.charAt(0).toUpperCase() + eventName.substr(1);\n    if (EVENTS_LIST.includes(event)) {\n      this._refreshEvents();\n    }\n    return result;\n  }\n}\nexport default TextEditorBase;","map":{"version":3,"names":["_extends","eventsEngine","pointerEvents","addNamespace","normalizeKeyName","config","devices","domAdapter","Guid","$","resizeObserverSingleton","Deferred","extend","each","getWidth","isDefined","LoadIndicator","current","isFluent","isMaterial","focused","errors","Editor","ClearButton","TextEditorLabel","TextEditorButtonCollection","TEXTEDITOR_CLASS","TEXTEDITOR_INPUT_CONTAINER_CLASS","TEXTEDITOR_INPUT_CLASS","TEXTEDITOR_INPUT_SELECTOR","TEXTEDITOR_CONTAINER_CLASS","TEXTEDITOR_BUTTONS_CONTAINER_CLASS","TEXTEDITOR_PLACEHOLDER_CLASS","TEXTEDITOR_EMPTY_INPUT_CLASS","STATE_INVISIBLE_CLASS","TEXTEDITOR_PENDING_INDICATOR_CLASS","TEXTEDITOR_VALIDATION_PENDING_CLASS","TEXTEDITOR_VALID_CLASS","EVENTS_LIST","CONTROL_KEYS","TextEditorLabelCreator","checkButtonsOptionType","buttons","Array","isArray","Error","TextEditorBase","ctor","element","options","_buttonCollection","_getDefaultButtons","_$beforeButtonsContainer","_$afterButtonsContainer","_labelContainerElement","_getDefaultOptions","value","spellcheck","showClearButton","valueChangeEvent","placeholder","inputAttr","onFocusIn","onFocusOut","onKeyDown","onKeyUp","onChange","onInput","onCut","onCopy","onPaste","onEnterKey","mode","hoverStateEnabled","focusStateEnabled","text","displayValueFormatter","stylingMode","editorStylingMode","showValidationMark","label","labelMode","labelMark","_defaultOptionsRules","concat","device","themeName","name","Ctor","_isClearButtonVisible","option","_input","$element","find","first","_isFocused","_inputWrapper","_buttonsContainer","eq","_isControlKey","key","includes","_renderStylingMode","_updateButtonsStyling","_initMarkup","addClass","_renderInput","_renderButtonContainers","_renderInputType","_renderPlaceholder","_renderProps","_renderValue","_renderLabel","_render","_refreshValueChangeEvent","_refreshEvents","_renderEnterKeyAction","_renderEmptinessEvent","_$textEditorContainer","appendTo","_$textEditorInputContainer","append","_createInput","_getInputContainer","_renderPendingIndicator","$inputContainer","$indicatorElement","_pendingIndicator","_createComponent","_disposePendingIndicator","dispose","remove","removeClass","_renderValidationState","isPending","_showValidMark","_toggleValidMark","_getButtonsContainer","$buttonsContainer","renderBeforeButtons","renderAfterButtons","_cleanButtonContainers","_this$_$beforeButtons","_this$_$afterButtonsC","clean","_clean","_unobserveLabelContainerResize","$input","_applyInputAttributes","_setSubmitElementName","customAttributes","arguments","length","inputAttributes","_getDefaultAttributes","attr","_setInputMinHeight","css","_getPlaceholderAttr","ios","mac","real","defaultAttributes","autocomplete","_updateButtons","names","updateButtons","_","_ref","buttonName","buttonInstance","getButton","renderInputPromise","_renderInputValue","promise","displayValue","textValue","val","_renderDisplayText","_toggleEmptinessEventHandler","resolve","_isValueValid","validity","get","valid","_toggleEmptiness","isEmpty","toggleClass","_togglePlaceholder","_toggleReadOnlyState","_toggleSpellcheckState","_toggleTabIndex","_toggleDisabledState","prop","disabled","removeAttr","_readOnlyPropValue","readOnly","unobserve","_getLabelContainer","_getLabelContainerWidth","_getLabelBeforeWidth","buttonsBeforeWidth","_updateLabelWidth","_label","updateBeforeWidth","updateMaxWidth","_getFieldElement","_setFieldAria","force","_this$_label","ariaLabel","labelId","getId","aria","labelledby","setAria","rtlEnabled","labelConfig","onClickHandler","focus","onHoverHandler","e","stopPropagation","onActiveHandler","$editor","mark","containsButtonsBefore","getContainerWidth","getBeforeWidth","observe","bind","_renderPlaceholderMarkup","_attachPlaceholderEvents","_$placeholder","placeholderAttributes","id","$placeholder","insertAfter","startEvent","up","NAME","on","trigger","_placeholder","_clearValueHandler","_saveValueChangeEvent","_clearValue","clear","_renderEvents","event","hasActionSubscription","action","_createActionByOption","excludeValidators","toLowerCase","_disposed","off","_keyPressHandler","_keyDownHandler","isCtrlEnter","ctrlKey","isNewValue","_getValueChangeEventOptionName","_renderValueChangeEvent","keyPressEvent","_renderValueEventName","keyDownEvent","_valueChangeEventHandler","_cleanValueChangeEvent","valueChangeNamespace","textChangeNamespace","_focusTarget","_focusEventTarget","_isInput","_preventNestedFocusEvent","isDefaultPrevented","shouldPrevent","_isNestedTarget","relatedTarget","type","target","_toggleFocusClass","preventDefault","_focusClassTarget","_focusInHandler","_focusOutHandler","isFocused","_hasFocusClass","formattedValue","_enterKeyAction","_enterKeyHandlerUp","_this$_enterKeyAction","call","_updateValue","_options","silent","_dispose","_getSubmitElement","_hasActiveElement","is","getActiveElement","_optionChanged","args","fullName","eventName","replace","_refreshFocusEvent","_createValueChangeAction","updateText","updateMark","updateMode","updateContainsButtonsBefore","_invalidate","_setInputType","input","defaultOptions","_resetInputText","_initialValue","_isValueEqualToInitial","initialValue","_resetToInitialValue","shouldResetInputText","reset","eventHandler","result","charAt","toUpperCase","substr"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/text_box/m_text_editor.base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/text_box/m_text_editor.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport pointerEvents from \"../../../common/core/events/pointer\";\r\nimport {\r\n    addNamespace,\r\n    normalizeKeyName\r\n} from \"../../../common/core/events/utils/index\";\r\nimport config from \"../../../core/config\";\r\nimport devices from \"../../../core/devices\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport Guid from \"../../../core/guid\";\r\nimport $ from \"../../../core/renderer\";\r\nimport resizeObserverSingleton from \"../../../core/resize_observer\";\r\nimport {\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport LoadIndicator from \"../../../ui/load_indicator\";\r\nimport {\r\n    current,\r\n    isFluent,\r\n    isMaterial\r\n} from \"../../../ui/themes\";\r\nimport {\r\n    focused\r\n} from \"../../../ui/widget/selectors\";\r\nimport errors from \"../../../ui/widget/ui.errors\";\r\nimport Editor from \"../../ui/editor/editor\";\r\nimport ClearButton from \"./m_text_editor.clear\";\r\nimport {\r\n    TextEditorLabel\r\n} from \"./m_text_editor.label\";\r\nimport TextEditorButtonCollection from \"./texteditor_button_collection/m_index\";\r\nexport const TEXTEDITOR_CLASS = \"dx-texteditor\";\r\nconst TEXTEDITOR_INPUT_CONTAINER_CLASS = \"dx-texteditor-input-container\";\r\nexport const TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\r\nconst TEXTEDITOR_INPUT_SELECTOR = \".dx-texteditor-input\";\r\nconst TEXTEDITOR_CONTAINER_CLASS = \"dx-texteditor-container\";\r\nconst TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\";\r\nconst TEXTEDITOR_PLACEHOLDER_CLASS = \"dx-placeholder\";\r\nconst TEXTEDITOR_EMPTY_INPUT_CLASS = \"dx-texteditor-empty\";\r\nconst STATE_INVISIBLE_CLASS = \"dx-state-invisible\";\r\nconst TEXTEDITOR_PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\r\nconst TEXTEDITOR_VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\r\nconst TEXTEDITOR_VALID_CLASS = \"dx-valid\";\r\nconst EVENTS_LIST = [\"KeyDown\", \"KeyPress\", \"KeyUp\", \"Change\", \"Cut\", \"Copy\", \"Paste\", \"Input\"];\r\nconst CONTROL_KEYS = [\"tab\", \"enter\", \"shift\", \"control\", \"alt\", \"escape\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"upArrow\", \"rightArrow\", \"downArrow\"];\r\nlet TextEditorLabelCreator = TextEditorLabel;\r\n\r\nfunction checkButtonsOptionType(buttons) {\r\n    if (isDefined(buttons) && !Array.isArray(buttons)) {\r\n        throw errors.Error(\"E1053\")\r\n    }\r\n}\r\nclass TextEditorBase extends Editor {\r\n    ctor(element, options) {\r\n        if (options) {\r\n            checkButtonsOptionType(options.buttons)\r\n        }\r\n        this._buttonCollection = new TextEditorButtonCollection(this, this._getDefaultButtons());\r\n        this._$beforeButtonsContainer = null;\r\n        this._$afterButtonsContainer = null;\r\n        this._labelContainerElement = null;\r\n        super.ctor(element, options)\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            buttons: void 0,\r\n            value: \"\",\r\n            spellcheck: false,\r\n            showClearButton: false,\r\n            valueChangeEvent: \"change\",\r\n            placeholder: \"\",\r\n            inputAttr: {},\r\n            onFocusIn: null,\r\n            onFocusOut: null,\r\n            onKeyDown: null,\r\n            onKeyUp: null,\r\n            onChange: null,\r\n            onInput: null,\r\n            onCut: null,\r\n            onCopy: null,\r\n            onPaste: null,\r\n            onEnterKey: null,\r\n            mode: \"text\",\r\n            hoverStateEnabled: true,\r\n            focusStateEnabled: true,\r\n            text: void 0,\r\n            displayValueFormatter: value => isDefined(value) && false !== value ? value : \"\",\r\n            stylingMode: config().editorStylingMode || \"outlined\",\r\n            showValidationMark: true,\r\n            label: \"\",\r\n            labelMode: \"static\",\r\n            labelMark: \"\"\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device() {\r\n                const themeName = current();\r\n                return isMaterial(themeName)\r\n            },\r\n            options: {\r\n                labelMode: \"floating\",\r\n                stylingMode: config().editorStylingMode || \"filled\"\r\n            }\r\n        }, {\r\n            device() {\r\n                const themeName = current();\r\n                return isFluent(themeName)\r\n            },\r\n            options: {\r\n                labelMode: \"outside\"\r\n            }\r\n        }])\r\n    }\r\n    _getDefaultButtons() {\r\n        return [{\r\n            name: \"clear\",\r\n            Ctor: ClearButton\r\n        }]\r\n    }\r\n    _isClearButtonVisible() {\r\n        return this.option(\"showClearButton\") && !this.option(\"readOnly\")\r\n    }\r\n    _input() {\r\n        return this.$element().find(\".dx-texteditor-input\").first()\r\n    }\r\n    _isFocused() {\r\n        return focused(this._input()) || super._isFocused()\r\n    }\r\n    _inputWrapper() {\r\n        return this.$element()\r\n    }\r\n    _buttonsContainer() {\r\n        return this._inputWrapper().find(\".dx-texteditor-buttons-container\").eq(0)\r\n    }\r\n    _isControlKey(key) {\r\n        return CONTROL_KEYS.includes(key)\r\n    }\r\n    _renderStylingMode() {\r\n        super._renderStylingMode();\r\n        const {\r\n            stylingMode: stylingMode\r\n        } = this.option();\r\n        this._updateButtonsStyling(stylingMode)\r\n    }\r\n    _initMarkup() {\r\n        this.$element().addClass(\"dx-texteditor\");\r\n        this._renderInput();\r\n        this._renderButtonContainers();\r\n        this._renderStylingMode();\r\n        this._renderInputType();\r\n        this._renderPlaceholder();\r\n        this._renderProps();\r\n        super._initMarkup();\r\n        this._renderValue();\r\n        this._renderLabel()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._refreshValueChangeEvent();\r\n        this._refreshEvents();\r\n        this._renderEnterKeyAction();\r\n        this._renderEmptinessEvent()\r\n    }\r\n    _renderInput() {\r\n        this._$textEditorContainer = $(\"<div>\").addClass(\"dx-texteditor-container\").appendTo(this.$element());\r\n        this._$textEditorInputContainer = $(\"<div>\").addClass(\"dx-texteditor-input-container\").appendTo(this._$textEditorContainer);\r\n        this._$textEditorInputContainer.append(this._createInput())\r\n    }\r\n    _getInputContainer() {\r\n        return this._$textEditorInputContainer\r\n    }\r\n    _renderPendingIndicator() {\r\n        this.$element().addClass(\"dx-validation-pending\");\r\n        const $inputContainer = this._getInputContainer();\r\n        const $indicatorElement = $(\"<div>\").addClass(\"dx-pending-indicator\").appendTo($inputContainer);\r\n        this._pendingIndicator = this._createComponent($indicatorElement, LoadIndicator)\r\n    }\r\n    _disposePendingIndicator() {\r\n        if (!this._pendingIndicator) {\r\n            return\r\n        }\r\n        this._pendingIndicator.dispose();\r\n        this._pendingIndicator.$element().remove();\r\n        this._pendingIndicator = null;\r\n        this.$element().removeClass(\"dx-validation-pending\")\r\n    }\r\n    _renderValidationState() {\r\n        super._renderValidationState();\r\n        const isPending = \"pending\" === this.option(\"validationStatus\");\r\n        if (isPending) {\r\n            if (!this._pendingIndicator) {\r\n                this._renderPendingIndicator()\r\n            }\r\n            this._showValidMark = false\r\n        } else {\r\n            if (\"invalid\" === this.option(\"validationStatus\")) {\r\n                this._showValidMark = false\r\n            }\r\n            if (!this._showValidMark && true === this.option(\"showValidationMark\")) {\r\n                this._showValidMark = \"valid\" === this.option(\"validationStatus\") && !!this._pendingIndicator\r\n            }\r\n            this._disposePendingIndicator()\r\n        }\r\n        this._toggleValidMark()\r\n    }\r\n    _getButtonsContainer() {\r\n        return this._$textEditorContainer\r\n    }\r\n    _renderButtonContainers() {\r\n        const {\r\n            buttons: buttons\r\n        } = this.option();\r\n        const $buttonsContainer = this._getButtonsContainer();\r\n        this._$beforeButtonsContainer = this._buttonCollection.renderBeforeButtons(buttons, $buttonsContainer);\r\n        this._$afterButtonsContainer = this._buttonCollection.renderAfterButtons(buttons, $buttonsContainer)\r\n    }\r\n    _cleanButtonContainers() {\r\n        var _this$_$beforeButtons, _this$_$afterButtonsC;\r\n        null === (_this$_$beforeButtons = this._$beforeButtonsContainer) || void 0 === _this$_$beforeButtons || _this$_$beforeButtons.remove();\r\n        null === (_this$_$afterButtonsC = this._$afterButtonsContainer) || void 0 === _this$_$afterButtonsC || _this$_$afterButtonsC.remove();\r\n        this._buttonCollection.clean()\r\n    }\r\n    _clean() {\r\n        this._buttonCollection.clean();\r\n        this._disposePendingIndicator();\r\n        this._unobserveLabelContainerResize();\r\n        this._$beforeButtonsContainer = null;\r\n        this._$afterButtonsContainer = null;\r\n        this._$textEditorContainer = null;\r\n        super._clean()\r\n    }\r\n    _createInput() {\r\n        const $input = $(\"<input>\");\r\n        this._applyInputAttributes($input, this.option(\"inputAttr\"));\r\n        return $input\r\n    }\r\n    _setSubmitElementName(name) {\r\n        const {\r\n            inputAttr: inputAttr\r\n        } = this.option();\r\n        super._setSubmitElementName(name || (null === inputAttr || void 0 === inputAttr ? void 0 : inputAttr.name) || \"\")\r\n    }\r\n    _applyInputAttributes($input) {\r\n        let customAttributes = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n        const inputAttributes = extend(this._getDefaultAttributes(), customAttributes);\r\n        $input.attr(inputAttributes).addClass(\"dx-texteditor-input\");\r\n        this._setInputMinHeight($input)\r\n    }\r\n    _setInputMinHeight($input) {\r\n        $input.css(\"minHeight\", this.option(\"height\") ? \"0\" : \"\")\r\n    }\r\n    _getPlaceholderAttr() {\r\n        const {\r\n            ios: ios,\r\n            mac: mac\r\n        } = devices.real();\r\n        const {\r\n            placeholder: placeholder\r\n        } = this.option();\r\n        const value = placeholder || (ios || mac ? \" \" : null);\r\n        return value\r\n    }\r\n    _getDefaultAttributes() {\r\n        const defaultAttributes = {\r\n            autocomplete: \"off\",\r\n            placeholder: this._getPlaceholderAttr()\r\n        };\r\n        return defaultAttributes\r\n    }\r\n    _updateButtons(names) {\r\n        this._buttonCollection.updateButtons(names)\r\n    }\r\n    _updateButtonsStyling(editorStylingMode) {\r\n        each(this.option(\"buttons\"), ((_, _ref) => {\r\n            let {\r\n                options: options,\r\n                name: buttonName\r\n            } = _ref;\r\n            if (options && !options.stylingMode && this.option(\"visible\")) {\r\n                const buttonInstance = this.getButton(buttonName);\r\n                if (null !== buttonInstance && void 0 !== buttonInstance && buttonInstance.option) {\r\n                    buttonInstance.option(\"stylingMode\", \"underlined\" === editorStylingMode ? \"text\" : \"contained\")\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    _renderValue() {\r\n        const renderInputPromise = this._renderInputValue();\r\n        return renderInputPromise.promise()\r\n    }\r\n    _renderInputValue(value) {\r\n        value = value ?? this.option(\"value\");\r\n        const {\r\n            text: text,\r\n            displayValue: displayValue,\r\n            displayValueFormatter: displayValueFormatter\r\n        } = this.option();\r\n        let textValue = text;\r\n        if (void 0 !== displayValue && null !== value) {\r\n            textValue = null === displayValueFormatter || void 0 === displayValueFormatter ? void 0 : displayValueFormatter(displayValue)\r\n        } else if (!isDefined(textValue)) {\r\n            textValue = null === displayValueFormatter || void 0 === displayValueFormatter ? void 0 : displayValueFormatter(value)\r\n        }\r\n        this.option(\"text\", textValue);\r\n        if (this._input().val() !== (isDefined(textValue) ? textValue : \"\")) {\r\n            this._renderDisplayText(textValue)\r\n        } else {\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        return Deferred().resolve()\r\n    }\r\n    _renderDisplayText(text) {\r\n        this._input().val(text);\r\n        this._toggleEmptinessEventHandler()\r\n    }\r\n    _isValueValid() {\r\n        if (this._input().length) {\r\n            const {\r\n                validity: validity\r\n            } = this._input().get(0);\r\n            if (validity) {\r\n                return validity.valid\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _toggleEmptiness(isEmpty) {\r\n        this.$element().toggleClass(\"dx-texteditor-empty\", isEmpty);\r\n        this._togglePlaceholder(isEmpty)\r\n    }\r\n    _togglePlaceholder(isEmpty) {\r\n        this.$element().find(\".dx-placeholder\").eq(0).toggleClass(\"dx-state-invisible\", !isEmpty)\r\n    }\r\n    _renderProps() {\r\n        this._toggleReadOnlyState();\r\n        this._toggleSpellcheckState();\r\n        this._toggleTabIndex()\r\n    }\r\n    _toggleDisabledState(value) {\r\n        super._toggleDisabledState(value);\r\n        const $input = this._input();\r\n        $input.prop(\"disabled\", value)\r\n    }\r\n    _toggleTabIndex() {\r\n        const $input = this._input();\r\n        const disabled = this.option(\"disabled\");\r\n        const focusStateEnabled = this.option(\"focusStateEnabled\");\r\n        if (disabled || !focusStateEnabled) {\r\n            $input.attr(\"tabIndex\", -1)\r\n        } else {\r\n            $input.removeAttr(\"tabIndex\")\r\n        }\r\n    }\r\n    _toggleReadOnlyState() {\r\n        this._input().prop(\"readOnly\", this._readOnlyPropValue());\r\n        super._toggleReadOnlyState()\r\n    }\r\n    _readOnlyPropValue() {\r\n        const {\r\n            readOnly: readOnly\r\n        } = this.option();\r\n        return !!readOnly\r\n    }\r\n    _toggleSpellcheckState() {\r\n        const {\r\n            spellcheck: spellcheck\r\n        } = this.option();\r\n        this._input().prop(\"spellcheck\", spellcheck)\r\n    }\r\n    _unobserveLabelContainerResize() {\r\n        if (this._labelContainerElement) {\r\n            resizeObserverSingleton.unobserve(this._labelContainerElement);\r\n            this._labelContainerElement = null\r\n        }\r\n    }\r\n    _getLabelContainer() {\r\n        return this._input()\r\n    }\r\n    _getLabelContainerWidth() {\r\n        return getWidth(this._getLabelContainer())\r\n    }\r\n    _getLabelBeforeWidth() {\r\n        const buttonsBeforeWidth = this._$beforeButtonsContainer && getWidth(this._$beforeButtonsContainer);\r\n        return buttonsBeforeWidth ?? 0\r\n    }\r\n    _updateLabelWidth() {\r\n        this._label.updateBeforeWidth(this._getLabelBeforeWidth());\r\n        this._label.updateMaxWidth(this._getLabelContainerWidth())\r\n    }\r\n    _getFieldElement() {\r\n        return this._getLabelContainer()\r\n    }\r\n    _setFieldAria(force) {\r\n        var _this$_label;\r\n        const inputAttr = this.option(\"inputAttr\");\r\n        const ariaLabel = null === inputAttr || void 0 === inputAttr ? void 0 : inputAttr[\"aria-label\"];\r\n        const labelId = null === (_this$_label = this._label) || void 0 === _this$_label ? void 0 : _this$_label.getId();\r\n        const value = ariaLabel ? void 0 : labelId;\r\n        if (value || force) {\r\n            const aria = {\r\n                labelledby: value,\r\n                label: ariaLabel\r\n            };\r\n            this.setAria(aria, this._getFieldElement())\r\n        }\r\n    }\r\n    _renderLabel() {\r\n        this._unobserveLabelContainerResize();\r\n        this._labelContainerElement = $(this._getLabelContainer()).get(0);\r\n        const {\r\n            label: label,\r\n            labelMode: labelMode,\r\n            labelMark: labelMark,\r\n            rtlEnabled: rtlEnabled\r\n        } = this.option();\r\n        const labelConfig = {\r\n            onClickHandler: () => {\r\n                this.focus()\r\n            },\r\n            onHoverHandler: e => {\r\n                e.stopPropagation()\r\n            },\r\n            onActiveHandler: e => {\r\n                e.stopPropagation()\r\n            },\r\n            $editor: this.$element(),\r\n            text: label,\r\n            mark: labelMark,\r\n            mode: labelMode,\r\n            rtlEnabled: rtlEnabled,\r\n            containsButtonsBefore: !!this._$beforeButtonsContainer,\r\n            getContainerWidth: () => this._getLabelContainerWidth(),\r\n            getBeforeWidth: () => this._getLabelBeforeWidth()\r\n        };\r\n        this._label = new TextEditorLabelCreator(labelConfig);\r\n        this._setFieldAria();\r\n        if (this._labelContainerElement) {\r\n            resizeObserverSingleton.observe(this._labelContainerElement, this._updateLabelWidth.bind(this))\r\n        }\r\n    }\r\n    _renderPlaceholder() {\r\n        this._renderPlaceholderMarkup();\r\n        this._attachPlaceholderEvents()\r\n    }\r\n    _renderPlaceholderMarkup() {\r\n        if (this._$placeholder) {\r\n            this._$placeholder.remove();\r\n            this._$placeholder = null\r\n        }\r\n        const $input = this._input();\r\n        const placeholder = this.option(\"placeholder\");\r\n        const placeholderAttributes = {\r\n            id: placeholder ? `dx-${new Guid}` : void 0,\r\n            \"data-dx_placeholder\": placeholder\r\n        };\r\n        const $placeholder = this._$placeholder = $(\"<div>\").attr(placeholderAttributes);\r\n        $placeholder.insertAfter($input);\r\n        $placeholder.addClass(\"dx-placeholder\")\r\n    }\r\n    _attachPlaceholderEvents() {\r\n        const startEvent = addNamespace(pointerEvents.up, this.NAME);\r\n        eventsEngine.on(this._$placeholder, startEvent, (() => {\r\n            eventsEngine.trigger(this._input(), \"focus\")\r\n        }));\r\n        this._toggleEmptinessEventHandler()\r\n    }\r\n    _placeholder() {\r\n        return this._$placeholder ?? $()\r\n    }\r\n    _clearValueHandler(e) {\r\n        const $input = this._input();\r\n        e.stopPropagation();\r\n        this._saveValueChangeEvent(e);\r\n        this._clearValue();\r\n        if (!this._isFocused()) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n        eventsEngine.trigger($input, \"input\")\r\n    }\r\n    _clearValue() {\r\n        this.clear()\r\n    }\r\n    _renderEvents() {\r\n        const $input = this._input();\r\n        each(EVENTS_LIST, ((_, event) => {\r\n            if (this.hasActionSubscription(`on${event}`)) {\r\n                const action = this._createActionByOption(`on${event}`, {\r\n                    excludeValidators: [\"readOnly\"]\r\n                });\r\n                eventsEngine.on($input, addNamespace(event.toLowerCase(), this.NAME), (e => {\r\n                    if (this._disposed) {\r\n                        return\r\n                    }\r\n                    action({\r\n                        event: e\r\n                    })\r\n                }))\r\n            }\r\n        }))\r\n    }\r\n    _refreshEvents() {\r\n        const $input = this._input();\r\n        each(EVENTS_LIST, ((_, event) => {\r\n            eventsEngine.off($input, addNamespace(event.toLowerCase(), this.NAME))\r\n        }));\r\n        this._renderEvents()\r\n    }\r\n    _keyPressHandler(e) {\r\n        this.option(\"text\", this._input().val())\r\n    }\r\n    _keyDownHandler(e) {\r\n        const $input = this._input();\r\n        const isCtrlEnter = e.ctrlKey && \"enter\" === normalizeKeyName(e);\r\n        const {\r\n            value: value\r\n        } = this.option();\r\n        const isNewValue = $input.val() !== value;\r\n        if (isCtrlEnter && isNewValue) {\r\n            eventsEngine.trigger($input, \"change\")\r\n        }\r\n    }\r\n    _getValueChangeEventOptionName() {\r\n        return \"valueChangeEvent\"\r\n    }\r\n    _renderValueChangeEvent() {\r\n        const keyPressEvent = addNamespace(this._renderValueEventName(), `${this.NAME}TextChange`);\r\n        const valueChangeEvent = addNamespace(this.option(this._getValueChangeEventOptionName()), `${this.NAME}ValueChange`);\r\n        const keyDownEvent = addNamespace(\"keydown\", `${this.NAME}TextChange`);\r\n        const $input = this._input();\r\n        eventsEngine.on($input, keyPressEvent, this._keyPressHandler.bind(this));\r\n        eventsEngine.on($input, valueChangeEvent, this._valueChangeEventHandler.bind(this));\r\n        eventsEngine.on($input, keyDownEvent, this._keyDownHandler.bind(this))\r\n    }\r\n    _cleanValueChangeEvent() {\r\n        const valueChangeNamespace = `.${this.NAME}ValueChange`;\r\n        const textChangeNamespace = `.${this.NAME}TextChange`;\r\n        eventsEngine.off(this._input(), valueChangeNamespace);\r\n        eventsEngine.off(this._input(), textChangeNamespace)\r\n    }\r\n    _refreshValueChangeEvent() {\r\n        this._cleanValueChangeEvent();\r\n        this._renderValueChangeEvent()\r\n    }\r\n    _renderValueEventName() {\r\n        return \"input change keypress\"\r\n    }\r\n    _focusTarget() {\r\n        return this._input()\r\n    }\r\n    _focusEventTarget() {\r\n        return this.element()\r\n    }\r\n    _isInput(element) {\r\n        return element === this._input().get(0)\r\n    }\r\n    _preventNestedFocusEvent(event) {\r\n        if (event.isDefaultPrevented()) {\r\n            return true\r\n        }\r\n        let shouldPrevent = this._isNestedTarget(event.relatedTarget);\r\n        if (\"focusin\" === event.type) {\r\n            shouldPrevent = shouldPrevent && this._isNestedTarget(event.target) && !this._isInput(event.target)\r\n        } else if (!shouldPrevent) {\r\n            this._toggleFocusClass(false, this.$element())\r\n        }\r\n        if (shouldPrevent) {\r\n            event.preventDefault()\r\n        }\r\n        return shouldPrevent\r\n    }\r\n    _isNestedTarget(target) {\r\n        return !!this.$element().find(target).length\r\n    }\r\n    _focusClassTarget($element) {\r\n        return this.$element()\r\n    }\r\n    _focusInHandler(event) {\r\n        this._preventNestedFocusEvent(event);\r\n        super._focusInHandler(event)\r\n    }\r\n    _focusOutHandler(event) {\r\n        this._preventNestedFocusEvent(event);\r\n        super._focusOutHandler(event)\r\n    }\r\n    _toggleFocusClass(isFocused, $element) {\r\n        super._toggleFocusClass(isFocused, this._focusClassTarget($element))\r\n    }\r\n    _hasFocusClass(element) {\r\n        return super._hasFocusClass($(element || this.$element()))\r\n    }\r\n    _renderEmptinessEvent() {\r\n        const $input = this._input();\r\n        eventsEngine.on($input, \"input blur\", this._toggleEmptinessEventHandler.bind(this))\r\n    }\r\n    _toggleEmptinessEventHandler() {\r\n        const text = this._input().val();\r\n        const isEmpty = (\"\" === text || null === text) && this._isValueValid();\r\n        this._toggleEmptiness(isEmpty)\r\n    }\r\n    _valueChangeEventHandler(e, formattedValue) {\r\n        if (this.option(\"readOnly\")) {\r\n            return\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this.option(\"value\", arguments.length > 1 ? formattedValue : this._input().val());\r\n        this._saveValueChangeEvent(void 0)\r\n    }\r\n    _renderEnterKeyAction() {\r\n        this._enterKeyAction = this._createActionByOption(\"onEnterKey\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        });\r\n        eventsEngine.off(this._input(), \"keyup.onEnterKey.dxTextEditor\");\r\n        eventsEngine.on(this._input(), \"keyup.onEnterKey.dxTextEditor\", this._enterKeyHandlerUp.bind(this))\r\n    }\r\n    _enterKeyHandlerUp(e) {\r\n        if (this._disposed) {\r\n            return\r\n        }\r\n        if (\"enter\" === normalizeKeyName(e)) {\r\n            var _this$_enterKeyAction;\r\n            null === (_this$_enterKeyAction = this._enterKeyAction) || void 0 === _this$_enterKeyAction || _this$_enterKeyAction.call(this, {\r\n                event: e\r\n            })\r\n        }\r\n    }\r\n    _updateValue() {\r\n        this._options.silent(\"text\", null);\r\n        this._renderValue()\r\n    }\r\n    _dispose() {\r\n        this._enterKeyAction = void 0;\r\n        super._dispose()\r\n    }\r\n    _getSubmitElement() {\r\n        return this._input()\r\n    }\r\n    _hasActiveElement() {\r\n        return this._input().is(domAdapter.getActiveElement(this._input()[0]))\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            name: name,\r\n            fullName: fullName,\r\n            value: value\r\n        } = args;\r\n        const eventName = name.replace(\"on\", \"\");\r\n        if (EVENTS_LIST.includes(eventName)) {\r\n            this._refreshEvents();\r\n            return\r\n        }\r\n        switch (name) {\r\n            case \"valueChangeEvent\":\r\n                this._refreshValueChangeEvent();\r\n                this._refreshFocusEvent();\r\n                this._refreshEvents();\r\n                break;\r\n            case \"onValueChanged\":\r\n                this._createValueChangeAction();\r\n                break;\r\n            case \"focusStateEnabled\":\r\n                super._optionChanged(args);\r\n                this._toggleTabIndex();\r\n                break;\r\n            case \"spellcheck\":\r\n                this._toggleSpellcheckState();\r\n                break;\r\n            case \"mode\":\r\n                this._renderInputType();\r\n                break;\r\n            case \"onEnterKey\":\r\n                this._renderEnterKeyAction();\r\n                break;\r\n            case \"placeholder\":\r\n                this._renderPlaceholder();\r\n                this._setFieldAria(true);\r\n                this._input().attr({\r\n                    placeholder: this._getPlaceholderAttr()\r\n                });\r\n                break;\r\n            case \"label\":\r\n                this._label.updateText(value);\r\n                this._setFieldAria(true);\r\n                break;\r\n            case \"labelMark\":\r\n                this._label.updateMark(value);\r\n                break;\r\n            case \"labelMode\":\r\n                this._label.updateMode(value);\r\n                this._setFieldAria();\r\n                break;\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._label.updateMaxWidth(this._getLabelContainerWidth());\r\n                break;\r\n            case \"readOnly\":\r\n            case \"disabled\":\r\n                this._updateButtons();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"showClearButton\":\r\n                this._updateButtons([\"clear\"]);\r\n                break;\r\n            case \"text\":\r\n            case \"showValidationMark\":\r\n                break;\r\n            case \"value\":\r\n                this._updateValue();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"inputAttr\":\r\n                this._applyInputAttributes(this._input(), this.option(name));\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderStylingMode();\r\n                this._updateLabelWidth();\r\n                break;\r\n            case \"buttons\": {\r\n                if (fullName === name) {\r\n                    checkButtonsOptionType(value)\r\n                }\r\n                this._cleanButtonContainers();\r\n                this._renderButtonContainers();\r\n                const {\r\n                    stylingMode: stylingMode\r\n                } = this.option();\r\n                this._updateButtonsStyling(stylingMode);\r\n                this._updateLabelWidth();\r\n                this._label.updateContainsButtonsBefore(!!this._$beforeButtonsContainer);\r\n                break\r\n            }\r\n            case \"visible\":\r\n                super._optionChanged(args);\r\n                if (value && this.option(\"buttons\")) {\r\n                    this._cleanButtonContainers();\r\n                    this._renderButtonContainers();\r\n                    const {\r\n                        stylingMode: stylingMode\r\n                    } = this.option();\r\n                    this._updateButtonsStyling(stylingMode)\r\n                }\r\n                break;\r\n            case \"displayValueFormatter\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _renderInputType() {\r\n        this._setInputType(this.option(\"mode\"))\r\n    }\r\n    _setInputType(type) {\r\n        const input = this._input();\r\n        if (\"search\" === type) {\r\n            type = \"text\"\r\n        }\r\n        try {\r\n            input.prop(\"type\", type)\r\n        } catch (e) {\r\n            input.prop(\"type\", \"text\")\r\n        }\r\n    }\r\n    getButton(name) {\r\n        return this._buttonCollection.getButton(name)\r\n    }\r\n    focus() {\r\n        eventsEngine.trigger(this._input(), \"focus\")\r\n    }\r\n    clear() {\r\n        if (this._showValidMark) {\r\n            this._showValidMark = false;\r\n            this._renderValidationState()\r\n        }\r\n        const defaultOptions = this._getDefaultOptions();\r\n        if (this.option(\"value\") === defaultOptions.value) {\r\n            this._options.silent(\"text\", \"\");\r\n            this._renderValue()\r\n        } else {\r\n            this.option(\"value\", defaultOptions.value)\r\n        }\r\n    }\r\n    _resetInputText() {\r\n        this._options.silent(\"text\", this._initialValue);\r\n        this._renderValue()\r\n    }\r\n    _isValueEqualToInitial() {\r\n        const {\r\n            value: value\r\n        } = this.option();\r\n        const initialValue = this._initialValue;\r\n        return value === initialValue\r\n    }\r\n    _resetToInitialValue() {\r\n        const shouldResetInputText = this._isValueEqualToInitial();\r\n        if (shouldResetInputText) {\r\n            this._resetInputText()\r\n        } else {\r\n            super._resetToInitialValue()\r\n        }\r\n        this._disposePendingIndicator();\r\n        this._showValidMark = false;\r\n        this._toggleValidMark()\r\n    }\r\n    _toggleValidMark() {\r\n        this.$element().toggleClass(\"dx-valid\", !!this._showValidMark)\r\n    }\r\n    reset() {\r\n        let value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;\r\n        if (arguments.length) {\r\n            super.reset(value)\r\n        } else {\r\n            super.reset()\r\n        }\r\n    }\r\n    on(eventName, eventHandler) {\r\n        const result = super.on(eventName, eventHandler);\r\n        const event = eventName.charAt(0).toUpperCase() + eventName.substr(1);\r\n        if (EVENTS_LIST.includes(event)) {\r\n            this._refreshEvents()\r\n        }\r\n        return result\r\n    }\r\n}\r\nexport default TextEditorBase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}