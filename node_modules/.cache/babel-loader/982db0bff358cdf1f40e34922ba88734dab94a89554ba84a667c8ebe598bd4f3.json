{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/core/utils/m_date.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateSerialization from \"../../../core/utils/date_serialization\";\nimport { camelize } from \"../../../core/utils/inflector\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { adjust } from \"../../../core/utils/math\";\nimport { isDate, isDefined, isNumeric, isObject, isString } from \"../../../core/utils/type\";\nimport { toMilliseconds } from \"../../utils/toMilliseconds\";\nconst DAYS_IN_WEEK = 7;\nconst THURSDAY_WEEK_NUMBER = 4;\nconst SUNDAY_WEEK_NUMBER = 7;\nconst USUAL_WEEK_COUNT_IN_YEAR = 52;\nconst dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"];\nconst getDatesInterval = function (startDate, endDate, intervalUnit) {\n  const delta = endDate.getTime() - startDate.getTime();\n  const millisecondCount = toMilliseconds(intervalUnit) || 1;\n  return Math.floor(delta / millisecondCount);\n};\nconst getNextDateUnit = function (unit, withWeeks) {\n  const interval = getDateUnitInterval(unit);\n  switch (interval) {\n    case \"millisecond\":\n      return \"second\";\n    case \"second\":\n      return \"minute\";\n    case \"minute\":\n      return \"hour\";\n    case \"hour\":\n      return \"day\";\n    case \"day\":\n      return withWeeks ? \"week\" : \"month\";\n    case \"week\":\n      return \"month\";\n    case \"month\":\n      return \"quarter\";\n    case \"quarter\":\n    case \"year\":\n      return \"year\";\n    default:\n      return 0;\n  }\n};\nconst convertMillisecondsToDateUnits = function (value) {\n  let i;\n  let dateUnitCount;\n  let dateUnitInterval;\n  const dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"];\n  const result = {};\n  for (i = dateUnitIntervals.length - 1; i >= 0; i--) {\n    dateUnitInterval = dateUnitIntervals[i];\n    dateUnitCount = Math.floor(value / toMilliseconds(dateUnitInterval));\n    if (dateUnitCount > 0) {\n      result[`${dateUnitInterval}s`] = dateUnitCount;\n      value -= convertDateUnitToMilliseconds(dateUnitInterval, dateUnitCount);\n    }\n  }\n  return result;\n};\nconst dateToMilliseconds = function (tickInterval) {\n  let milliseconds = 0;\n  if (isObject(tickInterval)) {\n    each(tickInterval, function (key, value) {\n      milliseconds += convertDateUnitToMilliseconds(key.substr(0, key.length - 1), value);\n    });\n  }\n  if (isString(tickInterval)) {\n    milliseconds = convertDateUnitToMilliseconds(tickInterval, 1);\n  }\n  return milliseconds;\n};\nfunction convertDateUnitToMilliseconds(dateUnit, count) {\n  return toMilliseconds(dateUnit) * count;\n}\nfunction getDateUnitInterval(tickInterval) {\n  let maxInterval = -1;\n  let i;\n  if (isString(tickInterval)) {\n    return tickInterval;\n  }\n  if (isObject(tickInterval)) {\n    each(tickInterval, function (key, value) {\n      for (i = 0; i < dateUnitIntervals.length; i++) {\n        if (value && (key === `${dateUnitIntervals[i]}s` || key === dateUnitIntervals[i]) && maxInterval < i) {\n          maxInterval = i;\n        }\n      }\n    });\n    return dateUnitIntervals[maxInterval];\n  }\n  return \"\";\n}\nconst tickIntervalToFormatMap = {\n  millisecond: \"millisecond\",\n  second: \"longtime\",\n  minute: \"shorttime\",\n  hour: \"shorttime\",\n  day: \"day\",\n  week: \"day\",\n  month: \"month\",\n  quarter: \"quarter\",\n  year: \"year\"\n};\nfunction getDateFormatByTickInterval(tickInterval) {\n  return tickIntervalToFormatMap[getDateUnitInterval(tickInterval)] || \"\";\n}\nconst getQuarter = function (month) {\n  return Math.floor(month / 3);\n};\nconst getFirstQuarterMonth = function (month) {\n  return 3 * getQuarter(month);\n};\nfunction correctDateWithUnitBeginning(date, dateInterval, withCorrection, firstDayOfWeek) {\n  date = new Date(date.getTime());\n  const oldDate = new Date(date.getTime());\n  let firstQuarterMonth;\n  let month;\n  const dateUnitInterval = getDateUnitInterval(dateInterval);\n  switch (dateUnitInterval) {\n    case \"second\":\n      date = new Date(1e3 * Math.floor(oldDate.getTime() / 1e3));\n      break;\n    case \"minute\":\n      date = new Date(6e4 * Math.floor(oldDate.getTime() / 6e4));\n      break;\n    case \"hour\":\n      date = new Date(36e5 * Math.floor(oldDate.getTime() / 36e5));\n      break;\n    case \"year\":\n      date.setMonth(0);\n    case \"month\":\n      date.setDate(1);\n    case \"day\":\n      date.setHours(0, 0, 0, 0);\n      break;\n    case \"week\":\n      date = getFirstWeekDate(date, firstDayOfWeek || 0);\n      date.setHours(0, 0, 0, 0);\n      break;\n    case \"quarter\":\n      firstQuarterMonth = getFirstQuarterMonth(date.getMonth());\n      month = date.getMonth();\n      date.setDate(1);\n      date.setHours(0, 0, 0, 0);\n      if (month !== firstQuarterMonth) {\n        date.setMonth(firstQuarterMonth);\n      }\n  }\n  if (withCorrection && \"hour\" !== dateUnitInterval && \"minute\" !== dateUnitInterval && \"second\" !== dateUnitInterval) {\n    fixTimezoneGap(oldDate, date);\n  }\n  return date;\n}\nfunction trimTime(date) {\n  return correctDateWithUnitBeginning(date, \"day\");\n}\nconst setToDayEnd = function (date) {\n  const result = trimTime(date);\n  result.setDate(result.getDate() + 1);\n  return new Date(result.getTime() - 1);\n};\nconst getDatesDifferences = function (date1, date2) {\n  let counter = 0;\n  const differences = {\n    year: date1.getFullYear() !== date2.getFullYear(),\n    month: date1.getMonth() !== date2.getMonth(),\n    day: date1.getDate() !== date2.getDate(),\n    hour: date1.getHours() !== date2.getHours(),\n    minute: date1.getMinutes() !== date2.getMinutes(),\n    second: date1.getSeconds() !== date2.getSeconds(),\n    millisecond: date1.getMilliseconds() !== date2.getMilliseconds()\n  };\n  each(differences, function (key, value) {\n    if (value) {\n      counter++;\n    }\n  });\n  if (0 === counter && 0 !== getTimezonesDifference(date1, date2)) {\n    differences.hour = true;\n    counter++;\n  }\n  differences.count = counter;\n  return differences;\n};\nfunction addDateInterval(value, interval, dir) {\n  const result = new Date(value.getTime());\n  const intervalObject = isString(interval) ? getDateIntervalByString(interval.toLowerCase()) : isNumeric(interval) ? convertMillisecondsToDateUnits(interval) : interval;\n  if (intervalObject.years) {\n    result.setFullYear(result.getFullYear() + intervalObject.years * dir);\n  }\n  if (intervalObject.quarters) {\n    result.setMonth(result.getMonth() + 3 * intervalObject.quarters * dir);\n  }\n  if (intervalObject.months) {\n    result.setMonth(result.getMonth() + intervalObject.months * dir);\n  }\n  if (intervalObject.weeks) {\n    result.setDate(result.getDate() + 7 * intervalObject.weeks * dir);\n  }\n  if (intervalObject.days) {\n    result.setDate(result.getDate() + intervalObject.days * dir);\n  }\n  if (intervalObject.hours) {\n    result.setTime(result.getTime() + 36e5 * intervalObject.hours * dir);\n  }\n  if (intervalObject.minutes) {\n    result.setTime(result.getTime() + 6e4 * intervalObject.minutes * dir);\n  }\n  if (intervalObject.seconds) {\n    result.setTime(result.getTime() + 1e3 * intervalObject.seconds * dir);\n  }\n  if (intervalObject.milliseconds) {\n    result.setTime(result.getTime() + intervalObject.milliseconds * dir);\n  }\n  return result;\n}\nconst addInterval = function (value, interval, isNegative) {\n  const dir = isNegative ? -1 : 1;\n  return isDate(value) ? addDateInterval(value, interval, dir) : adjust(value + interval * dir, interval);\n};\nconst getSequenceByInterval = function (min, max, interval) {\n  const intervals = [];\n  let cur;\n  intervals.push(isDate(min) ? new Date(min.getTime()) : min);\n  cur = min;\n  while (cur < max) {\n    cur = addInterval(cur, interval);\n    intervals.push(cur);\n  }\n  return intervals;\n};\nconst getViewFirstCellDate = function (viewType, date) {\n  if (\"month\" === viewType) {\n    return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);\n  }\n  if (\"year\" === viewType) {\n    return createDateWithFullYear(date.getFullYear(), 0, date.getDate());\n  }\n  if (\"decade\" === viewType) {\n    return createDateWithFullYear(getFirstYearInDecade(date), date.getMonth(), date.getDate());\n  }\n  if (\"century\" === viewType) {\n    return createDateWithFullYear(getFirstDecadeInCentury(date), date.getMonth(), date.getDate());\n  }\n};\nconst getViewLastCellDate = function (viewType, date) {\n  if (\"month\" === viewType) {\n    return createDateWithFullYear(date.getFullYear(), date.getMonth(), getLastMonthDay(date));\n  }\n  if (\"year\" === viewType) {\n    return createDateWithFullYear(date.getFullYear(), 11, date.getDate());\n  }\n  if (\"decade\" === viewType) {\n    return createDateWithFullYear(getFirstYearInDecade(date) + 9, date.getMonth(), date.getDate());\n  }\n  if (\"century\" === viewType) {\n    return createDateWithFullYear(getFirstDecadeInCentury(date) + 90, date.getMonth(), date.getDate());\n  }\n};\nconst getViewMinBoundaryDate = function (viewType, date) {\n  const resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);\n  if (\"month\" === viewType) {\n    return resultDate;\n  }\n  resultDate.setMonth(0);\n  if (\"year\" === viewType) {\n    return resultDate;\n  }\n  if (\"decade\" === viewType) {\n    resultDate.setFullYear(getFirstYearInDecade(date));\n  }\n  if (\"century\" === viewType) {\n    resultDate.setFullYear(getFirstDecadeInCentury(date));\n  }\n  return resultDate;\n};\nconst getViewMaxBoundaryDate = function (viewType, date) {\n  const resultDate = new Date(date);\n  resultDate.setDate(getLastMonthDay(date));\n  if (\"month\" === viewType) {\n    return resultDate;\n  }\n  resultDate.setMonth(11);\n  resultDate.setDate(getLastMonthDay(resultDate));\n  if (\"year\" === viewType) {\n    return resultDate;\n  }\n  if (\"decade\" === viewType) {\n    resultDate.setFullYear(getFirstYearInDecade(date) + 9);\n  }\n  if (\"century\" === viewType) {\n    resultDate.setFullYear(getFirstDecadeInCentury(date) + 99);\n  }\n  return resultDate;\n};\nfunction getLastMonthDay(date) {\n  const resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);\n  return resultDate.getDate();\n}\nconst getViewUp = function (typeView) {\n  switch (typeView) {\n    case \"month\":\n      return \"year\";\n    case \"year\":\n      return \"decade\";\n    case \"decade\":\n      return \"century\";\n  }\n};\nconst getViewDown = function (typeView) {\n  switch (typeView) {\n    case \"century\":\n      return \"decade\";\n    case \"decade\":\n      return \"year\";\n    case \"year\":\n      return \"month\";\n  }\n};\nconst getDifferenceInMonth = function (typeView) {\n  let difference = 1;\n  if (\"year\" === typeView) {\n    difference = 12;\n  }\n  if (\"decade\" === typeView) {\n    difference = 120;\n  }\n  if (\"century\" === typeView) {\n    difference = 1200;\n  }\n  return difference;\n};\nconst getDifferenceInMonthForCells = function (typeView) {\n  let difference = 1;\n  if (\"decade\" === typeView) {\n    difference = 12;\n  }\n  if (\"century\" === typeView) {\n    difference = 120;\n  }\n  return difference;\n};\nfunction getDateIntervalByString(intervalString) {\n  const result = {};\n  switch (intervalString) {\n    case \"year\":\n      result.years = 1;\n      break;\n    case \"month\":\n      result.months = 1;\n      break;\n    case \"quarter\":\n      result.months = 3;\n      break;\n    case \"week\":\n      result.weeks = 1;\n      break;\n    case \"day\":\n      result.days = 1;\n      break;\n    case \"hour\":\n      result.hours = 1;\n      break;\n    case \"minute\":\n      result.minutes = 1;\n      break;\n    case \"second\":\n      result.seconds = 1;\n      break;\n    case \"millisecond\":\n      result.milliseconds = 1;\n  }\n  return result;\n}\nfunction sameDate(date1, date2) {\n  return sameMonthAndYear(date1, date2) && date1.getDate() === date2.getDate();\n}\nfunction sameMonthAndYear(date1, date2) {\n  return sameYear(date1, date2) && date1.getMonth() === date2.getMonth();\n}\nfunction sameYear(date1, date2) {\n  return date1 && date2 && date1.getFullYear() === date2.getFullYear();\n}\nfunction sameHoursAndMinutes(date1, date2) {\n  return date1 && date2 && date1.getHours() === date2.getHours() && date1.getMinutes() === date2.getMinutes();\n}\nconst sameDecade = function (date1, date2) {\n  if (!isDefined(date1) || !isDefined(date2)) {\n    return;\n  }\n  const startDecadeDate1 = date1.getFullYear() - date1.getFullYear() % 10;\n  const startDecadeDate2 = date2.getFullYear() - date2.getFullYear() % 10;\n  return date1 && date2 && startDecadeDate1 === startDecadeDate2;\n};\nconst sameCentury = function (date1, date2) {\n  if (!isDefined(date1) || !isDefined(date2)) {\n    return;\n  }\n  const startCenturyDate1 = date1.getFullYear() - date1.getFullYear() % 100;\n  const startCenturyDate2 = date2.getFullYear() - date2.getFullYear() % 100;\n  return date1 && date2 && startCenturyDate1 === startCenturyDate2;\n};\nconst sameDatesArrays = (arr1, arr2) => {\n  if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length) {\n    return false;\n  }\n  return arr1.every((date1, index) => {\n    const date2 = arr2[index];\n    if ([date1, date2].some(date => null !== date && !(date instanceof Date))) {\n      return false;\n    }\n    if (date1 instanceof Date && date2 instanceof Date) {\n      return sameDate(date1, date2);\n    }\n    return date1 === date2;\n  });\n};\nfunction getFirstDecadeInCentury(date) {\n  return date && date.getFullYear() - date.getFullYear() % 100;\n}\nfunction getFirstYearInDecade(date) {\n  return date && date.getFullYear() - date.getFullYear() % 10;\n}\nconst getShortDateFormat = function () {\n  return \"yyyy/MM/dd\";\n};\nconst getFirstMonthDate = function (date) {\n  let offset = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n  if (!isDefined(date)) {\n    return;\n  }\n  const currentDate = new Date(date.getTime());\n  const month = currentDate.getMonth() + offset;\n  currentDate.setMonth(month);\n  return createDateWithFullYear(currentDate.getFullYear(), month, 1);\n};\nconst getLastMonthDate = function (date) {\n  let offset = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n  if (!isDefined(date)) {\n    return;\n  }\n  const currentDate = new Date(date.getTime());\n  const month = currentDate.getMonth() + offset;\n  currentDate.setMonth(month);\n  return createDateWithFullYear(currentDate.getFullYear(), month + 1, 0);\n};\nfunction getFirstWeekDate(date, firstDayOfWeek) {\n  const delta = (date.getDay() - firstDayOfWeek + 7) % 7;\n  const result = new Date(date);\n  result.setDate(date.getDate() - delta);\n  return result;\n}\nfunction getUTCTime(date) {\n  return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n}\nfunction getDayNumber(date) {\n  const ms = getUTCTime(date) - getUTCTime(getFirstDateInYear(date.getFullYear()));\n  return 1 + Math.floor(ms / toMilliseconds(\"day\"));\n}\nfunction getFirstDateInYear(year) {\n  return new Date(year, 0, 1);\n}\nfunction getLastDateInYear(year) {\n  return new Date(year, 11, 31);\n}\nfunction getDayWeekNumber(date, firstDayOfWeek) {\n  let day = date.getDay() - firstDayOfWeek + 1;\n  if (day <= 0) {\n    day += 7;\n  }\n  return day;\n}\nfunction getWeekNumber(date, firstDayOfWeek, rule) {\n  const firstWeekDayInYear = getDayWeekNumber(getFirstDateInYear(date.getFullYear()), firstDayOfWeek);\n  const lastWeekDayInYear = getDayWeekNumber(getLastDateInYear(date.getFullYear()), firstDayOfWeek);\n  const daysInFirstWeek = 7 - firstWeekDayInYear + 1;\n  let weekNumber = Math.ceil((getDayNumber(date) - daysInFirstWeek) / 7);\n  switch (rule) {\n    case \"fullWeek\":\n      if (7 === daysInFirstWeek) {\n        weekNumber++;\n      }\n      if (0 === weekNumber) {\n        const lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);\n        return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule);\n      }\n      return weekNumber;\n    case \"firstDay\":\n      {\n        if (daysInFirstWeek > 0) {\n          weekNumber++;\n        }\n        const isSunday = 7 === firstWeekDayInYear || 7 === lastWeekDayInYear;\n        if (weekNumber > 52 && !isSunday || 54 === weekNumber) {\n          weekNumber = 1;\n        }\n        return weekNumber;\n      }\n    case \"firstFourDays\":\n      {\n        if (daysInFirstWeek > 3) {\n          weekNumber++;\n        }\n        const isThursday = 4 === firstWeekDayInYear || 4 === lastWeekDayInYear;\n        if (weekNumber > 52 && !isThursday) {\n          weekNumber = 1;\n        }\n        if (0 === weekNumber) {\n          const lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);\n          return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule);\n        }\n        return weekNumber;\n      }\n  }\n}\nconst normalizeDateByWeek = function (date, currentDate) {\n  const differenceInDays = dateUtils.getDatesInterval(date, currentDate, \"day\");\n  let resultDate = new Date(date);\n  if (differenceInDays >= 6) {\n    resultDate = new Date(resultDate.setDate(resultDate.getDate() + 7));\n  }\n  return resultDate;\n};\nconst dateInRange = function (date, min, max, format) {\n  if (\"date\" === format) {\n    min = min && dateUtils.correctDateWithUnitBeginning(min, \"day\");\n    max = max && dateUtils.correctDateWithUnitBeginning(max, \"day\");\n    date = date && dateUtils.correctDateWithUnitBeginning(date, \"day\");\n  }\n  return normalizeDate(date, min, max) === date;\n};\nconst intervalsOverlap = function (options) {\n  const {\n    firstMin: firstMin,\n    firstMax: firstMax,\n    secondMin: secondMin,\n    secondMax: secondMax\n  } = options;\n  return firstMin <= secondMin && secondMin <= firstMax || firstMin > secondMin && firstMin < secondMax || firstMin < secondMax && firstMax > secondMax;\n};\nconst dateTimeFromDecimal = function (number) {\n  const hours = Math.floor(number);\n  const minutes = number % 1 * 60;\n  return {\n    hours: hours,\n    minutes: minutes\n  };\n};\nconst roundDateByStartDayHour = function (date, startDayHour) {\n  const startTime = this.dateTimeFromDecimal(startDayHour);\n  const result = new Date(date);\n  if (date.getHours() === startTime.hours && date.getMinutes() < startTime.minutes || date.getHours() < startTime.hours) {\n    result.setHours(startTime.hours, startTime.minutes, 0, 0);\n  }\n  return result;\n};\nfunction normalizeDate(date, min, max) {\n  let normalizedDate = date;\n  if (!isDefined(date)) {\n    return date;\n  }\n  if (isDefined(min) && date < min) {\n    normalizedDate = min;\n  }\n  if (isDefined(max) && date > max) {\n    normalizedDate = max;\n  }\n  return normalizedDate;\n}\nfunction fixTimezoneGap(oldDate, newDate) {\n  if (!isDefined(oldDate)) {\n    return;\n  }\n  const diff = newDate.getHours() - oldDate.getHours();\n  if (0 === diff) {\n    return;\n  }\n  const sign = 1 === diff || -23 === diff ? -1 : 1;\n  const trial = new Date(newDate.getTime() + 36e5 * sign);\n  if (sign > 0 || trial.getDate() === newDate.getDate()) {\n    newDate.setTime(trial.getTime());\n  }\n}\nconst roundToHour = function (date) {\n  const result = new Date(date.getTime());\n  result.setHours(result.getHours() + 1);\n  result.setMinutes(0);\n  return result;\n};\nfunction getTimezonesDifference(min, max) {\n  return 60 * (max.getTimezoneOffset() - min.getTimezoneOffset()) * 1e3;\n}\nconst makeDate = function (date) {\n  return new Date(date);\n};\nconst getDatesOfInterval = function (startDate, endDate, step) {\n  const result = [];\n  let currentDate = new Date(startDate.getTime());\n  while (currentDate < endDate) {\n    result.push(new Date(currentDate.getTime()));\n    currentDate = this.addInterval(currentDate, step);\n  }\n  return result;\n};\nconst createDateWithFullYear = function (year) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  const result = new Date(year, ...args);\n  result.setFullYear(year);\n  return result;\n};\nconst getMachineTimezoneName = () => {\n  const hasIntl = \"undefined\" !== typeof Intl;\n  return hasIntl ? Intl.DateTimeFormat().resolvedOptions().timeZone : null;\n};\nconst getRangesByDates = dates => {\n  const datesInMilliseconds = dates.map(value => correctDateWithUnitBeginning(value, \"day\").getTime());\n  const sortedDates = datesInMilliseconds.sort((a, b) => a - b);\n  const msInDay = toMilliseconds(\"day\");\n  const ranges = [];\n  let startDate = sortedDates[0];\n  for (let i = 1; i <= sortedDates.length; ++i) {\n    const nextDate = sortedDates[i];\n    const currentDate = sortedDates[i - 1];\n    const isNewRange = nextDate - currentDate > msInDay;\n    if (isNewRange || i === sortedDates.length) {\n      const range = startDate === sortedDates[i - 1] ? [startDate] : [startDate, sortedDates[i - 1]];\n      const serializedRange = range.map(value => dateSerialization.deserializeDate(value));\n      ranges.push(serializedRange);\n      startDate = nextDate;\n    }\n  }\n  return ranges;\n};\nconst sameView = function (view, date1, date2) {\n  return dateUtils[camelize(`same ${view}`)](date1, date2);\n};\nconst dateUtils = {\n  dateUnitIntervals: dateUnitIntervals,\n  convertMillisecondsToDateUnits: convertMillisecondsToDateUnits,\n  dateToMilliseconds: dateToMilliseconds,\n  getNextDateUnit: getNextDateUnit,\n  convertDateUnitToMilliseconds: convertDateUnitToMilliseconds,\n  getDateUnitInterval: getDateUnitInterval,\n  getDateFormatByTickInterval: getDateFormatByTickInterval,\n  getDatesDifferences: getDatesDifferences,\n  correctDateWithUnitBeginning: correctDateWithUnitBeginning,\n  trimTime: trimTime,\n  setToDayEnd: setToDayEnd,\n  roundDateByStartDayHour: roundDateByStartDayHour,\n  dateTimeFromDecimal: dateTimeFromDecimal,\n  addDateInterval: addDateInterval,\n  addInterval: addInterval,\n  getSequenceByInterval: getSequenceByInterval,\n  getDateIntervalByString: getDateIntervalByString,\n  sameHoursAndMinutes: sameHoursAndMinutes,\n  sameDate: sameDate,\n  sameMonthAndYear: sameMonthAndYear,\n  sameMonth: sameMonthAndYear,\n  sameYear: sameYear,\n  sameDecade: sameDecade,\n  sameCentury: sameCentury,\n  sameView: sameView,\n  sameDatesArrays: sameDatesArrays,\n  getDifferenceInMonth: getDifferenceInMonth,\n  getDifferenceInMonthForCells: getDifferenceInMonthForCells,\n  getFirstYearInDecade: getFirstYearInDecade,\n  getFirstDecadeInCentury: getFirstDecadeInCentury,\n  getShortDateFormat: getShortDateFormat,\n  getViewFirstCellDate: getViewFirstCellDate,\n  getViewLastCellDate: getViewLastCellDate,\n  getViewDown: getViewDown,\n  getViewUp: getViewUp,\n  getLastMonthDay: getLastMonthDay,\n  getLastMonthDate: getLastMonthDate,\n  getFirstMonthDate: getFirstMonthDate,\n  getFirstWeekDate: getFirstWeekDate,\n  getWeekNumber: getWeekNumber,\n  normalizeDateByWeek: normalizeDateByWeek,\n  getQuarter: getQuarter,\n  getFirstQuarterMonth: getFirstQuarterMonth,\n  dateInRange: dateInRange,\n  intervalsOverlap: intervalsOverlap,\n  roundToHour: roundToHour,\n  normalizeDate: normalizeDate,\n  getViewMinBoundaryDate: getViewMinBoundaryDate,\n  getViewMaxBoundaryDate: getViewMaxBoundaryDate,\n  fixTimezoneGap: fixTimezoneGap,\n  getTimezonesDifference: getTimezonesDifference,\n  makeDate: makeDate,\n  getDatesInterval: getDatesInterval,\n  getDatesOfInterval: getDatesOfInterval,\n  createDateWithFullYear: createDateWithFullYear,\n  getMachineTimezoneName: getMachineTimezoneName,\n  getRangesByDates: getRangesByDates\n};\nexport { dateUtils };","map":{"version":3,"names":["dateSerialization","camelize","each","adjust","isDate","isDefined","isNumeric","isObject","isString","toMilliseconds","DAYS_IN_WEEK","THURSDAY_WEEK_NUMBER","SUNDAY_WEEK_NUMBER","USUAL_WEEK_COUNT_IN_YEAR","dateUnitIntervals","getDatesInterval","startDate","endDate","intervalUnit","delta","getTime","millisecondCount","Math","floor","getNextDateUnit","unit","withWeeks","interval","getDateUnitInterval","convertMillisecondsToDateUnits","value","i","dateUnitCount","dateUnitInterval","result","length","convertDateUnitToMilliseconds","dateToMilliseconds","tickInterval","milliseconds","key","substr","dateUnit","count","maxInterval","tickIntervalToFormatMap","millisecond","second","minute","hour","day","week","month","quarter","year","getDateFormatByTickInterval","getQuarter","getFirstQuarterMonth","correctDateWithUnitBeginning","date","dateInterval","withCorrection","firstDayOfWeek","Date","oldDate","firstQuarterMonth","setMonth","setDate","setHours","getFirstWeekDate","getMonth","fixTimezoneGap","trimTime","setToDayEnd","getDate","getDatesDifferences","date1","date2","counter","differences","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","getTimezonesDifference","addDateInterval","dir","intervalObject","getDateIntervalByString","toLowerCase","years","setFullYear","quarters","months","weeks","days","hours","setTime","minutes","seconds","addInterval","isNegative","getSequenceByInterval","min","max","intervals","cur","push","getViewFirstCellDate","viewType","createDateWithFullYear","getFirstYearInDecade","getFirstDecadeInCentury","getViewLastCellDate","getLastMonthDay","getViewMinBoundaryDate","resultDate","getViewMaxBoundaryDate","getViewUp","typeView","getViewDown","getDifferenceInMonth","difference","getDifferenceInMonthForCells","intervalString","sameDate","sameMonthAndYear","sameYear","sameHoursAndMinutes","sameDecade","startDecadeDate1","startDecadeDate2","sameCentury","startCenturyDate1","startCenturyDate2","sameDatesArrays","arr1","arr2","Array","isArray","every","index","some","getShortDateFormat","getFirstMonthDate","offset","arguments","currentDate","getLastMonthDate","getDay","getUTCTime","UTC","getDayNumber","ms","getFirstDateInYear","getLastDateInYear","getDayWeekNumber","getWeekNumber","rule","firstWeekDayInYear","lastWeekDayInYear","daysInFirstWeek","weekNumber","ceil","lastDateInPreviousYear","isSunday","isThursday","normalizeDateByWeek","differenceInDays","dateUtils","dateInRange","format","normalizeDate","intervalsOverlap","options","firstMin","firstMax","secondMin","secondMax","dateTimeFromDecimal","number","roundDateByStartDayHour","startDayHour","startTime","normalizedDate","newDate","diff","sign","trial","roundToHour","setMinutes","getTimezoneOffset","makeDate","getDatesOfInterval","step","_len","args","_key","getMachineTimezoneName","hasIntl","Intl","DateTimeFormat","resolvedOptions","timeZone","getRangesByDates","dates","datesInMilliseconds","map","sortedDates","sort","a","b","msInDay","ranges","nextDate","isNewRange","range","serializedRange","deserializeDate","sameView","view","sameMonth"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/core/utils/m_date.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/core/utils/m_date.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateSerialization from \"../../../core/utils/date_serialization\";\r\nimport {\r\n    camelize\r\n} from \"../../../core/utils/inflector\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    adjust\r\n} from \"../../../core/utils/math\";\r\nimport {\r\n    isDate,\r\n    isDefined,\r\n    isNumeric,\r\n    isObject,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    toMilliseconds\r\n} from \"../../utils/toMilliseconds\";\r\nconst DAYS_IN_WEEK = 7;\r\nconst THURSDAY_WEEK_NUMBER = 4;\r\nconst SUNDAY_WEEK_NUMBER = 7;\r\nconst USUAL_WEEK_COUNT_IN_YEAR = 52;\r\nconst dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"];\r\nconst getDatesInterval = function(startDate, endDate, intervalUnit) {\r\n    const delta = endDate.getTime() - startDate.getTime();\r\n    const millisecondCount = toMilliseconds(intervalUnit) || 1;\r\n    return Math.floor(delta / millisecondCount)\r\n};\r\nconst getNextDateUnit = function(unit, withWeeks) {\r\n    const interval = getDateUnitInterval(unit);\r\n    switch (interval) {\r\n        case \"millisecond\":\r\n            return \"second\";\r\n        case \"second\":\r\n            return \"minute\";\r\n        case \"minute\":\r\n            return \"hour\";\r\n        case \"hour\":\r\n            return \"day\";\r\n        case \"day\":\r\n            return withWeeks ? \"week\" : \"month\";\r\n        case \"week\":\r\n            return \"month\";\r\n        case \"month\":\r\n            return \"quarter\";\r\n        case \"quarter\":\r\n        case \"year\":\r\n            return \"year\";\r\n        default:\r\n            return 0\r\n    }\r\n};\r\nconst convertMillisecondsToDateUnits = function(value) {\r\n    let i;\r\n    let dateUnitCount;\r\n    let dateUnitInterval;\r\n    const dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"];\r\n    const result = {};\r\n    for (i = dateUnitIntervals.length - 1; i >= 0; i--) {\r\n        dateUnitInterval = dateUnitIntervals[i];\r\n        dateUnitCount = Math.floor(value / toMilliseconds(dateUnitInterval));\r\n        if (dateUnitCount > 0) {\r\n            result[`${dateUnitInterval}s`] = dateUnitCount;\r\n            value -= convertDateUnitToMilliseconds(dateUnitInterval, dateUnitCount)\r\n        }\r\n    }\r\n    return result\r\n};\r\nconst dateToMilliseconds = function(tickInterval) {\r\n    let milliseconds = 0;\r\n    if (isObject(tickInterval)) {\r\n        each(tickInterval, (function(key, value) {\r\n            milliseconds += convertDateUnitToMilliseconds(key.substr(0, key.length - 1), value)\r\n        }))\r\n    }\r\n    if (isString(tickInterval)) {\r\n        milliseconds = convertDateUnitToMilliseconds(tickInterval, 1)\r\n    }\r\n    return milliseconds\r\n};\r\n\r\nfunction convertDateUnitToMilliseconds(dateUnit, count) {\r\n    return toMilliseconds(dateUnit) * count\r\n}\r\n\r\nfunction getDateUnitInterval(tickInterval) {\r\n    let maxInterval = -1;\r\n    let i;\r\n    if (isString(tickInterval)) {\r\n        return tickInterval\r\n    }\r\n    if (isObject(tickInterval)) {\r\n        each(tickInterval, (function(key, value) {\r\n            for (i = 0; i < dateUnitIntervals.length; i++) {\r\n                if (value && (key === `${dateUnitIntervals[i]}s` || key === dateUnitIntervals[i]) && maxInterval < i) {\r\n                    maxInterval = i\r\n                }\r\n            }\r\n        }));\r\n        return dateUnitIntervals[maxInterval]\r\n    }\r\n    return \"\"\r\n}\r\nconst tickIntervalToFormatMap = {\r\n    millisecond: \"millisecond\",\r\n    second: \"longtime\",\r\n    minute: \"shorttime\",\r\n    hour: \"shorttime\",\r\n    day: \"day\",\r\n    week: \"day\",\r\n    month: \"month\",\r\n    quarter: \"quarter\",\r\n    year: \"year\"\r\n};\r\n\r\nfunction getDateFormatByTickInterval(tickInterval) {\r\n    return tickIntervalToFormatMap[getDateUnitInterval(tickInterval)] || \"\"\r\n}\r\nconst getQuarter = function(month) {\r\n    return Math.floor(month / 3)\r\n};\r\nconst getFirstQuarterMonth = function(month) {\r\n    return 3 * getQuarter(month)\r\n};\r\n\r\nfunction correctDateWithUnitBeginning(date, dateInterval, withCorrection, firstDayOfWeek) {\r\n    date = new Date(date.getTime());\r\n    const oldDate = new Date(date.getTime());\r\n    let firstQuarterMonth;\r\n    let month;\r\n    const dateUnitInterval = getDateUnitInterval(dateInterval);\r\n    switch (dateUnitInterval) {\r\n        case \"second\":\r\n            date = new Date(1e3 * Math.floor(oldDate.getTime() / 1e3));\r\n            break;\r\n        case \"minute\":\r\n            date = new Date(6e4 * Math.floor(oldDate.getTime() / 6e4));\r\n            break;\r\n        case \"hour\":\r\n            date = new Date(36e5 * Math.floor(oldDate.getTime() / 36e5));\r\n            break;\r\n        case \"year\":\r\n            date.setMonth(0);\r\n        case \"month\":\r\n            date.setDate(1);\r\n        case \"day\":\r\n            date.setHours(0, 0, 0, 0);\r\n            break;\r\n        case \"week\":\r\n            date = getFirstWeekDate(date, firstDayOfWeek || 0);\r\n            date.setHours(0, 0, 0, 0);\r\n            break;\r\n        case \"quarter\":\r\n            firstQuarterMonth = getFirstQuarterMonth(date.getMonth());\r\n            month = date.getMonth();\r\n            date.setDate(1);\r\n            date.setHours(0, 0, 0, 0);\r\n            if (month !== firstQuarterMonth) {\r\n                date.setMonth(firstQuarterMonth)\r\n            }\r\n    }\r\n    if (withCorrection && \"hour\" !== dateUnitInterval && \"minute\" !== dateUnitInterval && \"second\" !== dateUnitInterval) {\r\n        fixTimezoneGap(oldDate, date)\r\n    }\r\n    return date\r\n}\r\n\r\nfunction trimTime(date) {\r\n    return correctDateWithUnitBeginning(date, \"day\")\r\n}\r\nconst setToDayEnd = function(date) {\r\n    const result = trimTime(date);\r\n    result.setDate(result.getDate() + 1);\r\n    return new Date(result.getTime() - 1)\r\n};\r\nconst getDatesDifferences = function(date1, date2) {\r\n    let counter = 0;\r\n    const differences = {\r\n        year: date1.getFullYear() !== date2.getFullYear(),\r\n        month: date1.getMonth() !== date2.getMonth(),\r\n        day: date1.getDate() !== date2.getDate(),\r\n        hour: date1.getHours() !== date2.getHours(),\r\n        minute: date1.getMinutes() !== date2.getMinutes(),\r\n        second: date1.getSeconds() !== date2.getSeconds(),\r\n        millisecond: date1.getMilliseconds() !== date2.getMilliseconds()\r\n    };\r\n    each(differences, (function(key, value) {\r\n        if (value) {\r\n            counter++\r\n        }\r\n    }));\r\n    if (0 === counter && 0 !== getTimezonesDifference(date1, date2)) {\r\n        differences.hour = true;\r\n        counter++\r\n    }\r\n    differences.count = counter;\r\n    return differences\r\n};\r\n\r\nfunction addDateInterval(value, interval, dir) {\r\n    const result = new Date(value.getTime());\r\n    const intervalObject = isString(interval) ? getDateIntervalByString(interval.toLowerCase()) : isNumeric(interval) ? convertMillisecondsToDateUnits(interval) : interval;\r\n    if (intervalObject.years) {\r\n        result.setFullYear(result.getFullYear() + intervalObject.years * dir)\r\n    }\r\n    if (intervalObject.quarters) {\r\n        result.setMonth(result.getMonth() + 3 * intervalObject.quarters * dir)\r\n    }\r\n    if (intervalObject.months) {\r\n        result.setMonth(result.getMonth() + intervalObject.months * dir)\r\n    }\r\n    if (intervalObject.weeks) {\r\n        result.setDate(result.getDate() + 7 * intervalObject.weeks * dir)\r\n    }\r\n    if (intervalObject.days) {\r\n        result.setDate(result.getDate() + intervalObject.days * dir)\r\n    }\r\n    if (intervalObject.hours) {\r\n        result.setTime(result.getTime() + 36e5 * intervalObject.hours * dir)\r\n    }\r\n    if (intervalObject.minutes) {\r\n        result.setTime(result.getTime() + 6e4 * intervalObject.minutes * dir)\r\n    }\r\n    if (intervalObject.seconds) {\r\n        result.setTime(result.getTime() + 1e3 * intervalObject.seconds * dir)\r\n    }\r\n    if (intervalObject.milliseconds) {\r\n        result.setTime(result.getTime() + intervalObject.milliseconds * dir)\r\n    }\r\n    return result\r\n}\r\nconst addInterval = function(value, interval, isNegative) {\r\n    const dir = isNegative ? -1 : 1;\r\n    return isDate(value) ? addDateInterval(value, interval, dir) : adjust(value + interval * dir, interval)\r\n};\r\nconst getSequenceByInterval = function(min, max, interval) {\r\n    const intervals = [];\r\n    let cur;\r\n    intervals.push(isDate(min) ? new Date(min.getTime()) : min);\r\n    cur = min;\r\n    while (cur < max) {\r\n        cur = addInterval(cur, interval);\r\n        intervals.push(cur)\r\n    }\r\n    return intervals\r\n};\r\nconst getViewFirstCellDate = function(viewType, date) {\r\n    if (\"month\" === viewType) {\r\n        return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1)\r\n    }\r\n    if (\"year\" === viewType) {\r\n        return createDateWithFullYear(date.getFullYear(), 0, date.getDate())\r\n    }\r\n    if (\"decade\" === viewType) {\r\n        return createDateWithFullYear(getFirstYearInDecade(date), date.getMonth(), date.getDate())\r\n    }\r\n    if (\"century\" === viewType) {\r\n        return createDateWithFullYear(getFirstDecadeInCentury(date), date.getMonth(), date.getDate())\r\n    }\r\n};\r\nconst getViewLastCellDate = function(viewType, date) {\r\n    if (\"month\" === viewType) {\r\n        return createDateWithFullYear(date.getFullYear(), date.getMonth(), getLastMonthDay(date))\r\n    }\r\n    if (\"year\" === viewType) {\r\n        return createDateWithFullYear(date.getFullYear(), 11, date.getDate())\r\n    }\r\n    if (\"decade\" === viewType) {\r\n        return createDateWithFullYear(getFirstYearInDecade(date) + 9, date.getMonth(), date.getDate())\r\n    }\r\n    if (\"century\" === viewType) {\r\n        return createDateWithFullYear(getFirstDecadeInCentury(date) + 90, date.getMonth(), date.getDate())\r\n    }\r\n};\r\nconst getViewMinBoundaryDate = function(viewType, date) {\r\n    const resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);\r\n    if (\"month\" === viewType) {\r\n        return resultDate\r\n    }\r\n    resultDate.setMonth(0);\r\n    if (\"year\" === viewType) {\r\n        return resultDate\r\n    }\r\n    if (\"decade\" === viewType) {\r\n        resultDate.setFullYear(getFirstYearInDecade(date))\r\n    }\r\n    if (\"century\" === viewType) {\r\n        resultDate.setFullYear(getFirstDecadeInCentury(date))\r\n    }\r\n    return resultDate\r\n};\r\nconst getViewMaxBoundaryDate = function(viewType, date) {\r\n    const resultDate = new Date(date);\r\n    resultDate.setDate(getLastMonthDay(date));\r\n    if (\"month\" === viewType) {\r\n        return resultDate\r\n    }\r\n    resultDate.setMonth(11);\r\n    resultDate.setDate(getLastMonthDay(resultDate));\r\n    if (\"year\" === viewType) {\r\n        return resultDate\r\n    }\r\n    if (\"decade\" === viewType) {\r\n        resultDate.setFullYear(getFirstYearInDecade(date) + 9)\r\n    }\r\n    if (\"century\" === viewType) {\r\n        resultDate.setFullYear(getFirstDecadeInCentury(date) + 99)\r\n    }\r\n    return resultDate\r\n};\r\n\r\nfunction getLastMonthDay(date) {\r\n    const resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);\r\n    return resultDate.getDate()\r\n}\r\nconst getViewUp = function(typeView) {\r\n    switch (typeView) {\r\n        case \"month\":\r\n            return \"year\";\r\n        case \"year\":\r\n            return \"decade\";\r\n        case \"decade\":\r\n            return \"century\"\r\n    }\r\n};\r\nconst getViewDown = function(typeView) {\r\n    switch (typeView) {\r\n        case \"century\":\r\n            return \"decade\";\r\n        case \"decade\":\r\n            return \"year\";\r\n        case \"year\":\r\n            return \"month\"\r\n    }\r\n};\r\nconst getDifferenceInMonth = function(typeView) {\r\n    let difference = 1;\r\n    if (\"year\" === typeView) {\r\n        difference = 12\r\n    }\r\n    if (\"decade\" === typeView) {\r\n        difference = 120\r\n    }\r\n    if (\"century\" === typeView) {\r\n        difference = 1200\r\n    }\r\n    return difference\r\n};\r\nconst getDifferenceInMonthForCells = function(typeView) {\r\n    let difference = 1;\r\n    if (\"decade\" === typeView) {\r\n        difference = 12\r\n    }\r\n    if (\"century\" === typeView) {\r\n        difference = 120\r\n    }\r\n    return difference\r\n};\r\n\r\nfunction getDateIntervalByString(intervalString) {\r\n    const result = {};\r\n    switch (intervalString) {\r\n        case \"year\":\r\n            result.years = 1;\r\n            break;\r\n        case \"month\":\r\n            result.months = 1;\r\n            break;\r\n        case \"quarter\":\r\n            result.months = 3;\r\n            break;\r\n        case \"week\":\r\n            result.weeks = 1;\r\n            break;\r\n        case \"day\":\r\n            result.days = 1;\r\n            break;\r\n        case \"hour\":\r\n            result.hours = 1;\r\n            break;\r\n        case \"minute\":\r\n            result.minutes = 1;\r\n            break;\r\n        case \"second\":\r\n            result.seconds = 1;\r\n            break;\r\n        case \"millisecond\":\r\n            result.milliseconds = 1\r\n    }\r\n    return result\r\n}\r\n\r\nfunction sameDate(date1, date2) {\r\n    return sameMonthAndYear(date1, date2) && date1.getDate() === date2.getDate()\r\n}\r\n\r\nfunction sameMonthAndYear(date1, date2) {\r\n    return sameYear(date1, date2) && date1.getMonth() === date2.getMonth()\r\n}\r\n\r\nfunction sameYear(date1, date2) {\r\n    return date1 && date2 && date1.getFullYear() === date2.getFullYear()\r\n}\r\n\r\nfunction sameHoursAndMinutes(date1, date2) {\r\n    return date1 && date2 && date1.getHours() === date2.getHours() && date1.getMinutes() === date2.getMinutes()\r\n}\r\nconst sameDecade = function(date1, date2) {\r\n    if (!isDefined(date1) || !isDefined(date2)) {\r\n        return\r\n    }\r\n    const startDecadeDate1 = date1.getFullYear() - date1.getFullYear() % 10;\r\n    const startDecadeDate2 = date2.getFullYear() - date2.getFullYear() % 10;\r\n    return date1 && date2 && startDecadeDate1 === startDecadeDate2\r\n};\r\nconst sameCentury = function(date1, date2) {\r\n    if (!isDefined(date1) || !isDefined(date2)) {\r\n        return\r\n    }\r\n    const startCenturyDate1 = date1.getFullYear() - date1.getFullYear() % 100;\r\n    const startCenturyDate2 = date2.getFullYear() - date2.getFullYear() % 100;\r\n    return date1 && date2 && startCenturyDate1 === startCenturyDate2\r\n};\r\nconst sameDatesArrays = (arr1, arr2) => {\r\n    if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length) {\r\n        return false\r\n    }\r\n    return arr1.every(((date1, index) => {\r\n        const date2 = arr2[index];\r\n        if ([date1, date2].some((date => null !== date && !(date instanceof Date)))) {\r\n            return false\r\n        }\r\n        if (date1 instanceof Date && date2 instanceof Date) {\r\n            return sameDate(date1, date2)\r\n        }\r\n        return date1 === date2\r\n    }))\r\n};\r\n\r\nfunction getFirstDecadeInCentury(date) {\r\n    return date && date.getFullYear() - date.getFullYear() % 100\r\n}\r\n\r\nfunction getFirstYearInDecade(date) {\r\n    return date && date.getFullYear() - date.getFullYear() % 10\r\n}\r\nconst getShortDateFormat = function() {\r\n    return \"yyyy/MM/dd\"\r\n};\r\nconst getFirstMonthDate = function(date) {\r\n    let offset = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n    if (!isDefined(date)) {\r\n        return\r\n    }\r\n    const currentDate = new Date(date.getTime());\r\n    const month = currentDate.getMonth() + offset;\r\n    currentDate.setMonth(month);\r\n    return createDateWithFullYear(currentDate.getFullYear(), month, 1)\r\n};\r\nconst getLastMonthDate = function(date) {\r\n    let offset = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n    if (!isDefined(date)) {\r\n        return\r\n    }\r\n    const currentDate = new Date(date.getTime());\r\n    const month = currentDate.getMonth() + offset;\r\n    currentDate.setMonth(month);\r\n    return createDateWithFullYear(currentDate.getFullYear(), month + 1, 0)\r\n};\r\n\r\nfunction getFirstWeekDate(date, firstDayOfWeek) {\r\n    const delta = (date.getDay() - firstDayOfWeek + 7) % 7;\r\n    const result = new Date(date);\r\n    result.setDate(date.getDate() - delta);\r\n    return result\r\n}\r\n\r\nfunction getUTCTime(date) {\r\n    return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\r\n}\r\n\r\nfunction getDayNumber(date) {\r\n    const ms = getUTCTime(date) - getUTCTime(getFirstDateInYear(date.getFullYear()));\r\n    return 1 + Math.floor(ms / toMilliseconds(\"day\"))\r\n}\r\n\r\nfunction getFirstDateInYear(year) {\r\n    return new Date(year, 0, 1)\r\n}\r\n\r\nfunction getLastDateInYear(year) {\r\n    return new Date(year, 11, 31)\r\n}\r\n\r\nfunction getDayWeekNumber(date, firstDayOfWeek) {\r\n    let day = date.getDay() - firstDayOfWeek + 1;\r\n    if (day <= 0) {\r\n        day += 7\r\n    }\r\n    return day\r\n}\r\n\r\nfunction getWeekNumber(date, firstDayOfWeek, rule) {\r\n    const firstWeekDayInYear = getDayWeekNumber(getFirstDateInYear(date.getFullYear()), firstDayOfWeek);\r\n    const lastWeekDayInYear = getDayWeekNumber(getLastDateInYear(date.getFullYear()), firstDayOfWeek);\r\n    const daysInFirstWeek = 7 - firstWeekDayInYear + 1;\r\n    let weekNumber = Math.ceil((getDayNumber(date) - daysInFirstWeek) / 7);\r\n    switch (rule) {\r\n        case \"fullWeek\":\r\n            if (7 === daysInFirstWeek) {\r\n                weekNumber++\r\n            }\r\n            if (0 === weekNumber) {\r\n                const lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);\r\n                return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule)\r\n            }\r\n            return weekNumber;\r\n        case \"firstDay\": {\r\n            if (daysInFirstWeek > 0) {\r\n                weekNumber++\r\n            }\r\n            const isSunday = 7 === firstWeekDayInYear || 7 === lastWeekDayInYear;\r\n            if (weekNumber > 52 && !isSunday || 54 === weekNumber) {\r\n                weekNumber = 1\r\n            }\r\n            return weekNumber\r\n        }\r\n        case \"firstFourDays\": {\r\n            if (daysInFirstWeek > 3) {\r\n                weekNumber++\r\n            }\r\n            const isThursday = 4 === firstWeekDayInYear || 4 === lastWeekDayInYear;\r\n            if (weekNumber > 52 && !isThursday) {\r\n                weekNumber = 1\r\n            }\r\n            if (0 === weekNumber) {\r\n                const lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);\r\n                return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule)\r\n            }\r\n            return weekNumber\r\n        }\r\n    }\r\n}\r\nconst normalizeDateByWeek = function(date, currentDate) {\r\n    const differenceInDays = dateUtils.getDatesInterval(date, currentDate, \"day\");\r\n    let resultDate = new Date(date);\r\n    if (differenceInDays >= 6) {\r\n        resultDate = new Date(resultDate.setDate(resultDate.getDate() + 7))\r\n    }\r\n    return resultDate\r\n};\r\nconst dateInRange = function(date, min, max, format) {\r\n    if (\"date\" === format) {\r\n        min = min && dateUtils.correctDateWithUnitBeginning(min, \"day\");\r\n        max = max && dateUtils.correctDateWithUnitBeginning(max, \"day\");\r\n        date = date && dateUtils.correctDateWithUnitBeginning(date, \"day\")\r\n    }\r\n    return normalizeDate(date, min, max) === date\r\n};\r\nconst intervalsOverlap = function(options) {\r\n    const {\r\n        firstMin: firstMin,\r\n        firstMax: firstMax,\r\n        secondMin: secondMin,\r\n        secondMax: secondMax\r\n    } = options;\r\n    return firstMin <= secondMin && secondMin <= firstMax || firstMin > secondMin && firstMin < secondMax || firstMin < secondMax && firstMax > secondMax\r\n};\r\nconst dateTimeFromDecimal = function(number) {\r\n    const hours = Math.floor(number);\r\n    const minutes = number % 1 * 60;\r\n    return {\r\n        hours: hours,\r\n        minutes: minutes\r\n    }\r\n};\r\nconst roundDateByStartDayHour = function(date, startDayHour) {\r\n    const startTime = this.dateTimeFromDecimal(startDayHour);\r\n    const result = new Date(date);\r\n    if (date.getHours() === startTime.hours && date.getMinutes() < startTime.minutes || date.getHours() < startTime.hours) {\r\n        result.setHours(startTime.hours, startTime.minutes, 0, 0)\r\n    }\r\n    return result\r\n};\r\n\r\nfunction normalizeDate(date, min, max) {\r\n    let normalizedDate = date;\r\n    if (!isDefined(date)) {\r\n        return date\r\n    }\r\n    if (isDefined(min) && date < min) {\r\n        normalizedDate = min\r\n    }\r\n    if (isDefined(max) && date > max) {\r\n        normalizedDate = max\r\n    }\r\n    return normalizedDate\r\n}\r\n\r\nfunction fixTimezoneGap(oldDate, newDate) {\r\n    if (!isDefined(oldDate)) {\r\n        return\r\n    }\r\n    const diff = newDate.getHours() - oldDate.getHours();\r\n    if (0 === diff) {\r\n        return\r\n    }\r\n    const sign = 1 === diff || -23 === diff ? -1 : 1;\r\n    const trial = new Date(newDate.getTime() + 36e5 * sign);\r\n    if (sign > 0 || trial.getDate() === newDate.getDate()) {\r\n        newDate.setTime(trial.getTime())\r\n    }\r\n}\r\nconst roundToHour = function(date) {\r\n    const result = new Date(date.getTime());\r\n    result.setHours(result.getHours() + 1);\r\n    result.setMinutes(0);\r\n    return result\r\n};\r\n\r\nfunction getTimezonesDifference(min, max) {\r\n    return 60 * (max.getTimezoneOffset() - min.getTimezoneOffset()) * 1e3\r\n}\r\nconst makeDate = function(date) {\r\n    return new Date(date)\r\n};\r\nconst getDatesOfInterval = function(startDate, endDate, step) {\r\n    const result = [];\r\n    let currentDate = new Date(startDate.getTime());\r\n    while (currentDate < endDate) {\r\n        result.push(new Date(currentDate.getTime()));\r\n        currentDate = this.addInterval(currentDate, step)\r\n    }\r\n    return result\r\n};\r\nconst createDateWithFullYear = function(year) {\r\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key]\r\n    }\r\n    const result = new Date(year, ...args);\r\n    result.setFullYear(year);\r\n    return result\r\n};\r\nconst getMachineTimezoneName = () => {\r\n    const hasIntl = \"undefined\" !== typeof Intl;\r\n    return hasIntl ? Intl.DateTimeFormat().resolvedOptions().timeZone : null\r\n};\r\nconst getRangesByDates = dates => {\r\n    const datesInMilliseconds = dates.map((value => correctDateWithUnitBeginning(value, \"day\").getTime()));\r\n    const sortedDates = datesInMilliseconds.sort(((a, b) => a - b));\r\n    const msInDay = toMilliseconds(\"day\");\r\n    const ranges = [];\r\n    let startDate = sortedDates[0];\r\n    for (let i = 1; i <= sortedDates.length; ++i) {\r\n        const nextDate = sortedDates[i];\r\n        const currentDate = sortedDates[i - 1];\r\n        const isNewRange = nextDate - currentDate > msInDay;\r\n        if (isNewRange || i === sortedDates.length) {\r\n            const range = startDate === sortedDates[i - 1] ? [startDate] : [startDate, sortedDates[i - 1]];\r\n            const serializedRange = range.map((value => dateSerialization.deserializeDate(value)));\r\n            ranges.push(serializedRange);\r\n            startDate = nextDate\r\n        }\r\n    }\r\n    return ranges\r\n};\r\nconst sameView = function(view, date1, date2) {\r\n    return dateUtils[camelize(`same ${view}`)](date1, date2)\r\n};\r\nconst dateUtils = {\r\n    dateUnitIntervals: dateUnitIntervals,\r\n    convertMillisecondsToDateUnits: convertMillisecondsToDateUnits,\r\n    dateToMilliseconds: dateToMilliseconds,\r\n    getNextDateUnit: getNextDateUnit,\r\n    convertDateUnitToMilliseconds: convertDateUnitToMilliseconds,\r\n    getDateUnitInterval: getDateUnitInterval,\r\n    getDateFormatByTickInterval: getDateFormatByTickInterval,\r\n    getDatesDifferences: getDatesDifferences,\r\n    correctDateWithUnitBeginning: correctDateWithUnitBeginning,\r\n    trimTime: trimTime,\r\n    setToDayEnd: setToDayEnd,\r\n    roundDateByStartDayHour: roundDateByStartDayHour,\r\n    dateTimeFromDecimal: dateTimeFromDecimal,\r\n    addDateInterval: addDateInterval,\r\n    addInterval: addInterval,\r\n    getSequenceByInterval: getSequenceByInterval,\r\n    getDateIntervalByString: getDateIntervalByString,\r\n    sameHoursAndMinutes: sameHoursAndMinutes,\r\n    sameDate: sameDate,\r\n    sameMonthAndYear: sameMonthAndYear,\r\n    sameMonth: sameMonthAndYear,\r\n    sameYear: sameYear,\r\n    sameDecade: sameDecade,\r\n    sameCentury: sameCentury,\r\n    sameView: sameView,\r\n    sameDatesArrays: sameDatesArrays,\r\n    getDifferenceInMonth: getDifferenceInMonth,\r\n    getDifferenceInMonthForCells: getDifferenceInMonthForCells,\r\n    getFirstYearInDecade: getFirstYearInDecade,\r\n    getFirstDecadeInCentury: getFirstDecadeInCentury,\r\n    getShortDateFormat: getShortDateFormat,\r\n    getViewFirstCellDate: getViewFirstCellDate,\r\n    getViewLastCellDate: getViewLastCellDate,\r\n    getViewDown: getViewDown,\r\n    getViewUp: getViewUp,\r\n    getLastMonthDay: getLastMonthDay,\r\n    getLastMonthDate: getLastMonthDate,\r\n    getFirstMonthDate: getFirstMonthDate,\r\n    getFirstWeekDate: getFirstWeekDate,\r\n    getWeekNumber: getWeekNumber,\r\n    normalizeDateByWeek: normalizeDateByWeek,\r\n    getQuarter: getQuarter,\r\n    getFirstQuarterMonth: getFirstQuarterMonth,\r\n    dateInRange: dateInRange,\r\n    intervalsOverlap: intervalsOverlap,\r\n    roundToHour: roundToHour,\r\n    normalizeDate: normalizeDate,\r\n    getViewMinBoundaryDate: getViewMinBoundaryDate,\r\n    getViewMaxBoundaryDate: getViewMaxBoundaryDate,\r\n    fixTimezoneGap: fixTimezoneGap,\r\n    getTimezonesDifference: getTimezonesDifference,\r\n    makeDate: makeDate,\r\n    getDatesInterval: getDatesInterval,\r\n    getDatesOfInterval: getDatesOfInterval,\r\n    createDateWithFullYear: createDateWithFullYear,\r\n    getMachineTimezoneName: getMachineTimezoneName,\r\n    getRangesByDates: getRangesByDates\r\n};\r\nexport {\r\n    dateUtils\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,iBAAiB,MAAM,wCAAwC;AACtE,SACIC,QAAQ,QACL,+BAA+B;AACtC,SACIC,IAAI,QACD,8BAA8B;AACrC,SACIC,MAAM,QACH,0BAA0B;AACjC,SACIC,MAAM,EACNC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,QAAQ,QACL,0BAA0B;AACjC,SACIC,cAAc,QACX,4BAA4B;AACnC,MAAMC,YAAY,GAAG,CAAC;AACtB,MAAMC,oBAAoB,GAAG,CAAC;AAC9B,MAAMC,kBAAkB,GAAG,CAAC;AAC5B,MAAMC,wBAAwB,GAAG,EAAE;AACnC,MAAMC,iBAAiB,GAAG,CAAC,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;AAChH,MAAMC,gBAAgB,GAAG,SAAAA,CAASC,SAAS,EAAEC,OAAO,EAAEC,YAAY,EAAE;EAChE,MAAMC,KAAK,GAAGF,OAAO,CAACG,OAAO,CAAC,CAAC,GAAGJ,SAAS,CAACI,OAAO,CAAC,CAAC;EACrD,MAAMC,gBAAgB,GAAGZ,cAAc,CAACS,YAAY,CAAC,IAAI,CAAC;EAC1D,OAAOI,IAAI,CAACC,KAAK,CAACJ,KAAK,GAAGE,gBAAgB,CAAC;AAC/C,CAAC;AACD,MAAMG,eAAe,GAAG,SAAAA,CAASC,IAAI,EAAEC,SAAS,EAAE;EAC9C,MAAMC,QAAQ,GAAGC,mBAAmB,CAACH,IAAI,CAAC;EAC1C,QAAQE,QAAQ;IACZ,KAAK,aAAa;MACd,OAAO,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAO,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAO,MAAM;IACjB,KAAK,MAAM;MACP,OAAO,KAAK;IAChB,KAAK,KAAK;MACN,OAAOD,SAAS,GAAG,MAAM,GAAG,OAAO;IACvC,KAAK,MAAM;MACP,OAAO,OAAO;IAClB,KAAK,OAAO;MACR,OAAO,SAAS;IACpB,KAAK,SAAS;IACd,KAAK,MAAM;MACP,OAAO,MAAM;IACjB;MACI,OAAO,CAAC;EAChB;AACJ,CAAC;AACD,MAAMG,8BAA8B,GAAG,SAAAA,CAASC,KAAK,EAAE;EACnD,IAAIC,CAAC;EACL,IAAIC,aAAa;EACjB,IAAIC,gBAAgB;EACpB,MAAMnB,iBAAiB,GAAG,CAAC,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;EAC7F,MAAMoB,MAAM,GAAG,CAAC,CAAC;EACjB,KAAKH,CAAC,GAAGjB,iBAAiB,CAACqB,MAAM,GAAG,CAAC,EAAEJ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAChDE,gBAAgB,GAAGnB,iBAAiB,CAACiB,CAAC,CAAC;IACvCC,aAAa,GAAGV,IAAI,CAACC,KAAK,CAACO,KAAK,GAAGrB,cAAc,CAACwB,gBAAgB,CAAC,CAAC;IACpE,IAAID,aAAa,GAAG,CAAC,EAAE;MACnBE,MAAM,CAAC,GAAGD,gBAAgB,GAAG,CAAC,GAAGD,aAAa;MAC9CF,KAAK,IAAIM,6BAA6B,CAACH,gBAAgB,EAAED,aAAa,CAAC;IAC3E;EACJ;EACA,OAAOE,MAAM;AACjB,CAAC;AACD,MAAMG,kBAAkB,GAAG,SAAAA,CAASC,YAAY,EAAE;EAC9C,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIhC,QAAQ,CAAC+B,YAAY,CAAC,EAAE;IACxBpC,IAAI,CAACoC,YAAY,EAAG,UAASE,GAAG,EAAEV,KAAK,EAAE;MACrCS,YAAY,IAAIH,6BAA6B,CAACI,GAAG,CAACC,MAAM,CAAC,CAAC,EAAED,GAAG,CAACL,MAAM,GAAG,CAAC,CAAC,EAAEL,KAAK,CAAC;IACvF,CAAE,CAAC;EACP;EACA,IAAItB,QAAQ,CAAC8B,YAAY,CAAC,EAAE;IACxBC,YAAY,GAAGH,6BAA6B,CAACE,YAAY,EAAE,CAAC,CAAC;EACjE;EACA,OAAOC,YAAY;AACvB,CAAC;AAED,SAASH,6BAA6BA,CAACM,QAAQ,EAAEC,KAAK,EAAE;EACpD,OAAOlC,cAAc,CAACiC,QAAQ,CAAC,GAAGC,KAAK;AAC3C;AAEA,SAASf,mBAAmBA,CAACU,YAAY,EAAE;EACvC,IAAIM,WAAW,GAAG,CAAC,CAAC;EACpB,IAAIb,CAAC;EACL,IAAIvB,QAAQ,CAAC8B,YAAY,CAAC,EAAE;IACxB,OAAOA,YAAY;EACvB;EACA,IAAI/B,QAAQ,CAAC+B,YAAY,CAAC,EAAE;IACxBpC,IAAI,CAACoC,YAAY,EAAG,UAASE,GAAG,EAAEV,KAAK,EAAE;MACrC,KAAKC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,iBAAiB,CAACqB,MAAM,EAAEJ,CAAC,EAAE,EAAE;QAC3C,IAAID,KAAK,KAAKU,GAAG,KAAK,GAAG1B,iBAAiB,CAACiB,CAAC,CAAC,GAAG,IAAIS,GAAG,KAAK1B,iBAAiB,CAACiB,CAAC,CAAC,CAAC,IAAIa,WAAW,GAAGb,CAAC,EAAE;UAClGa,WAAW,GAAGb,CAAC;QACnB;MACJ;IACJ,CAAE,CAAC;IACH,OAAOjB,iBAAiB,CAAC8B,WAAW,CAAC;EACzC;EACA,OAAO,EAAE;AACb;AACA,MAAMC,uBAAuB,GAAG;EAC5BC,WAAW,EAAE,aAAa;EAC1BC,MAAM,EAAE,UAAU;EAClBC,MAAM,EAAE,WAAW;EACnBC,IAAI,EAAE,WAAW;EACjBC,GAAG,EAAE,KAAK;EACVC,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,SAAS;EAClBC,IAAI,EAAE;AACV,CAAC;AAED,SAASC,2BAA2BA,CAACjB,YAAY,EAAE;EAC/C,OAAOO,uBAAuB,CAACjB,mBAAmB,CAACU,YAAY,CAAC,CAAC,IAAI,EAAE;AAC3E;AACA,MAAMkB,UAAU,GAAG,SAAAA,CAASJ,KAAK,EAAE;EAC/B,OAAO9B,IAAI,CAACC,KAAK,CAAC6B,KAAK,GAAG,CAAC,CAAC;AAChC,CAAC;AACD,MAAMK,oBAAoB,GAAG,SAAAA,CAASL,KAAK,EAAE;EACzC,OAAO,CAAC,GAAGI,UAAU,CAACJ,KAAK,CAAC;AAChC,CAAC;AAED,SAASM,4BAA4BA,CAACC,IAAI,EAAEC,YAAY,EAAEC,cAAc,EAAEC,cAAc,EAAE;EACtFH,IAAI,GAAG,IAAII,IAAI,CAACJ,IAAI,CAACvC,OAAO,CAAC,CAAC,CAAC;EAC/B,MAAM4C,OAAO,GAAG,IAAID,IAAI,CAACJ,IAAI,CAACvC,OAAO,CAAC,CAAC,CAAC;EACxC,IAAI6C,iBAAiB;EACrB,IAAIb,KAAK;EACT,MAAMnB,gBAAgB,GAAGL,mBAAmB,CAACgC,YAAY,CAAC;EAC1D,QAAQ3B,gBAAgB;IACpB,KAAK,QAAQ;MACT0B,IAAI,GAAG,IAAII,IAAI,CAAC,GAAG,GAAGzC,IAAI,CAACC,KAAK,CAACyC,OAAO,CAAC5C,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;MAC1D;IACJ,KAAK,QAAQ;MACTuC,IAAI,GAAG,IAAII,IAAI,CAAC,GAAG,GAAGzC,IAAI,CAACC,KAAK,CAACyC,OAAO,CAAC5C,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;MAC1D;IACJ,KAAK,MAAM;MACPuC,IAAI,GAAG,IAAII,IAAI,CAAC,IAAI,GAAGzC,IAAI,CAACC,KAAK,CAACyC,OAAO,CAAC5C,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;MAC5D;IACJ,KAAK,MAAM;MACPuC,IAAI,CAACO,QAAQ,CAAC,CAAC,CAAC;IACpB,KAAK,OAAO;MACRP,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC;IACnB,KAAK,KAAK;MACNR,IAAI,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzB;IACJ,KAAK,MAAM;MACPT,IAAI,GAAGU,gBAAgB,CAACV,IAAI,EAAEG,cAAc,IAAI,CAAC,CAAC;MAClDH,IAAI,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzB;IACJ,KAAK,SAAS;MACVH,iBAAiB,GAAGR,oBAAoB,CAACE,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC;MACzDlB,KAAK,GAAGO,IAAI,CAACW,QAAQ,CAAC,CAAC;MACvBX,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC;MACfR,IAAI,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzB,IAAIhB,KAAK,KAAKa,iBAAiB,EAAE;QAC7BN,IAAI,CAACO,QAAQ,CAACD,iBAAiB,CAAC;MACpC;EACR;EACA,IAAIJ,cAAc,IAAI,MAAM,KAAK5B,gBAAgB,IAAI,QAAQ,KAAKA,gBAAgB,IAAI,QAAQ,KAAKA,gBAAgB,EAAE;IACjHsC,cAAc,CAACP,OAAO,EAAEL,IAAI,CAAC;EACjC;EACA,OAAOA,IAAI;AACf;AAEA,SAASa,QAAQA,CAACb,IAAI,EAAE;EACpB,OAAOD,4BAA4B,CAACC,IAAI,EAAE,KAAK,CAAC;AACpD;AACA,MAAMc,WAAW,GAAG,SAAAA,CAASd,IAAI,EAAE;EAC/B,MAAMzB,MAAM,GAAGsC,QAAQ,CAACb,IAAI,CAAC;EAC7BzB,MAAM,CAACiC,OAAO,CAACjC,MAAM,CAACwC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EACpC,OAAO,IAAIX,IAAI,CAAC7B,MAAM,CAACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACzC,CAAC;AACD,MAAMuD,mBAAmB,GAAG,SAAAA,CAASC,KAAK,EAAEC,KAAK,EAAE;EAC/C,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMC,WAAW,GAAG;IAChBzB,IAAI,EAAEsB,KAAK,CAACI,WAAW,CAAC,CAAC,KAAKH,KAAK,CAACG,WAAW,CAAC,CAAC;IACjD5B,KAAK,EAAEwB,KAAK,CAACN,QAAQ,CAAC,CAAC,KAAKO,KAAK,CAACP,QAAQ,CAAC,CAAC;IAC5CpB,GAAG,EAAE0B,KAAK,CAACF,OAAO,CAAC,CAAC,KAAKG,KAAK,CAACH,OAAO,CAAC,CAAC;IACxCzB,IAAI,EAAE2B,KAAK,CAACK,QAAQ,CAAC,CAAC,KAAKJ,KAAK,CAACI,QAAQ,CAAC,CAAC;IAC3CjC,MAAM,EAAE4B,KAAK,CAACM,UAAU,CAAC,CAAC,KAAKL,KAAK,CAACK,UAAU,CAAC,CAAC;IACjDnC,MAAM,EAAE6B,KAAK,CAACO,UAAU,CAAC,CAAC,KAAKN,KAAK,CAACM,UAAU,CAAC,CAAC;IACjDrC,WAAW,EAAE8B,KAAK,CAACQ,eAAe,CAAC,CAAC,KAAKP,KAAK,CAACO,eAAe,CAAC;EACnE,CAAC;EACDlF,IAAI,CAAC6E,WAAW,EAAG,UAASvC,GAAG,EAAEV,KAAK,EAAE;IACpC,IAAIA,KAAK,EAAE;MACPgD,OAAO,EAAE;IACb;EACJ,CAAE,CAAC;EACH,IAAI,CAAC,KAAKA,OAAO,IAAI,CAAC,KAAKO,sBAAsB,CAACT,KAAK,EAAEC,KAAK,CAAC,EAAE;IAC7DE,WAAW,CAAC9B,IAAI,GAAG,IAAI;IACvB6B,OAAO,EAAE;EACb;EACAC,WAAW,CAACpC,KAAK,GAAGmC,OAAO;EAC3B,OAAOC,WAAW;AACtB,CAAC;AAED,SAASO,eAAeA,CAACxD,KAAK,EAAEH,QAAQ,EAAE4D,GAAG,EAAE;EAC3C,MAAMrD,MAAM,GAAG,IAAI6B,IAAI,CAACjC,KAAK,CAACV,OAAO,CAAC,CAAC,CAAC;EACxC,MAAMoE,cAAc,GAAGhF,QAAQ,CAACmB,QAAQ,CAAC,GAAG8D,uBAAuB,CAAC9D,QAAQ,CAAC+D,WAAW,CAAC,CAAC,CAAC,GAAGpF,SAAS,CAACqB,QAAQ,CAAC,GAAGE,8BAA8B,CAACF,QAAQ,CAAC,GAAGA,QAAQ;EACvK,IAAI6D,cAAc,CAACG,KAAK,EAAE;IACtBzD,MAAM,CAAC0D,WAAW,CAAC1D,MAAM,CAAC8C,WAAW,CAAC,CAAC,GAAGQ,cAAc,CAACG,KAAK,GAAGJ,GAAG,CAAC;EACzE;EACA,IAAIC,cAAc,CAACK,QAAQ,EAAE;IACzB3D,MAAM,CAACgC,QAAQ,CAAChC,MAAM,CAACoC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAGkB,cAAc,CAACK,QAAQ,GAAGN,GAAG,CAAC;EAC1E;EACA,IAAIC,cAAc,CAACM,MAAM,EAAE;IACvB5D,MAAM,CAACgC,QAAQ,CAAChC,MAAM,CAACoC,QAAQ,CAAC,CAAC,GAAGkB,cAAc,CAACM,MAAM,GAAGP,GAAG,CAAC;EACpE;EACA,IAAIC,cAAc,CAACO,KAAK,EAAE;IACtB7D,MAAM,CAACiC,OAAO,CAACjC,MAAM,CAACwC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAGc,cAAc,CAACO,KAAK,GAAGR,GAAG,CAAC;EACrE;EACA,IAAIC,cAAc,CAACQ,IAAI,EAAE;IACrB9D,MAAM,CAACiC,OAAO,CAACjC,MAAM,CAACwC,OAAO,CAAC,CAAC,GAAGc,cAAc,CAACQ,IAAI,GAAGT,GAAG,CAAC;EAChE;EACA,IAAIC,cAAc,CAACS,KAAK,EAAE;IACtB/D,MAAM,CAACgE,OAAO,CAAChE,MAAM,CAACd,OAAO,CAAC,CAAC,GAAG,IAAI,GAAGoE,cAAc,CAACS,KAAK,GAAGV,GAAG,CAAC;EACxE;EACA,IAAIC,cAAc,CAACW,OAAO,EAAE;IACxBjE,MAAM,CAACgE,OAAO,CAAChE,MAAM,CAACd,OAAO,CAAC,CAAC,GAAG,GAAG,GAAGoE,cAAc,CAACW,OAAO,GAAGZ,GAAG,CAAC;EACzE;EACA,IAAIC,cAAc,CAACY,OAAO,EAAE;IACxBlE,MAAM,CAACgE,OAAO,CAAChE,MAAM,CAACd,OAAO,CAAC,CAAC,GAAG,GAAG,GAAGoE,cAAc,CAACY,OAAO,GAAGb,GAAG,CAAC;EACzE;EACA,IAAIC,cAAc,CAACjD,YAAY,EAAE;IAC7BL,MAAM,CAACgE,OAAO,CAAChE,MAAM,CAACd,OAAO,CAAC,CAAC,GAAGoE,cAAc,CAACjD,YAAY,GAAGgD,GAAG,CAAC;EACxE;EACA,OAAOrD,MAAM;AACjB;AACA,MAAMmE,WAAW,GAAG,SAAAA,CAASvE,KAAK,EAAEH,QAAQ,EAAE2E,UAAU,EAAE;EACtD,MAAMf,GAAG,GAAGe,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;EAC/B,OAAOlG,MAAM,CAAC0B,KAAK,CAAC,GAAGwD,eAAe,CAACxD,KAAK,EAAEH,QAAQ,EAAE4D,GAAG,CAAC,GAAGpF,MAAM,CAAC2B,KAAK,GAAGH,QAAQ,GAAG4D,GAAG,EAAE5D,QAAQ,CAAC;AAC3G,CAAC;AACD,MAAM4E,qBAAqB,GAAG,SAAAA,CAASC,GAAG,EAAEC,GAAG,EAAE9E,QAAQ,EAAE;EACvD,MAAM+E,SAAS,GAAG,EAAE;EACpB,IAAIC,GAAG;EACPD,SAAS,CAACE,IAAI,CAACxG,MAAM,CAACoG,GAAG,CAAC,GAAG,IAAIzC,IAAI,CAACyC,GAAG,CAACpF,OAAO,CAAC,CAAC,CAAC,GAAGoF,GAAG,CAAC;EAC3DG,GAAG,GAAGH,GAAG;EACT,OAAOG,GAAG,GAAGF,GAAG,EAAE;IACdE,GAAG,GAAGN,WAAW,CAACM,GAAG,EAAEhF,QAAQ,CAAC;IAChC+E,SAAS,CAACE,IAAI,CAACD,GAAG,CAAC;EACvB;EACA,OAAOD,SAAS;AACpB,CAAC;AACD,MAAMG,oBAAoB,GAAG,SAAAA,CAASC,QAAQ,EAAEnD,IAAI,EAAE;EAClD,IAAI,OAAO,KAAKmD,QAAQ,EAAE;IACtB,OAAOC,sBAAsB,CAACpD,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAErB,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EACzE;EACA,IAAI,MAAM,KAAKwC,QAAQ,EAAE;IACrB,OAAOC,sBAAsB,CAACpD,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAE,CAAC,EAAErB,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;EACxE;EACA,IAAI,QAAQ,KAAKoC,QAAQ,EAAE;IACvB,OAAOC,sBAAsB,CAACC,oBAAoB,CAACrD,IAAI,CAAC,EAAEA,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAEX,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;EAC9F;EACA,IAAI,SAAS,KAAKoC,QAAQ,EAAE;IACxB,OAAOC,sBAAsB,CAACE,uBAAuB,CAACtD,IAAI,CAAC,EAAEA,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAEX,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;EACjG;AACJ,CAAC;AACD,MAAMwC,mBAAmB,GAAG,SAAAA,CAASJ,QAAQ,EAAEnD,IAAI,EAAE;EACjD,IAAI,OAAO,KAAKmD,QAAQ,EAAE;IACtB,OAAOC,sBAAsB,CAACpD,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAErB,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAE6C,eAAe,CAACxD,IAAI,CAAC,CAAC;EAC7F;EACA,IAAI,MAAM,KAAKmD,QAAQ,EAAE;IACrB,OAAOC,sBAAsB,CAACpD,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAE,EAAE,EAAErB,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;EACzE;EACA,IAAI,QAAQ,KAAKoC,QAAQ,EAAE;IACvB,OAAOC,sBAAsB,CAACC,oBAAoB,CAACrD,IAAI,CAAC,GAAG,CAAC,EAAEA,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAEX,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;EAClG;EACA,IAAI,SAAS,KAAKoC,QAAQ,EAAE;IACxB,OAAOC,sBAAsB,CAACE,uBAAuB,CAACtD,IAAI,CAAC,GAAG,EAAE,EAAEA,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAEX,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;EACtG;AACJ,CAAC;AACD,MAAM0C,sBAAsB,GAAG,SAAAA,CAASN,QAAQ,EAAEnD,IAAI,EAAE;EACpD,MAAM0D,UAAU,GAAGN,sBAAsB,CAACpD,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAErB,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EACjF,IAAI,OAAO,KAAKwC,QAAQ,EAAE;IACtB,OAAOO,UAAU;EACrB;EACAA,UAAU,CAACnD,QAAQ,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,KAAK4C,QAAQ,EAAE;IACrB,OAAOO,UAAU;EACrB;EACA,IAAI,QAAQ,KAAKP,QAAQ,EAAE;IACvBO,UAAU,CAACzB,WAAW,CAACoB,oBAAoB,CAACrD,IAAI,CAAC,CAAC;EACtD;EACA,IAAI,SAAS,KAAKmD,QAAQ,EAAE;IACxBO,UAAU,CAACzB,WAAW,CAACqB,uBAAuB,CAACtD,IAAI,CAAC,CAAC;EACzD;EACA,OAAO0D,UAAU;AACrB,CAAC;AACD,MAAMC,sBAAsB,GAAG,SAAAA,CAASR,QAAQ,EAAEnD,IAAI,EAAE;EACpD,MAAM0D,UAAU,GAAG,IAAItD,IAAI,CAACJ,IAAI,CAAC;EACjC0D,UAAU,CAAClD,OAAO,CAACgD,eAAe,CAACxD,IAAI,CAAC,CAAC;EACzC,IAAI,OAAO,KAAKmD,QAAQ,EAAE;IACtB,OAAOO,UAAU;EACrB;EACAA,UAAU,CAACnD,QAAQ,CAAC,EAAE,CAAC;EACvBmD,UAAU,CAAClD,OAAO,CAACgD,eAAe,CAACE,UAAU,CAAC,CAAC;EAC/C,IAAI,MAAM,KAAKP,QAAQ,EAAE;IACrB,OAAOO,UAAU;EACrB;EACA,IAAI,QAAQ,KAAKP,QAAQ,EAAE;IACvBO,UAAU,CAACzB,WAAW,CAACoB,oBAAoB,CAACrD,IAAI,CAAC,GAAG,CAAC,CAAC;EAC1D;EACA,IAAI,SAAS,KAAKmD,QAAQ,EAAE;IACxBO,UAAU,CAACzB,WAAW,CAACqB,uBAAuB,CAACtD,IAAI,CAAC,GAAG,EAAE,CAAC;EAC9D;EACA,OAAO0D,UAAU;AACrB,CAAC;AAED,SAASF,eAAeA,CAACxD,IAAI,EAAE;EAC3B,MAAM0D,UAAU,GAAGN,sBAAsB,CAACpD,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAErB,IAAI,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;EACrF,OAAO+C,UAAU,CAAC3C,OAAO,CAAC,CAAC;AAC/B;AACA,MAAM6C,SAAS,GAAG,SAAAA,CAASC,QAAQ,EAAE;EACjC,QAAQA,QAAQ;IACZ,KAAK,OAAO;MACR,OAAO,MAAM;IACjB,KAAK,MAAM;MACP,OAAO,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAO,SAAS;EACxB;AACJ,CAAC;AACD,MAAMC,WAAW,GAAG,SAAAA,CAASD,QAAQ,EAAE;EACnC,QAAQA,QAAQ;IACZ,KAAK,SAAS;MACV,OAAO,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAO,MAAM;IACjB,KAAK,MAAM;MACP,OAAO,OAAO;EACtB;AACJ,CAAC;AACD,MAAME,oBAAoB,GAAG,SAAAA,CAASF,QAAQ,EAAE;EAC5C,IAAIG,UAAU,GAAG,CAAC;EAClB,IAAI,MAAM,KAAKH,QAAQ,EAAE;IACrBG,UAAU,GAAG,EAAE;EACnB;EACA,IAAI,QAAQ,KAAKH,QAAQ,EAAE;IACvBG,UAAU,GAAG,GAAG;EACpB;EACA,IAAI,SAAS,KAAKH,QAAQ,EAAE;IACxBG,UAAU,GAAG,IAAI;EACrB;EACA,OAAOA,UAAU;AACrB,CAAC;AACD,MAAMC,4BAA4B,GAAG,SAAAA,CAASJ,QAAQ,EAAE;EACpD,IAAIG,UAAU,GAAG,CAAC;EAClB,IAAI,QAAQ,KAAKH,QAAQ,EAAE;IACvBG,UAAU,GAAG,EAAE;EACnB;EACA,IAAI,SAAS,KAAKH,QAAQ,EAAE;IACxBG,UAAU,GAAG,GAAG;EACpB;EACA,OAAOA,UAAU;AACrB,CAAC;AAED,SAASlC,uBAAuBA,CAACoC,cAAc,EAAE;EAC7C,MAAM3F,MAAM,GAAG,CAAC,CAAC;EACjB,QAAQ2F,cAAc;IAClB,KAAK,MAAM;MACP3F,MAAM,CAACyD,KAAK,GAAG,CAAC;MAChB;IACJ,KAAK,OAAO;MACRzD,MAAM,CAAC4D,MAAM,GAAG,CAAC;MACjB;IACJ,KAAK,SAAS;MACV5D,MAAM,CAAC4D,MAAM,GAAG,CAAC;MACjB;IACJ,KAAK,MAAM;MACP5D,MAAM,CAAC6D,KAAK,GAAG,CAAC;MAChB;IACJ,KAAK,KAAK;MACN7D,MAAM,CAAC8D,IAAI,GAAG,CAAC;MACf;IACJ,KAAK,MAAM;MACP9D,MAAM,CAAC+D,KAAK,GAAG,CAAC;MAChB;IACJ,KAAK,QAAQ;MACT/D,MAAM,CAACiE,OAAO,GAAG,CAAC;MAClB;IACJ,KAAK,QAAQ;MACTjE,MAAM,CAACkE,OAAO,GAAG,CAAC;MAClB;IACJ,KAAK,aAAa;MACdlE,MAAM,CAACK,YAAY,GAAG,CAAC;EAC/B;EACA,OAAOL,MAAM;AACjB;AAEA,SAAS4F,QAAQA,CAAClD,KAAK,EAAEC,KAAK,EAAE;EAC5B,OAAOkD,gBAAgB,CAACnD,KAAK,EAAEC,KAAK,CAAC,IAAID,KAAK,CAACF,OAAO,CAAC,CAAC,KAAKG,KAAK,CAACH,OAAO,CAAC,CAAC;AAChF;AAEA,SAASqD,gBAAgBA,CAACnD,KAAK,EAAEC,KAAK,EAAE;EACpC,OAAOmD,QAAQ,CAACpD,KAAK,EAAEC,KAAK,CAAC,IAAID,KAAK,CAACN,QAAQ,CAAC,CAAC,KAAKO,KAAK,CAACP,QAAQ,CAAC,CAAC;AAC1E;AAEA,SAAS0D,QAAQA,CAACpD,KAAK,EAAEC,KAAK,EAAE;EAC5B,OAAOD,KAAK,IAAIC,KAAK,IAAID,KAAK,CAACI,WAAW,CAAC,CAAC,KAAKH,KAAK,CAACG,WAAW,CAAC,CAAC;AACxE;AAEA,SAASiD,mBAAmBA,CAACrD,KAAK,EAAEC,KAAK,EAAE;EACvC,OAAOD,KAAK,IAAIC,KAAK,IAAID,KAAK,CAACK,QAAQ,CAAC,CAAC,KAAKJ,KAAK,CAACI,QAAQ,CAAC,CAAC,IAAIL,KAAK,CAACM,UAAU,CAAC,CAAC,KAAKL,KAAK,CAACK,UAAU,CAAC,CAAC;AAC/G;AACA,MAAMgD,UAAU,GAAG,SAAAA,CAAStD,KAAK,EAAEC,KAAK,EAAE;EACtC,IAAI,CAACxE,SAAS,CAACuE,KAAK,CAAC,IAAI,CAACvE,SAAS,CAACwE,KAAK,CAAC,EAAE;IACxC;EACJ;EACA,MAAMsD,gBAAgB,GAAGvD,KAAK,CAACI,WAAW,CAAC,CAAC,GAAGJ,KAAK,CAACI,WAAW,CAAC,CAAC,GAAG,EAAE;EACvE,MAAMoD,gBAAgB,GAAGvD,KAAK,CAACG,WAAW,CAAC,CAAC,GAAGH,KAAK,CAACG,WAAW,CAAC,CAAC,GAAG,EAAE;EACvE,OAAOJ,KAAK,IAAIC,KAAK,IAAIsD,gBAAgB,KAAKC,gBAAgB;AAClE,CAAC;AACD,MAAMC,WAAW,GAAG,SAAAA,CAASzD,KAAK,EAAEC,KAAK,EAAE;EACvC,IAAI,CAACxE,SAAS,CAACuE,KAAK,CAAC,IAAI,CAACvE,SAAS,CAACwE,KAAK,CAAC,EAAE;IACxC;EACJ;EACA,MAAMyD,iBAAiB,GAAG1D,KAAK,CAACI,WAAW,CAAC,CAAC,GAAGJ,KAAK,CAACI,WAAW,CAAC,CAAC,GAAG,GAAG;EACzE,MAAMuD,iBAAiB,GAAG1D,KAAK,CAACG,WAAW,CAAC,CAAC,GAAGH,KAAK,CAACG,WAAW,CAAC,CAAC,GAAG,GAAG;EACzE,OAAOJ,KAAK,IAAIC,KAAK,IAAIyD,iBAAiB,KAAKC,iBAAiB;AACpE,CAAC;AACD,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EACpC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAI,CAACE,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,IAAID,IAAI,CAACtG,MAAM,KAAKuG,IAAI,CAACvG,MAAM,EAAE;IAC7E,OAAO,KAAK;EAChB;EACA,OAAOsG,IAAI,CAACI,KAAK,CAAE,CAACjE,KAAK,EAAEkE,KAAK,KAAK;IACjC,MAAMjE,KAAK,GAAG6D,IAAI,CAACI,KAAK,CAAC;IACzB,IAAI,CAAClE,KAAK,EAAEC,KAAK,CAAC,CAACkE,IAAI,CAAEpF,IAAI,IAAI,IAAI,KAAKA,IAAI,IAAI,EAAEA,IAAI,YAAYI,IAAI,CAAE,CAAC,EAAE;MACzE,OAAO,KAAK;IAChB;IACA,IAAIa,KAAK,YAAYb,IAAI,IAAIc,KAAK,YAAYd,IAAI,EAAE;MAChD,OAAO+D,QAAQ,CAAClD,KAAK,EAAEC,KAAK,CAAC;IACjC;IACA,OAAOD,KAAK,KAAKC,KAAK;EAC1B,CAAE,CAAC;AACP,CAAC;AAED,SAASoC,uBAAuBA,CAACtD,IAAI,EAAE;EACnC,OAAOA,IAAI,IAAIA,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAGrB,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAG,GAAG;AAChE;AAEA,SAASgC,oBAAoBA,CAACrD,IAAI,EAAE;EAChC,OAAOA,IAAI,IAAIA,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAGrB,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAG,EAAE;AAC/D;AACA,MAAMgE,kBAAkB,GAAG,SAAAA,CAAA,EAAW;EAClC,OAAO,YAAY;AACvB,CAAC;AACD,MAAMC,iBAAiB,GAAG,SAAAA,CAAStF,IAAI,EAAE;EACrC,IAAIuF,MAAM,GAAGC,SAAS,CAAChH,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAKgH,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/E,IAAI,CAAC9I,SAAS,CAACsD,IAAI,CAAC,EAAE;IAClB;EACJ;EACA,MAAMyF,WAAW,GAAG,IAAIrF,IAAI,CAACJ,IAAI,CAACvC,OAAO,CAAC,CAAC,CAAC;EAC5C,MAAMgC,KAAK,GAAGgG,WAAW,CAAC9E,QAAQ,CAAC,CAAC,GAAG4E,MAAM;EAC7CE,WAAW,CAAClF,QAAQ,CAACd,KAAK,CAAC;EAC3B,OAAO2D,sBAAsB,CAACqC,WAAW,CAACpE,WAAW,CAAC,CAAC,EAAE5B,KAAK,EAAE,CAAC,CAAC;AACtE,CAAC;AACD,MAAMiG,gBAAgB,GAAG,SAAAA,CAAS1F,IAAI,EAAE;EACpC,IAAIuF,MAAM,GAAGC,SAAS,CAAChH,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAKgH,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/E,IAAI,CAAC9I,SAAS,CAACsD,IAAI,CAAC,EAAE;IAClB;EACJ;EACA,MAAMyF,WAAW,GAAG,IAAIrF,IAAI,CAACJ,IAAI,CAACvC,OAAO,CAAC,CAAC,CAAC;EAC5C,MAAMgC,KAAK,GAAGgG,WAAW,CAAC9E,QAAQ,CAAC,CAAC,GAAG4E,MAAM;EAC7CE,WAAW,CAAClF,QAAQ,CAACd,KAAK,CAAC;EAC3B,OAAO2D,sBAAsB,CAACqC,WAAW,CAACpE,WAAW,CAAC,CAAC,EAAE5B,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;AAC1E,CAAC;AAED,SAASiB,gBAAgBA,CAACV,IAAI,EAAEG,cAAc,EAAE;EAC5C,MAAM3C,KAAK,GAAG,CAACwC,IAAI,CAAC2F,MAAM,CAAC,CAAC,GAAGxF,cAAc,GAAG,CAAC,IAAI,CAAC;EACtD,MAAM5B,MAAM,GAAG,IAAI6B,IAAI,CAACJ,IAAI,CAAC;EAC7BzB,MAAM,CAACiC,OAAO,CAACR,IAAI,CAACe,OAAO,CAAC,CAAC,GAAGvD,KAAK,CAAC;EACtC,OAAOe,MAAM;AACjB;AAEA,SAASqH,UAAUA,CAAC5F,IAAI,EAAE;EACtB,OAAOI,IAAI,CAACyF,GAAG,CAAC7F,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAErB,IAAI,CAACW,QAAQ,CAAC,CAAC,EAAEX,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC;AACxE;AAEA,SAAS+E,YAAYA,CAAC9F,IAAI,EAAE;EACxB,MAAM+F,EAAE,GAAGH,UAAU,CAAC5F,IAAI,CAAC,GAAG4F,UAAU,CAACI,kBAAkB,CAAChG,IAAI,CAACqB,WAAW,CAAC,CAAC,CAAC,CAAC;EAChF,OAAO,CAAC,GAAG1D,IAAI,CAACC,KAAK,CAACmI,EAAE,GAAGjJ,cAAc,CAAC,KAAK,CAAC,CAAC;AACrD;AAEA,SAASkJ,kBAAkBA,CAACrG,IAAI,EAAE;EAC9B,OAAO,IAAIS,IAAI,CAACT,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;AAC/B;AAEA,SAASsG,iBAAiBA,CAACtG,IAAI,EAAE;EAC7B,OAAO,IAAIS,IAAI,CAACT,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;AACjC;AAEA,SAASuG,gBAAgBA,CAAClG,IAAI,EAAEG,cAAc,EAAE;EAC5C,IAAIZ,GAAG,GAAGS,IAAI,CAAC2F,MAAM,CAAC,CAAC,GAAGxF,cAAc,GAAG,CAAC;EAC5C,IAAIZ,GAAG,IAAI,CAAC,EAAE;IACVA,GAAG,IAAI,CAAC;EACZ;EACA,OAAOA,GAAG;AACd;AAEA,SAAS4G,aAAaA,CAACnG,IAAI,EAAEG,cAAc,EAAEiG,IAAI,EAAE;EAC/C,MAAMC,kBAAkB,GAAGH,gBAAgB,CAACF,kBAAkB,CAAChG,IAAI,CAACqB,WAAW,CAAC,CAAC,CAAC,EAAElB,cAAc,CAAC;EACnG,MAAMmG,iBAAiB,GAAGJ,gBAAgB,CAACD,iBAAiB,CAACjG,IAAI,CAACqB,WAAW,CAAC,CAAC,CAAC,EAAElB,cAAc,CAAC;EACjG,MAAMoG,eAAe,GAAG,CAAC,GAAGF,kBAAkB,GAAG,CAAC;EAClD,IAAIG,UAAU,GAAG7I,IAAI,CAAC8I,IAAI,CAAC,CAACX,YAAY,CAAC9F,IAAI,CAAC,GAAGuG,eAAe,IAAI,CAAC,CAAC;EACtE,QAAQH,IAAI;IACR,KAAK,UAAU;MACX,IAAI,CAAC,KAAKG,eAAe,EAAE;QACvBC,UAAU,EAAE;MAChB;MACA,IAAI,CAAC,KAAKA,UAAU,EAAE;QAClB,MAAME,sBAAsB,GAAGT,iBAAiB,CAACjG,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;QACxE,OAAO8E,aAAa,CAACO,sBAAsB,EAAEvG,cAAc,EAAEiG,IAAI,CAAC;MACtE;MACA,OAAOI,UAAU;IACrB,KAAK,UAAU;MAAE;QACb,IAAID,eAAe,GAAG,CAAC,EAAE;UACrBC,UAAU,EAAE;QAChB;QACA,MAAMG,QAAQ,GAAG,CAAC,KAAKN,kBAAkB,IAAI,CAAC,KAAKC,iBAAiB;QACpE,IAAIE,UAAU,GAAG,EAAE,IAAI,CAACG,QAAQ,IAAI,EAAE,KAAKH,UAAU,EAAE;UACnDA,UAAU,GAAG,CAAC;QAClB;QACA,OAAOA,UAAU;MACrB;IACA,KAAK,eAAe;MAAE;QAClB,IAAID,eAAe,GAAG,CAAC,EAAE;UACrBC,UAAU,EAAE;QAChB;QACA,MAAMI,UAAU,GAAG,CAAC,KAAKP,kBAAkB,IAAI,CAAC,KAAKC,iBAAiB;QACtE,IAAIE,UAAU,GAAG,EAAE,IAAI,CAACI,UAAU,EAAE;UAChCJ,UAAU,GAAG,CAAC;QAClB;QACA,IAAI,CAAC,KAAKA,UAAU,EAAE;UAClB,MAAME,sBAAsB,GAAGT,iBAAiB,CAACjG,IAAI,CAACqB,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;UACxE,OAAO8E,aAAa,CAACO,sBAAsB,EAAEvG,cAAc,EAAEiG,IAAI,CAAC;QACtE;QACA,OAAOI,UAAU;MACrB;EACJ;AACJ;AACA,MAAMK,mBAAmB,GAAG,SAAAA,CAAS7G,IAAI,EAAEyF,WAAW,EAAE;EACpD,MAAMqB,gBAAgB,GAAGC,SAAS,CAAC3J,gBAAgB,CAAC4C,IAAI,EAAEyF,WAAW,EAAE,KAAK,CAAC;EAC7E,IAAI/B,UAAU,GAAG,IAAItD,IAAI,CAACJ,IAAI,CAAC;EAC/B,IAAI8G,gBAAgB,IAAI,CAAC,EAAE;IACvBpD,UAAU,GAAG,IAAItD,IAAI,CAACsD,UAAU,CAAClD,OAAO,CAACkD,UAAU,CAAC3C,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACvE;EACA,OAAO2C,UAAU;AACrB,CAAC;AACD,MAAMsD,WAAW,GAAG,SAAAA,CAAShH,IAAI,EAAE6C,GAAG,EAAEC,GAAG,EAAEmE,MAAM,EAAE;EACjD,IAAI,MAAM,KAAKA,MAAM,EAAE;IACnBpE,GAAG,GAAGA,GAAG,IAAIkE,SAAS,CAAChH,4BAA4B,CAAC8C,GAAG,EAAE,KAAK,CAAC;IAC/DC,GAAG,GAAGA,GAAG,IAAIiE,SAAS,CAAChH,4BAA4B,CAAC+C,GAAG,EAAE,KAAK,CAAC;IAC/D9C,IAAI,GAAGA,IAAI,IAAI+G,SAAS,CAAChH,4BAA4B,CAACC,IAAI,EAAE,KAAK,CAAC;EACtE;EACA,OAAOkH,aAAa,CAAClH,IAAI,EAAE6C,GAAG,EAAEC,GAAG,CAAC,KAAK9C,IAAI;AACjD,CAAC;AACD,MAAMmH,gBAAgB,GAAG,SAAAA,CAASC,OAAO,EAAE;EACvC,MAAM;IACFC,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEA,SAAS;IACpBC,SAAS,EAAEA;EACf,CAAC,GAAGJ,OAAO;EACX,OAAOC,QAAQ,IAAIE,SAAS,IAAIA,SAAS,IAAID,QAAQ,IAAID,QAAQ,GAAGE,SAAS,IAAIF,QAAQ,GAAGG,SAAS,IAAIH,QAAQ,GAAGG,SAAS,IAAIF,QAAQ,GAAGE,SAAS;AACzJ,CAAC;AACD,MAAMC,mBAAmB,GAAG,SAAAA,CAASC,MAAM,EAAE;EACzC,MAAMpF,KAAK,GAAG3E,IAAI,CAACC,KAAK,CAAC8J,MAAM,CAAC;EAChC,MAAMlF,OAAO,GAAGkF,MAAM,GAAG,CAAC,GAAG,EAAE;EAC/B,OAAO;IACHpF,KAAK,EAAEA,KAAK;IACZE,OAAO,EAAEA;EACb,CAAC;AACL,CAAC;AACD,MAAMmF,uBAAuB,GAAG,SAAAA,CAAS3H,IAAI,EAAE4H,YAAY,EAAE;EACzD,MAAMC,SAAS,GAAG,IAAI,CAACJ,mBAAmB,CAACG,YAAY,CAAC;EACxD,MAAMrJ,MAAM,GAAG,IAAI6B,IAAI,CAACJ,IAAI,CAAC;EAC7B,IAAIA,IAAI,CAACsB,QAAQ,CAAC,CAAC,KAAKuG,SAAS,CAACvF,KAAK,IAAItC,IAAI,CAACuB,UAAU,CAAC,CAAC,GAAGsG,SAAS,CAACrF,OAAO,IAAIxC,IAAI,CAACsB,QAAQ,CAAC,CAAC,GAAGuG,SAAS,CAACvF,KAAK,EAAE;IACnH/D,MAAM,CAACkC,QAAQ,CAACoH,SAAS,CAACvF,KAAK,EAAEuF,SAAS,CAACrF,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7D;EACA,OAAOjE,MAAM;AACjB,CAAC;AAED,SAAS2I,aAAaA,CAAClH,IAAI,EAAE6C,GAAG,EAAEC,GAAG,EAAE;EACnC,IAAIgF,cAAc,GAAG9H,IAAI;EACzB,IAAI,CAACtD,SAAS,CAACsD,IAAI,CAAC,EAAE;IAClB,OAAOA,IAAI;EACf;EACA,IAAItD,SAAS,CAACmG,GAAG,CAAC,IAAI7C,IAAI,GAAG6C,GAAG,EAAE;IAC9BiF,cAAc,GAAGjF,GAAG;EACxB;EACA,IAAInG,SAAS,CAACoG,GAAG,CAAC,IAAI9C,IAAI,GAAG8C,GAAG,EAAE;IAC9BgF,cAAc,GAAGhF,GAAG;EACxB;EACA,OAAOgF,cAAc;AACzB;AAEA,SAASlH,cAAcA,CAACP,OAAO,EAAE0H,OAAO,EAAE;EACtC,IAAI,CAACrL,SAAS,CAAC2D,OAAO,CAAC,EAAE;IACrB;EACJ;EACA,MAAM2H,IAAI,GAAGD,OAAO,CAACzG,QAAQ,CAAC,CAAC,GAAGjB,OAAO,CAACiB,QAAQ,CAAC,CAAC;EACpD,IAAI,CAAC,KAAK0G,IAAI,EAAE;IACZ;EACJ;EACA,MAAMC,IAAI,GAAG,CAAC,KAAKD,IAAI,IAAI,CAAC,EAAE,KAAKA,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;EAChD,MAAME,KAAK,GAAG,IAAI9H,IAAI,CAAC2H,OAAO,CAACtK,OAAO,CAAC,CAAC,GAAG,IAAI,GAAGwK,IAAI,CAAC;EACvD,IAAIA,IAAI,GAAG,CAAC,IAAIC,KAAK,CAACnH,OAAO,CAAC,CAAC,KAAKgH,OAAO,CAAChH,OAAO,CAAC,CAAC,EAAE;IACnDgH,OAAO,CAACxF,OAAO,CAAC2F,KAAK,CAACzK,OAAO,CAAC,CAAC,CAAC;EACpC;AACJ;AACA,MAAM0K,WAAW,GAAG,SAAAA,CAASnI,IAAI,EAAE;EAC/B,MAAMzB,MAAM,GAAG,IAAI6B,IAAI,CAACJ,IAAI,CAACvC,OAAO,CAAC,CAAC,CAAC;EACvCc,MAAM,CAACkC,QAAQ,CAAClC,MAAM,CAAC+C,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EACtC/C,MAAM,CAAC6J,UAAU,CAAC,CAAC,CAAC;EACpB,OAAO7J,MAAM;AACjB,CAAC;AAED,SAASmD,sBAAsBA,CAACmB,GAAG,EAAEC,GAAG,EAAE;EACtC,OAAO,EAAE,IAAIA,GAAG,CAACuF,iBAAiB,CAAC,CAAC,GAAGxF,GAAG,CAACwF,iBAAiB,CAAC,CAAC,CAAC,GAAG,GAAG;AACzE;AACA,MAAMC,QAAQ,GAAG,SAAAA,CAAStI,IAAI,EAAE;EAC5B,OAAO,IAAII,IAAI,CAACJ,IAAI,CAAC;AACzB,CAAC;AACD,MAAMuI,kBAAkB,GAAG,SAAAA,CAASlL,SAAS,EAAEC,OAAO,EAAEkL,IAAI,EAAE;EAC1D,MAAMjK,MAAM,GAAG,EAAE;EACjB,IAAIkH,WAAW,GAAG,IAAIrF,IAAI,CAAC/C,SAAS,CAACI,OAAO,CAAC,CAAC,CAAC;EAC/C,OAAOgI,WAAW,GAAGnI,OAAO,EAAE;IAC1BiB,MAAM,CAAC0E,IAAI,CAAC,IAAI7C,IAAI,CAACqF,WAAW,CAAChI,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5CgI,WAAW,GAAG,IAAI,CAAC/C,WAAW,CAAC+C,WAAW,EAAE+C,IAAI,CAAC;EACrD;EACA,OAAOjK,MAAM;AACjB,CAAC;AACD,MAAM6E,sBAAsB,GAAG,SAAAA,CAASzD,IAAI,EAAE;EAC1C,KAAK,IAAI8I,IAAI,GAAGjD,SAAS,CAAChH,MAAM,EAAEkK,IAAI,GAAG,IAAI1D,KAAK,CAACyD,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEE,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGF,IAAI,EAAEE,IAAI,EAAE,EAAE;IACxGD,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC,GAAGnD,SAAS,CAACmD,IAAI,CAAC;EACpC;EACA,MAAMpK,MAAM,GAAG,IAAI6B,IAAI,CAACT,IAAI,EAAE,GAAG+I,IAAI,CAAC;EACtCnK,MAAM,CAAC0D,WAAW,CAACtC,IAAI,CAAC;EACxB,OAAOpB,MAAM;AACjB,CAAC;AACD,MAAMqK,sBAAsB,GAAGA,CAAA,KAAM;EACjC,MAAMC,OAAO,GAAG,WAAW,KAAK,OAAOC,IAAI;EAC3C,OAAOD,OAAO,GAAGC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC,QAAQ,GAAG,IAAI;AAC5E,CAAC;AACD,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;EAC9B,MAAMC,mBAAmB,GAAGD,KAAK,CAACE,GAAG,CAAElL,KAAK,IAAI4B,4BAA4B,CAAC5B,KAAK,EAAE,KAAK,CAAC,CAACV,OAAO,CAAC,CAAE,CAAC;EACtG,MAAM6L,WAAW,GAAGF,mBAAmB,CAACG,IAAI,CAAE,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAE,CAAC;EAC/D,MAAMC,OAAO,GAAG5M,cAAc,CAAC,KAAK,CAAC;EACrC,MAAM6M,MAAM,GAAG,EAAE;EACjB,IAAItM,SAAS,GAAGiM,WAAW,CAAC,CAAC,CAAC;EAC9B,KAAK,IAAIlL,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIkL,WAAW,CAAC9K,MAAM,EAAE,EAAEJ,CAAC,EAAE;IAC1C,MAAMwL,QAAQ,GAAGN,WAAW,CAAClL,CAAC,CAAC;IAC/B,MAAMqH,WAAW,GAAG6D,WAAW,CAAClL,CAAC,GAAG,CAAC,CAAC;IACtC,MAAMyL,UAAU,GAAGD,QAAQ,GAAGnE,WAAW,GAAGiE,OAAO;IACnD,IAAIG,UAAU,IAAIzL,CAAC,KAAKkL,WAAW,CAAC9K,MAAM,EAAE;MACxC,MAAMsL,KAAK,GAAGzM,SAAS,KAAKiM,WAAW,CAAClL,CAAC,GAAG,CAAC,CAAC,GAAG,CAACf,SAAS,CAAC,GAAG,CAACA,SAAS,EAAEiM,WAAW,CAAClL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC9F,MAAM2L,eAAe,GAAGD,KAAK,CAACT,GAAG,CAAElL,KAAK,IAAI9B,iBAAiB,CAAC2N,eAAe,CAAC7L,KAAK,CAAE,CAAC;MACtFwL,MAAM,CAAC1G,IAAI,CAAC8G,eAAe,CAAC;MAC5B1M,SAAS,GAAGuM,QAAQ;IACxB;EACJ;EACA,OAAOD,MAAM;AACjB,CAAC;AACD,MAAMM,QAAQ,GAAG,SAAAA,CAASC,IAAI,EAAEjJ,KAAK,EAAEC,KAAK,EAAE;EAC1C,OAAO6F,SAAS,CAACzK,QAAQ,CAAC,QAAQ4N,IAAI,EAAE,CAAC,CAAC,CAACjJ,KAAK,EAAEC,KAAK,CAAC;AAC5D,CAAC;AACD,MAAM6F,SAAS,GAAG;EACd5J,iBAAiB,EAAEA,iBAAiB;EACpCe,8BAA8B,EAAEA,8BAA8B;EAC9DQ,kBAAkB,EAAEA,kBAAkB;EACtCb,eAAe,EAAEA,eAAe;EAChCY,6BAA6B,EAAEA,6BAA6B;EAC5DR,mBAAmB,EAAEA,mBAAmB;EACxC2B,2BAA2B,EAAEA,2BAA2B;EACxDoB,mBAAmB,EAAEA,mBAAmB;EACxCjB,4BAA4B,EAAEA,4BAA4B;EAC1Dc,QAAQ,EAAEA,QAAQ;EAClBC,WAAW,EAAEA,WAAW;EACxB6G,uBAAuB,EAAEA,uBAAuB;EAChDF,mBAAmB,EAAEA,mBAAmB;EACxC9F,eAAe,EAAEA,eAAe;EAChCe,WAAW,EAAEA,WAAW;EACxBE,qBAAqB,EAAEA,qBAAqB;EAC5Cd,uBAAuB,EAAEA,uBAAuB;EAChDwC,mBAAmB,EAAEA,mBAAmB;EACxCH,QAAQ,EAAEA,QAAQ;EAClBC,gBAAgB,EAAEA,gBAAgB;EAClC+F,SAAS,EAAE/F,gBAAgB;EAC3BC,QAAQ,EAAEA,QAAQ;EAClBE,UAAU,EAAEA,UAAU;EACtBG,WAAW,EAAEA,WAAW;EACxBuF,QAAQ,EAAEA,QAAQ;EAClBpF,eAAe,EAAEA,eAAe;EAChCd,oBAAoB,EAAEA,oBAAoB;EAC1CE,4BAA4B,EAAEA,4BAA4B;EAC1DZ,oBAAoB,EAAEA,oBAAoB;EAC1CC,uBAAuB,EAAEA,uBAAuB;EAChD+B,kBAAkB,EAAEA,kBAAkB;EACtCnC,oBAAoB,EAAEA,oBAAoB;EAC1CK,mBAAmB,EAAEA,mBAAmB;EACxCO,WAAW,EAAEA,WAAW;EACxBF,SAAS,EAAEA,SAAS;EACpBJ,eAAe,EAAEA,eAAe;EAChCkC,gBAAgB,EAAEA,gBAAgB;EAClCJ,iBAAiB,EAAEA,iBAAiB;EACpC5E,gBAAgB,EAAEA,gBAAgB;EAClCyF,aAAa,EAAEA,aAAa;EAC5BU,mBAAmB,EAAEA,mBAAmB;EACxChH,UAAU,EAAEA,UAAU;EACtBC,oBAAoB,EAAEA,oBAAoB;EAC1CkH,WAAW,EAAEA,WAAW;EACxBG,gBAAgB,EAAEA,gBAAgB;EAClCgB,WAAW,EAAEA,WAAW;EACxBjB,aAAa,EAAEA,aAAa;EAC5BzD,sBAAsB,EAAEA,sBAAsB;EAC9CE,sBAAsB,EAAEA,sBAAsB;EAC9C/C,cAAc,EAAEA,cAAc;EAC9Bc,sBAAsB,EAAEA,sBAAsB;EAC9C4G,QAAQ,EAAEA,QAAQ;EAClBlL,gBAAgB,EAAEA,gBAAgB;EAClCmL,kBAAkB,EAAEA,kBAAkB;EACtCnF,sBAAsB,EAAEA,sBAAsB;EAC9CwF,sBAAsB,EAAEA,sBAAsB;EAC9CM,gBAAgB,EAAEA;AACtB,CAAC;AACD,SACInC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}