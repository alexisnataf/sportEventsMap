{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.mask.parts.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getPatternSetters } from \"../../../common/core/localization/ldml/date.parser\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { fitIntoRange } from \"../../../core/utils/math\";\nconst monthGetter = date => date.getMonth() + 1;\nconst monthSetter = (date, value) => {\n  const day = date.getDate();\n  const monthLimits = getLimits(\"M\", date);\n  const newValue = fitIntoRange(parseInt(value), monthLimits.min, monthLimits.max);\n  date.setMonth(newValue - 1, 1);\n  const {\n    min: min,\n    max: max\n  } = getLimits(\"dM\", date);\n  const newDay = fitIntoRange(day, min, max);\n  date.setDate(newDay);\n};\nconst PATTERN_GETTERS = {\n  a: date => date.getHours() < 12 ? 0 : 1,\n  E: \"getDay\",\n  y: \"getFullYear\",\n  M: monthGetter,\n  L: monthGetter,\n  d: \"getDate\",\n  H: \"getHours\",\n  h: \"getHours\",\n  m: \"getMinutes\",\n  s: \"getSeconds\",\n  S: \"getMilliseconds\",\n  x: \"getTimezoneOffset\"\n};\nconst PATTERN_SETTERS = extend({}, getPatternSetters(), {\n  a: (date, value) => {\n    const hours = date.getHours();\n    const current = hours >= 12;\n    if (current === !!parseInt(value)) {\n      return;\n    }\n    date.setHours((hours + 12) % 24);\n  },\n  d: (date, value) => {\n    const lastDayInMonth = getLimits(\"dM\", date).max;\n    if (value > lastDayInMonth) {\n      date.setMonth(date.getMonth() + 1);\n    }\n    date.setDate(value);\n  },\n  h: (date, value) => {\n    const isPM = date.getHours() >= 12;\n    date.setHours(+value % 12 + (isPM ? 12 : 0));\n  },\n  M: monthSetter,\n  L: monthSetter,\n  E: (date, value) => {\n    if (value < 0) {\n      return;\n    }\n    date.setDate(date.getDate() - date.getDay() + parseInt(value));\n  },\n  y: (date, value) => {\n    const currentYear = date.getFullYear();\n    const valueLength = String(value).length;\n    const maxLimitLength = String(getLimits(\"y\", date).max).length;\n    const newValue = parseInt(String(currentYear).substr(0, maxLimitLength - valueLength) + value);\n    date.setFullYear(newValue);\n  },\n  x: date => date\n});\nconst getPatternGetter = patternChar => PATTERN_GETTERS[patternChar] || (() => patternChar);\nexport const renderDateParts = (text, regExpInfo) => {\n  const result = regExpInfo.regexp.exec(text);\n  let start = 0;\n  let end = 0;\n  const sections = [];\n  for (let i = 1; i < result.length; i++) {\n    start = end;\n    end = start + result[i].length;\n    const pattern = regExpInfo.patterns[i - 1].replace(/^'|'$/g, \"\");\n    const getter = getPatternGetter(pattern[0]);\n    sections.push({\n      index: i - 1,\n      isStub: pattern === result[i],\n      caret: {\n        start: start,\n        end: end\n      },\n      pattern: pattern,\n      text: result[i],\n      limits: function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return getLimits(pattern[0], ...args);\n      },\n      setter: PATTERN_SETTERS[pattern[0]] || noop,\n      getter: getter\n    });\n  }\n  return sections;\n};\nconst getLimits = (pattern, date, forcedPattern) => {\n  const limits = {\n    y: {\n      min: 0,\n      max: 9999\n    },\n    M: {\n      min: 1,\n      max: 12\n    },\n    L: {\n      min: 1,\n      max: 12\n    },\n    d: {\n      min: 1,\n      max: 31\n    },\n    dM: {\n      min: 1,\n      max: new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n    },\n    E: {\n      min: 0,\n      max: 6\n    },\n    H: {\n      min: 0,\n      max: 23\n    },\n    h: {\n      min: 1,\n      max: 12\n    },\n    m: {\n      min: 0,\n      max: 59\n    },\n    s: {\n      min: 0,\n      max: 59\n    },\n    S: {\n      min: 0,\n      max: 999\n    },\n    a: {\n      min: 0,\n      max: 1\n    },\n    x: {\n      min: 0,\n      max: 0\n    }\n  };\n  return limits[forcedPattern || pattern] || limits.getAmPm;\n};\nexport const getDatePartIndexByPosition = (dateParts, position) => {\n  for (let i = 0; i < dateParts.length; i++) {\n    const caretInGroup = dateParts[i].caret.end >= position;\n    if (!dateParts[i].isStub && caretInGroup) {\n      return i;\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["getPatternSetters","noop","extend","fitIntoRange","monthGetter","date","getMonth","monthSetter","value","day","getDate","monthLimits","getLimits","newValue","parseInt","min","max","setMonth","newDay","setDate","PATTERN_GETTERS","a","getHours","E","y","M","L","d","H","h","m","s","S","x","PATTERN_SETTERS","hours","current","setHours","lastDayInMonth","isPM","getDay","currentYear","getFullYear","valueLength","String","length","maxLimitLength","substr","setFullYear","getPatternGetter","patternChar","renderDateParts","text","regExpInfo","result","regexp","exec","start","end","sections","i","pattern","patterns","replace","getter","push","index","isStub","caret","limits","_len","arguments","args","Array","_key","setter","forcedPattern","dM","Date","getAmPm","getDatePartIndexByPosition","dateParts","position","caretInGroup"],"sources":["/home/nataf/Cours/world-cities-map/client/node_modules/devextreme/esm/__internal/ui/date_box/m_date_box.mask.parts.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/date_box/m_date_box.mask.parts.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getPatternSetters\r\n} from \"../../../common/core/localization/ldml/date.parser\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    fitIntoRange\r\n} from \"../../../core/utils/math\";\r\nconst monthGetter = date => date.getMonth() + 1;\r\nconst monthSetter = (date, value) => {\r\n    const day = date.getDate();\r\n    const monthLimits = getLimits(\"M\", date);\r\n    const newValue = fitIntoRange(parseInt(value), monthLimits.min, monthLimits.max);\r\n    date.setMonth(newValue - 1, 1);\r\n    const {\r\n        min: min,\r\n        max: max\r\n    } = getLimits(\"dM\", date);\r\n    const newDay = fitIntoRange(day, min, max);\r\n    date.setDate(newDay)\r\n};\r\nconst PATTERN_GETTERS = {\r\n    a: date => date.getHours() < 12 ? 0 : 1,\r\n    E: \"getDay\",\r\n    y: \"getFullYear\",\r\n    M: monthGetter,\r\n    L: monthGetter,\r\n    d: \"getDate\",\r\n    H: \"getHours\",\r\n    h: \"getHours\",\r\n    m: \"getMinutes\",\r\n    s: \"getSeconds\",\r\n    S: \"getMilliseconds\",\r\n    x: \"getTimezoneOffset\"\r\n};\r\nconst PATTERN_SETTERS = extend({}, getPatternSetters(), {\r\n    a: (date, value) => {\r\n        const hours = date.getHours();\r\n        const current = hours >= 12;\r\n        if (current === !!parseInt(value)) {\r\n            return\r\n        }\r\n        date.setHours((hours + 12) % 24)\r\n    },\r\n    d: (date, value) => {\r\n        const lastDayInMonth = getLimits(\"dM\", date).max;\r\n        if (value > lastDayInMonth) {\r\n            date.setMonth(date.getMonth() + 1)\r\n        }\r\n        date.setDate(value)\r\n    },\r\n    h: (date, value) => {\r\n        const isPM = date.getHours() >= 12;\r\n        date.setHours(+value % 12 + (isPM ? 12 : 0))\r\n    },\r\n    M: monthSetter,\r\n    L: monthSetter,\r\n    E: (date, value) => {\r\n        if (value < 0) {\r\n            return\r\n        }\r\n        date.setDate(date.getDate() - date.getDay() + parseInt(value))\r\n    },\r\n    y: (date, value) => {\r\n        const currentYear = date.getFullYear();\r\n        const valueLength = String(value).length;\r\n        const maxLimitLength = String(getLimits(\"y\", date).max).length;\r\n        const newValue = parseInt(String(currentYear).substr(0, maxLimitLength - valueLength) + value);\r\n        date.setFullYear(newValue)\r\n    },\r\n    x: date => date\r\n});\r\nconst getPatternGetter = patternChar => PATTERN_GETTERS[patternChar] || (() => patternChar);\r\nexport const renderDateParts = (text, regExpInfo) => {\r\n    const result = regExpInfo.regexp.exec(text);\r\n    let start = 0;\r\n    let end = 0;\r\n    const sections = [];\r\n    for (let i = 1; i < result.length; i++) {\r\n        start = end;\r\n        end = start + result[i].length;\r\n        const pattern = regExpInfo.patterns[i - 1].replace(/^'|'$/g, \"\");\r\n        const getter = getPatternGetter(pattern[0]);\r\n        sections.push({\r\n            index: i - 1,\r\n            isStub: pattern === result[i],\r\n            caret: {\r\n                start: start,\r\n                end: end\r\n            },\r\n            pattern: pattern,\r\n            text: result[i],\r\n            limits: function() {\r\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                    args[_key] = arguments[_key]\r\n                }\r\n                return getLimits(pattern[0], ...args)\r\n            },\r\n            setter: PATTERN_SETTERS[pattern[0]] || noop,\r\n            getter: getter\r\n        })\r\n    }\r\n    return sections\r\n};\r\nconst getLimits = (pattern, date, forcedPattern) => {\r\n    const limits = {\r\n        y: {\r\n            min: 0,\r\n            max: 9999\r\n        },\r\n        M: {\r\n            min: 1,\r\n            max: 12\r\n        },\r\n        L: {\r\n            min: 1,\r\n            max: 12\r\n        },\r\n        d: {\r\n            min: 1,\r\n            max: 31\r\n        },\r\n        dM: {\r\n            min: 1,\r\n            max: new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\r\n        },\r\n        E: {\r\n            min: 0,\r\n            max: 6\r\n        },\r\n        H: {\r\n            min: 0,\r\n            max: 23\r\n        },\r\n        h: {\r\n            min: 1,\r\n            max: 12\r\n        },\r\n        m: {\r\n            min: 0,\r\n            max: 59\r\n        },\r\n        s: {\r\n            min: 0,\r\n            max: 59\r\n        },\r\n        S: {\r\n            min: 0,\r\n            max: 999\r\n        },\r\n        a: {\r\n            min: 0,\r\n            max: 1\r\n        },\r\n        x: {\r\n            min: 0,\r\n            max: 0\r\n        }\r\n    };\r\n    return limits[forcedPattern || pattern] || limits.getAmPm\r\n};\r\nexport const getDatePartIndexByPosition = (dateParts, position) => {\r\n    for (let i = 0; i < dateParts.length; i++) {\r\n        const caretInGroup = dateParts[i].caret.end >= position;\r\n        if (!dateParts[i].isStub && caretInGroup) {\r\n            return i\r\n        }\r\n    }\r\n    return null\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}